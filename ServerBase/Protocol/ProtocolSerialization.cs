
/*
本文件由工具自动生成 请勿手动修改！！！
*/

using System;
using System.Collections.Generic;

namespace ServerBase.Protocol
{
    /// <summary>
    /// 奖励物品
    /// <summary>
    public partial class CLS_AwardItem
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Type);
            nbs.Write(ConfigId);
            nbs.Write(Count);
            nbs.Write(Level);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Type);
            nbs.Read(out ConfigId);
            nbs.Read(out Count);
            nbs.Read(out Level);
        }
    };
    /// <summary>
    /// 当前数量和上限数量
    /// <summary>
    public partial class CLS_CountInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Value);
            nbs.Write(Limit);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Value);
            nbs.Read(out Limit);
        }
    };
    /// <summary>
    /// 需求数量和当前数量
    /// <summary>
    public partial class CLS_NeedInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Need);
            nbs.Write(Value);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Need);
            nbs.Read(out Value);
        }
    };
    /// <summary>
    /// 当前数量和原来数量
    /// <summary>
    public partial class CLS_ValueChangeInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(ValueOld);
            nbs.Write(ValueNew);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out ValueOld);
            nbs.Read(out ValueNew);
        }
    };
    /// <summary>
    /// 道具需求信息
    /// <summary>
    public partial class CLS_ItemNeedInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(Count);
            nbs.Write(CountNeed);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out Count);
            nbs.Read(out CountNeed);
        }
    };
    /// <summary>
    /// 玩家公共信息
    /// <summary>
    public partial class CLS_PubPlayerBase
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Puid);
            nbs.Write(Name);
            nbs.Write(HeadIndex);
            nbs.Write(StateId);
            nbs.Write(Level);
            nbs.Write(GuildUid);
            nbs.Write(GuildOffice);
            nbs.Write(CombatPower);
            nbs.Write(TickTimeLastLogin);
            nbs.Write(bGoddess);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Puid);
            nbs.Read(out Name);
            nbs.Read(out HeadIndex);
            nbs.Read(out StateId);
            nbs.Read(out Level);
            nbs.Read(out GuildUid);
            nbs.Read(out GuildOffice);
            nbs.Read(out CombatPower);
            nbs.Read(out TickTimeLastLogin);
            nbs.Read(out bGoddess);
        }
    };
    /// <summary>
    /// 快照数据
    /// <summary>
    public partial class CLS_DataSnap
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Puid);
            nbs.Write(ServerID);
            nbs.Write(Name);
            nbs.Write(HeadIndex);
            nbs.Write(StateId);
            nbs.Write(Gem);
            nbs.Write(Level);
            nbs.Write(TickTimeLastLogin);
            nbs.Write(ActivityLevel);
            nbs.Write(Mansion);
            nbs.Write(GuildUid);
            nbs.Write(GuildOffice);
            nbs.Write(Contribution);
            nbs.Write(ContributionTotal);
            nbs.Write(CombatPower);
            nbs.Write(AllArenaCombatPower);
            PlayerData.Serialize(ref nbs);
            nbs.Write(bGoddess);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Puid);
            nbs.Read(out ServerID);
            nbs.Read(out Name);
            nbs.Read(out HeadIndex);
            nbs.Read(out StateId);
            nbs.Read(out Gem);
            nbs.Read(out Level);
            nbs.Read(out TickTimeLastLogin);
            nbs.Read(out ActivityLevel);
            nbs.Read(out Mansion);
            nbs.Read(out GuildUid);
            nbs.Read(out GuildOffice);
            nbs.Read(out Contribution);
            nbs.Read(out ContributionTotal);
            nbs.Read(out CombatPower);
            nbs.Read(out AllArenaCombatPower);
            PlayerData.Unserialize(ref nbs);
            nbs.Read(out bGoddess);
        }
    };
    /// <summary>
    /// 玩家单条信息
    /// <summary>
    public partial class CLS_PlayerData
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Puid);
            nbs.Write(HeadIndex);
            nbs.Write(Name);
            nbs.Write(Score);
            nbs.Write(Level);
            nbs.Write(DictArenaWarrior.Count);
            foreach (var kvp in DictArenaWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(Signature);
            nbs.Write(GuildName);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Puid);
            nbs.Read(out HeadIndex);
            nbs.Read(out Name);
            nbs.Read(out Score);
            nbs.Read(out Level);
            int var46 = nbs.ReadInt();
            for (int k = 0; k < var46; k++)
            {
                int var47 = nbs.ReadInt(); var var48 = new CLS_WarriorInfo(); var48.Unserialize(ref nbs); DictArenaWarrior.Add(var47, var48); 
            }
            nbs.Read(out Signature);
            nbs.Read(out GuildName);
        }
    };
    /// <summary>
    /// 动态日志
    /// <summary>
    public partial class CLS_GameLog
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(GameLogTime);
            nbs.Write((short)GameLogType);
            nbs.Write(Args.Count);
            foreach (var k in Args)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out GameLogTime);
            if (true) { var etemp = nbs.ReadShort(); GameLogType = (EGameLogType)etemp; }
            int var53 = nbs.ReadInt();
            for (int k = 0; k < var53; k++)
            {
                string var54 = nbs.ReadString();Args.Add(var54);
            }
        }
    };
    /// <summary>
    /// 类示例
    /// <summary>
    public partial class CLS_BaseDemo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(a1);
            nbs.Write(a2);
            nbs.Write(a3);
            nbs.Write(a4);
            nbs.Write(a5);
            nbs.Write(a6);
            nbs.Write(a7);
            nbs.Write(d1);
            nbs.Write(d2);
            nbs.Write((short)BaseDemo);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out a1);
            nbs.Read(out a2);
            nbs.Read(out a3);
            nbs.Read(out a4);
            nbs.Read(out a5);
            nbs.Read(out a6);
            nbs.Read(out a7);
            nbs.Read(out d1);
            nbs.Read(out d2);
            if (true) { var etemp = nbs.ReadShort(); BaseDemo = (EnumBaseDemo)etemp; }
        }
    };
    /// <summary>
    /// 对应协议枚举-> ALL_BASE_DEMO
    /// 示例
    /// <summary>
    public partial class All_Base_Demo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(a1);
            nbs.Write(a2);
            nbs.Write(a3);
            nbs.Write(a4);
            nbs.Write(a5);
            nbs.Write(a6);
            nbs.Write(a7);
            nbs.Write(d1);
            nbs.Write(d2);
            nbs.Write((short)eBaseDemo);
            BaseDemo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out a1);
            nbs.Read(out a2);
            nbs.Read(out a3);
            nbs.Read(out a4);
            nbs.Read(out a5);
            nbs.Read(out a6);
            nbs.Read(out a7);
            nbs.Read(out d1);
            nbs.Read(out d2);
            if (true) { var etemp = nbs.ReadShort(); eBaseDemo = (EnumBaseDemo)etemp; }
            BaseDemo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(a1);
            nbs.Write(a2);
            nbs.Write(a3);
            nbs.Write(a4);
            nbs.Write(a5);
            nbs.Write(a6);
            nbs.Write(a7);
            nbs.Write(d1);
            nbs.Write(d2);
            nbs.Write((short)eBaseDemo);
            BaseDemo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out a1);
            nbs.Read(out a2);
            nbs.Read(out a3);
            nbs.Read(out a4);
            nbs.Read(out a5);
            nbs.Read(out a6);
            nbs.Read(out a7);
            nbs.Read(out d1);
            nbs.Read(out d2);
            if (true) { var etemp = nbs.ReadShort(); eBaseDemo = (EnumBaseDemo)etemp; }
            BaseDemo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> ALL_BASE_RESULT
    /// 结果返回
    /// <summary>
    public partial class All_Base_Result : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(HandleId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out HandleId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(HandleId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out HandleId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> ALL_BASE_PING
    /// Ping服务器
    /// <summary>
    public partial class All_Base_Ping : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ServerTime);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out ServerTime);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ServerTime);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out ServerTime);
        }
    };
    /// <summary>
    /// 对应协议枚举-> ALL_BASE_GAMEVERSION
    /// 同步版本号
    /// <summary>
    public partial class All_Base_GameVersion : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(GameVersion);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out GameVersion);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(GameVersion);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out GameVersion);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_DEBUG_CMD
    /// 请求 调试指令
    /// <summary>
    public partial class C2G_Debug_Cmd : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Cmd);
            nbs.Write(ListArgs.Count);
            foreach (var k in ListArgs)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Cmd);
            int var94 = nbs.ReadInt();
            for (int k = 0; k < var94; k++)
            {
                string var95 = nbs.ReadString();ListArgs.Add(var95);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Cmd);
            nbs.Write(ListArgs.Count);
            foreach (var k in ListArgs)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Cmd);
            int var97 = nbs.ReadInt();
            for (int k = 0; k < var97; k++)
            {
                string var98 = nbs.ReadString();ListArgs.Add(var98);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_DEBUG_CMD
    /// 返回 调试指令
    /// <summary>
    public partial class G2C_Debug_Cmd : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_LOGIN_CONNECT
    /// 连接成功
    /// <summary>
    public partial class G2C_Login_Connect : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2L_LOGIN_USERLOGIN
    /// 请求 登陆用户账号
    /// <summary>
    public partial class C2L_Login_UserLogin : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Account);
            nbs.Write(Password);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Account);
            nbs.Read(out Password);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Account);
            nbs.Write(Password);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Account);
            nbs.Read(out Password);
        }
    };
    /// <summary>
    /// 对应协议枚举-> L2C_LOGIN_USERLOGIN
    /// 返回 登陆用户账号
    /// <summary>
    public partial class L2C_Login_UserLogin : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uuid);
            nbs.Write(Code);
            nbs.Write(NeedAgree);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uuid);
            nbs.Read(out Code);
            nbs.Read(out NeedAgree);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uuid);
            nbs.Write(Code);
            nbs.Write(NeedAgree);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uuid);
            nbs.Read(out Code);
            nbs.Read(out NeedAgree);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_LOGIN_PLAYERLOGIN
    /// 请求 登陆玩家
    /// <summary>
    public partial class C2G_Login_PlayerLogin : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uuid);
            nbs.Write(Code);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uuid);
            nbs.Read(out Code);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uuid);
            nbs.Write(Code);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uuid);
            nbs.Read(out Code);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_LOGIN_PLAYERLOGIN
    /// 返回 登陆玩家
    /// <summary>
    public partial class G2C_Login_PlayerLogin : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_LOGIN_PLAYERCREATE
    /// 请求 玩家创建
    /// <summary>
    public partial class C2G_Login_PlayerCreate : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Name);
            nbs.Write(Head);
            nbs.Write(StateId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Name);
            nbs.Read(out Head);
            nbs.Read(out StateId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Name);
            nbs.Write(Head);
            nbs.Write(StateId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Name);
            nbs.Read(out Head);
            nbs.Read(out StateId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_LOGIN_PLAYERCREATE
    /// 返回 玩家创建
    /// <summary>
    public partial class G2C_Login_PlayerCreate : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_LOGIN_REPLACED
    /// 通知玩家被取代连接
    /// <summary>
    public partial class G2C_Login_Replaced : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_LOGIN_BAN
    /// 通知玩家被封号
    /// <summary>
    public partial class G2C_Login_Ban : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 州信息
    /// <summary>
    public partial class CLS_LoginStateInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(Population);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out Population);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_LOGIN_LISTSTATE
    /// 请求 州信息
    /// <summary>
    public partial class C2G_Login_ListState : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_LOGIN_LISTSTATE
    /// 返回 州信息
    /// <summary>
    public partial class G2C_Login_ListState : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListState.Count);
            foreach (var k in ListState)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var121 = nbs.ReadInt();
            for (int k = 0; k < var121; k++)
            {
                var var122 = new CLS_LoginStateInfo(); var122.Unserialize(ref nbs);ListState.Add(var122);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListState.Count);
            foreach (var k in ListState)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var123 = nbs.ReadInt();
            for (int k = 0; k < var123; k++)
            {
                var var124 = new CLS_LoginStateInfo(); var124.Unserialize(ref nbs);ListState.Add(var124);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_LOGIN_CHECKNAME
    /// 请求 检测名字
    /// <summary>
    public partial class C2G_Login_CheckName : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Name);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Name);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Name);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Name);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_LOGIN_CHECKNAME
    /// 返回 检测名字
    /// <summary>
    public partial class G2C_Login_CheckName : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 玩家基本信息
    /// <summary>
    public partial class CLS_Info_Base
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Puid);
            nbs.Write(Name);
            nbs.Write(HeadIndex);
            nbs.Write(StateId);
            nbs.Write(Gem);
            nbs.Write(Gold);
            nbs.Write(FuYu);
            nbs.Write(Silver);
            nbs.Write(Wood);
            nbs.Write(Iron);
            nbs.Write(Food);
            nbs.Write(CapacityWood);
            nbs.Write(CapacityIron);
            nbs.Write(CapacityFood);
            nbs.Write(Level);
            nbs.Write(Exp);
            nbs.Write(VipLevel);
            nbs.Write(VipExp);
            nbs.Write(Spirit);
            nbs.Write(TowerToken);
            nbs.Write(TowerScore);
            nbs.Write(Card);
            nbs.Write(Prestige);
            nbs.Write(DrawScore);
            nbs.Write(GuildUid);
            nbs.Write(GuildOffice);
            nbs.Write(GuildName);
            nbs.Write(MyCapitalCity);
            nbs.Write(GuildState);
            nbs.Write(Soldiers1);
            nbs.Write(Soldiers2);
            nbs.Write(Soldiers3);
            nbs.Write(BuyGoldTimes);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Puid);
            nbs.Read(out Name);
            nbs.Read(out HeadIndex);
            nbs.Read(out StateId);
            nbs.Read(out Gem);
            nbs.Read(out Gold);
            nbs.Read(out FuYu);
            nbs.Read(out Silver);
            nbs.Read(out Wood);
            nbs.Read(out Iron);
            nbs.Read(out Food);
            nbs.Read(out CapacityWood);
            nbs.Read(out CapacityIron);
            nbs.Read(out CapacityFood);
            nbs.Read(out Level);
            nbs.Read(out Exp);
            nbs.Read(out VipLevel);
            nbs.Read(out VipExp);
            nbs.Read(out Spirit);
            nbs.Read(out TowerToken);
            nbs.Read(out TowerScore);
            nbs.Read(out Card);
            nbs.Read(out Prestige);
            nbs.Read(out DrawScore);
            nbs.Read(out GuildUid);
            nbs.Read(out GuildOffice);
            nbs.Read(out GuildName);
            nbs.Read(out MyCapitalCity);
            nbs.Read(out GuildState);
            nbs.Read(out Soldiers1);
            nbs.Read(out Soldiers2);
            nbs.Read(out Soldiers3);
            nbs.Read(out BuyGoldTimes);
        }
    };
    /// <summary>
    /// 玩家杂项信息
    /// <summary>
    public partial class CLS_Info_Misc
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(dictFlagClient.Count);
            foreach (var kvp in dictFlagClient)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(WoodFull);
            nbs.Write(IronFull);
            nbs.Write(FoodFull);
            nbs.Write(CanSign);
            nbs.Write(MailUnread);
            nbs.Write(BankStatus);
            nbs.Write(WarriorBagId);
            nbs.Write(WarriorCount);
            nbs.Write(WarriorCountMax);
            nbs.Write(Signature);
            nbs.Write(bFriend);
            nbs.Write(bChat);
            nbs.Write(TickTimeRegister);
            nbs.Write(ListAlliance.Count);
            foreach (var k in ListAlliance)
            {
                nbs.Write(k);
            }
            nbs.Write(ListGuildCityMy.Count);
            foreach (var k in ListGuildCityMy)
            {
                nbs.Write(k);
            }
            nbs.Write(ListGuildCityAlliance.Count);
            foreach (var k in ListGuildCityAlliance)
            {
                nbs.Write(k);
            }
            nbs.Write(WelfareIsOpen);
            nbs.Write(WelfareNoticeNum);
            nbs.Write(Acitvity7DayLoginIsOpen);
            nbs.Write(Acitvity7DayLoginCanGet);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            int var160 = nbs.ReadInt();
            for (int k = 0; k < var160; k++)
            {
                int var161 = nbs.ReadInt(); int var162 = nbs.ReadInt(); dictFlagClient.Add(var161, var162); 
            }
            nbs.Read(out WoodFull);
            nbs.Read(out IronFull);
            nbs.Read(out FoodFull);
            nbs.Read(out CanSign);
            nbs.Read(out MailUnread);
            nbs.Read(out BankStatus);
            nbs.Read(out WarriorBagId);
            nbs.Read(out WarriorCount);
            nbs.Read(out WarriorCountMax);
            nbs.Read(out Signature);
            nbs.Read(out bFriend);
            nbs.Read(out bChat);
            nbs.Read(out TickTimeRegister);
            int var176 = nbs.ReadInt();
            for (int k = 0; k < var176; k++)
            {
                long var177 = nbs.ReadLong();ListAlliance.Add(var177);
            }
            int var178 = nbs.ReadInt();
            for (int k = 0; k < var178; k++)
            {
                int var179 = nbs.ReadInt();ListGuildCityMy.Add(var179);
            }
            int var180 = nbs.ReadInt();
            for (int k = 0; k < var180; k++)
            {
                int var181 = nbs.ReadInt();ListGuildCityAlliance.Add(var181);
            }
            nbs.Read(out WelfareIsOpen);
            nbs.Read(out WelfareNoticeNum);
            nbs.Read(out Acitvity7DayLoginIsOpen);
            nbs.Read(out Acitvity7DayLoginCanGet);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_INFO_GETALL
    /// 请求 玩家全部信息
    /// <summary>
    public partial class C2G_Info_GetAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_GETALL
    /// 返回 玩家全部信息
    /// <summary>
    public partial class G2C_Info_GetAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            InfoBase.Serialize(ref nbs);
            InfoMisc.Serialize(ref nbs);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            InfoBase.Unserialize(ref nbs);
            InfoMisc.Unserialize(ref nbs);
            int var188 = nbs.ReadInt();
            for (int k = 0; k < var188; k++)
            {
                var var189 = new CLS_ItemInfo(); var189.Unserialize(ref nbs);ListItem.Add(var189);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            InfoBase.Serialize(ref nbs);
            InfoMisc.Serialize(ref nbs);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            InfoBase.Unserialize(ref nbs);
            InfoMisc.Unserialize(ref nbs);
            int var192 = nbs.ReadInt();
            for (int k = 0; k < var192; k++)
            {
                var var193 = new CLS_ItemInfo(); var193.Unserialize(ref nbs);ListItem.Add(var193);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_PUSHALL
    /// 推送 玩家信息 全部
    /// <summary>
    public partial class G2C_Info_PushAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            InfoBase.Serialize(ref nbs);
            InfoMisc.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            InfoBase.Unserialize(ref nbs);
            InfoMisc.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            InfoBase.Serialize(ref nbs);
            InfoMisc.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            InfoBase.Unserialize(ref nbs);
            InfoMisc.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_PUSHITEM
    /// 推送 玩家信息 道具
    /// <summary>
    public partial class G2C_Info_PushItem : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var198 = nbs.ReadInt();
            for (int k = 0; k < var198; k++)
            {
                var var199 = new CLS_ItemInfo(); var199.Unserialize(ref nbs);ListItem.Add(var199);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var200 = nbs.ReadInt();
            for (int k = 0; k < var200; k++)
            {
                var var201 = new CLS_ItemInfo(); var201.Unserialize(ref nbs);ListItem.Add(var201);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_PUSHEQUIP
    /// 推送 玩家信息 装备
    /// <summary>
    public partial class G2C_Info_PushEquip : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PageIndex);
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PageIndex);
            int var203 = nbs.ReadInt();
            for (int k = 0; k < var203; k++)
            {
                long var204 = nbs.ReadLong(); var var205 = new CLS_EquipInfo(); var205.Unserialize(ref nbs); DictEquip.Add(var204, var205); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PageIndex);
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PageIndex);
            int var207 = nbs.ReadInt();
            for (int k = 0; k < var207; k++)
            {
                long var208 = nbs.ReadLong(); var var209 = new CLS_EquipInfo(); var209.Unserialize(ref nbs); DictEquip.Add(var208, var209); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_PUSHWARRIOR
    /// 推送 玩家信息 武将
    /// <summary>
    public partial class G2C_Info_PushWarrior : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PageIndex);
            nbs.Write(ListWarrior.Count);
            foreach (var k in ListWarrior)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PageIndex);
            int var211 = nbs.ReadInt();
            for (int k = 0; k < var211; k++)
            {
                var var212 = new CLS_WarriorInfo(); var212.Unserialize(ref nbs);ListWarrior.Add(var212);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PageIndex);
            nbs.Write(ListWarrior.Count);
            foreach (var k in ListWarrior)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PageIndex);
            int var214 = nbs.ReadInt();
            for (int k = 0; k < var214; k++)
            {
                var var215 = new CLS_WarriorInfo(); var215.Unserialize(ref nbs);ListWarrior.Add(var215);
            }
        }
    };
    /// <summary>
    /// 更新 道具
    /// <summary>
    public partial class CLS_UpdateInfoItem
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Mode);
            ItemInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Mode);
            ItemInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 更新 装备
    /// <summary>
    public partial class CLS_UpdateInfoEquip
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Mode);
            EquipInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Mode);
            EquipInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 更新 武将
    /// <summary>
    public partial class CLS_UpdateInfoWarrior
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Mode);
            WarriorInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Mode);
            WarriorInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_PUSHUPDATE
    /// 推送 玩家信息 更新
    /// <summary>
    public partial class G2C_Info_PushUpdate : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListUpdateItem.Count);
            foreach (var k in ListUpdateItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListUpdateEquip.Count);
            foreach (var k in ListUpdateEquip)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListUpdateWarrior.Count);
            foreach (var k in ListUpdateWarrior)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var222 = nbs.ReadInt();
            for (int k = 0; k < var222; k++)
            {
                var var223 = new CLS_UpdateInfoItem(); var223.Unserialize(ref nbs);ListUpdateItem.Add(var223);
            }
            int var224 = nbs.ReadInt();
            for (int k = 0; k < var224; k++)
            {
                var var225 = new CLS_UpdateInfoEquip(); var225.Unserialize(ref nbs);ListUpdateEquip.Add(var225);
            }
            int var226 = nbs.ReadInt();
            for (int k = 0; k < var226; k++)
            {
                var var227 = new CLS_UpdateInfoWarrior(); var227.Unserialize(ref nbs);ListUpdateWarrior.Add(var227);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListUpdateItem.Count);
            foreach (var k in ListUpdateItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListUpdateEquip.Count);
            foreach (var k in ListUpdateEquip)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListUpdateWarrior.Count);
            foreach (var k in ListUpdateWarrior)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var228 = nbs.ReadInt();
            for (int k = 0; k < var228; k++)
            {
                var var229 = new CLS_UpdateInfoItem(); var229.Unserialize(ref nbs);ListUpdateItem.Add(var229);
            }
            int var230 = nbs.ReadInt();
            for (int k = 0; k < var230; k++)
            {
                var var231 = new CLS_UpdateInfoEquip(); var231.Unserialize(ref nbs);ListUpdateEquip.Add(var231);
            }
            int var232 = nbs.ReadInt();
            for (int k = 0; k < var232; k++)
            {
                var var233 = new CLS_UpdateInfoWarrior(); var233.Unserialize(ref nbs);ListUpdateWarrior.Add(var233);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_INFO_CHANGENAME
    /// 请求 更改姓名
    /// <summary>
    public partial class C2G_Info_ChangeName : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Name);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Name);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Name);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Name);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_CHANGENAME
    /// 返回 更改姓名
    /// <summary>
    public partial class G2C_Info_ChangeName : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Name);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Name);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Name);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Name);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_INFO_CHANGEFLAGCLIENT
    /// 请求 更改客户端特殊标记
    /// <summary>
    public partial class C2G_Info_ChangeFlagClient : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(FlagKey);
            nbs.Write(FlagValue);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out FlagKey);
            nbs.Read(out FlagValue);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(FlagKey);
            nbs.Write(FlagValue);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out FlagKey);
            nbs.Read(out FlagValue);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_CHANGEFLAGCLIENT
    /// 返回 更改客户端特殊标记
    /// <summary>
    public partial class G2C_Info_ChangeFlagClient : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(FlagKey);
            nbs.Write(FlagValue);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out FlagKey);
            nbs.Read(out FlagValue);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(FlagKey);
            nbs.Write(FlagValue);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out FlagKey);
            nbs.Read(out FlagValue);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_INFO_CHANGEHEADINDEX
    /// 请求 更换头像
    /// <summary>
    public partial class C2G_Info_ChangeHeadIndex : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(HeadIndex);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out HeadIndex);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(HeadIndex);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out HeadIndex);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_CHANGEHEADINDEX
    /// 返回 更换头像
    /// <summary>
    public partial class G2C_Info_ChangeHeadIndex : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(HeadIndex);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out HeadIndex);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(HeadIndex);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out HeadIndex);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_INFO_CHANGEHEADDATA
    /// 请求 上传头像数据
    /// <summary>
    public partial class C2G_Info_ChangeHeadData : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(HeadData.Count);
            foreach (var k in HeadData)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var250 = nbs.ReadInt();
            for (int k = 0; k < var250; k++)
            {
                byte var251 = nbs.ReadByte();HeadData.Add(var251);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(HeadData.Count);
            foreach (var k in HeadData)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var252 = nbs.ReadInt();
            for (int k = 0; k < var252; k++)
            {
                byte var253 = nbs.ReadByte();HeadData.Add(var253);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_CHANGEHEADDATA
    /// 返回 上传头像数据
    /// <summary>
    public partial class G2C_Info_ChangeHeadData : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_INFO_SUBMITBUG
    /// 请求 反馈问题
    /// <summary>
    public partial class C2G_Info_SubmitBug : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Text);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Text);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Text);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Text);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_SUBMITBUG
    /// 返回 反馈问题
    /// <summary>
    public partial class G2C_Info_SubmitBug : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_NOTIFYLEVELUP
    /// 通知 玩家升级
    /// <summary>
    public partial class G2C_Info_NotifyLevelUp : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ChangeLevel.Serialize(ref nbs);
            ChangeExp.Serialize(ref nbs);
            ChangeSpirit.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ChangeLevel.Unserialize(ref nbs);
            ChangeExp.Unserialize(ref nbs);
            ChangeSpirit.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ChangeLevel.Serialize(ref nbs);
            ChangeExp.Serialize(ref nbs);
            ChangeSpirit.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ChangeLevel.Unserialize(ref nbs);
            ChangeExp.Unserialize(ref nbs);
            ChangeSpirit.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_INFO_PLAYERDATA
    /// 请求 玩家单条信息
    /// <summary>
    public partial class C2G_Info_PlayerData : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_PLAYERDATA
    /// 返回 玩家单条信息
    /// <summary>
    public partial class G2C_Info_PlayerData : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            PlayerInfo.Serialize(ref nbs);
            nbs.Write(bFriend);
            nbs.Write(bScreen);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            PlayerInfo.Unserialize(ref nbs);
            nbs.Read(out bFriend);
            nbs.Read(out bScreen);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            PlayerInfo.Serialize(ref nbs);
            nbs.Write(bFriend);
            nbs.Write(bScreen);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            PlayerInfo.Unserialize(ref nbs);
            nbs.Read(out bFriend);
            nbs.Read(out bScreen);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_INFO_CHANGESIGNATURE
    /// 请求 更改个人签名
    /// <summary>
    public partial class C2G_Info_ChangeSignature : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Signature);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Signature);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Signature);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Signature);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_INFO_CHANGESIGNATURE
    /// 返回 更改个人签名
    /// <summary>
    public partial class G2C_Info_ChangeSignature : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Signature);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Signature);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Signature);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Signature);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_NOTICE_SYSTEM
    /// 请求 系统公告
    /// <summary>
    public partial class C2G_Notice_System : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_NOTICE_SYSTEM
    /// 返回 系统公告
    /// <summary>
    public partial class G2C_Notice_System : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Text);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Text);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Text);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Text);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_NOTICE_ACTIVITY
    /// 请求 活动公告
    /// <summary>
    public partial class C2G_Notice_Activity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_NOTICE_ACTIVITY
    /// 返回 活动公告
    /// <summary>
    public partial class G2C_Notice_Activity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListText.Count);
            foreach (var k in ListText)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var276 = nbs.ReadInt();
            for (int k = 0; k < var276; k++)
            {
                string var277 = nbs.ReadString();ListText.Add(var277);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListText.Count);
            foreach (var k in ListText)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var278 = nbs.ReadInt();
            for (int k = 0; k < var278; k++)
            {
                string var279 = nbs.ReadString();ListText.Add(var279);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_NOTICE_ROLLING
    /// 发送 走马灯
    /// <summary>
    public partial class G2C_Notice_Rolling : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Type);
            nbs.Write(Text);
            nbs.Write(Count);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Type);
            nbs.Read(out Text);
            nbs.Read(out Count);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Type);
            nbs.Write(Text);
            nbs.Write(Count);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Type);
            nbs.Read(out Text);
            nbs.Read(out Count);
        }
    };
    /// <summary>
    /// 邮件信息
    /// <summary>
    public partial class CLS_MailInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(MailType);
            nbs.Write(Title);
            nbs.Write(HasAttachments);
            nbs.Write(Readed);
            nbs.Write(Got);
            nbs.Write(Saved);
            nbs.Write(CreateTime);
            nbs.Write(Sended);
            nbs.Write(ReceiveName);
            nbs.Write(SenderName);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out MailType);
            nbs.Read(out Title);
            nbs.Read(out HasAttachments);
            nbs.Read(out Readed);
            nbs.Read(out Got);
            nbs.Read(out Saved);
            nbs.Read(out CreateTime);
            nbs.Read(out Sended);
            nbs.Read(out ReceiveName);
            nbs.Read(out SenderName);
        }
    };
    /// <summary>
    /// 邮件信息 详细
    /// <summary>
    public partial class CLS_MailInfoDetails
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            MailInfo.Serialize(ref nbs);
            nbs.Write(Body);
            nbs.Write(listAward.Count);
            foreach (var k in listAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            MailInfo.Unserialize(ref nbs);
            nbs.Read(out Body);
            int var300 = nbs.ReadInt();
            for (int k = 0; k < var300; k++)
            {
                var var301 = new CLS_AwardItem(); var301.Unserialize(ref nbs);listAward.Add(var301);
            }
        }
    };
    /// <summary>
    /// 邮件信息 发送
    /// <summary>
    public partial class CLS_MailInfoSend
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(MailType);
            nbs.Write(Title);
            nbs.Write(Body);
            nbs.Write(SenderName);
            nbs.Write(ReceiveName);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out MailType);
            nbs.Read(out Title);
            nbs.Read(out Body);
            nbs.Read(out SenderName);
            nbs.Read(out ReceiveName);
        }
    };
    /// <summary>
    ///  系统给玩家发送邮件信息
    /// <summary>
    public partial class CLS_SystemMailInfoSend
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(TargetType);
            nbs.Write(ListTarget.Count);
            foreach (var k in ListTarget)
            {
                nbs.Write(k);
            }
            nbs.Write(Title);
            nbs.Write(Body);
            nbs.Write(SenderName);
            nbs.Write(ListAttachments.Count);
            foreach (var k in ListAttachments)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out TargetType);
            int var309 = nbs.ReadInt();
            for (int k = 0; k < var309; k++)
            {
                string var310 = nbs.ReadString();ListTarget.Add(var310);
            }
            nbs.Read(out Title);
            nbs.Read(out Body);
            nbs.Read(out SenderName);
            int var314 = nbs.ReadInt();
            for (int k = 0; k < var314; k++)
            {
                var var315 = new CLS_AwardItem(); var315.Unserialize(ref nbs);ListAttachments.Add(var315);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MAIL_LIST
    /// 请求 邮件列表
    /// <summary>
    public partial class C2G_Mail_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MAIL_LIST
    /// 返回 邮件列表
    /// <summary>
    public partial class G2C_Mail_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListMail.Count);
            foreach (var k in ListMail)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var316 = nbs.ReadInt();
            for (int k = 0; k < var316; k++)
            {
                var var317 = new CLS_MailInfo(); var317.Unserialize(ref nbs);ListMail.Add(var317);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListMail.Count);
            foreach (var k in ListMail)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var318 = nbs.ReadInt();
            for (int k = 0; k < var318; k++)
            {
                var var319 = new CLS_MailInfo(); var319.Unserialize(ref nbs);ListMail.Add(var319);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MAIL_READ
    /// 请求 邮件读取
    /// <summary>
    public partial class C2G_Mail_Read : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MAIL_READ
    /// 返回 邮件读取
    /// <summary>
    public partial class G2C_Mail_Read : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            Details.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            Details.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            Details.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            Details.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MAIL_GET
    /// 请求 邮件领取附件
    /// <summary>
    public partial class C2G_Mail_Get : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MAIL_GET
    /// 返回 邮件领取附件
    /// <summary>
    public partial class G2C_Mail_Get : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(listAward.Count);
            foreach (var k in listAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var329 = nbs.ReadInt();
            for (int k = 0; k < var329; k++)
            {
                var var330 = new CLS_AwardItem(); var330.Unserialize(ref nbs);listAward.Add(var330);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(listAward.Count);
            foreach (var k in listAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var332 = nbs.ReadInt();
            for (int k = 0; k < var332; k++)
            {
                var var333 = new CLS_AwardItem(); var333.Unserialize(ref nbs);listAward.Add(var333);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MAIL_GETALL
    /// 请求 邮件一键领取
    /// <summary>
    public partial class C2G_Mail_GetAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MAIL_GETALL
    /// 返回 邮件一键领取
    /// <summary>
    public partial class G2C_Mail_GetAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(listAward.Count);
            foreach (var k in listAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var334 = nbs.ReadInt();
            for (int k = 0; k < var334; k++)
            {
                var var335 = new CLS_AwardItem(); var335.Unserialize(ref nbs);listAward.Add(var335);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(listAward.Count);
            foreach (var k in listAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var336 = nbs.ReadInt();
            for (int k = 0; k < var336; k++)
            {
                var var337 = new CLS_AwardItem(); var337.Unserialize(ref nbs);listAward.Add(var337);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MAIL_DELETE
    /// 请求 邮件删除
    /// <summary>
    public partial class C2G_Mail_Delete : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MAIL_DELETE
    /// 返回 邮件删除
    /// <summary>
    public partial class G2C_Mail_Delete : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MAIL_DELETEREADED
    /// 请求 邮件清理已读
    /// <summary>
    public partial class C2G_Mail_DeleteReaded : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MailType);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MailType);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MailType);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MailType);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MAIL_DELETEREADED
    /// 返回 邮件清理已读
    /// <summary>
    public partial class G2C_Mail_DeleteReaded : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListMail.Count);
            foreach (var k in ListMail)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var344 = nbs.ReadInt();
            for (int k = 0; k < var344; k++)
            {
                var var345 = new CLS_MailInfo(); var345.Unserialize(ref nbs);ListMail.Add(var345);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListMail.Count);
            foreach (var k in ListMail)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var346 = nbs.ReadInt();
            for (int k = 0; k < var346; k++)
            {
                var var347 = new CLS_MailInfo(); var347.Unserialize(ref nbs);ListMail.Add(var347);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MAIL_SAVE
    /// 请求 邮件保存/取消保存
    /// <summary>
    public partial class C2G_Mail_Save : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MAIL_SAVE
    /// 返回 邮件保存/取消保存
    /// <summary>
    public partial class G2C_Mail_Save : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MAIL_SEND
    /// 请求 邮件发送
    /// <summary>
    public partial class C2G_Mail_Send : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            MailInfoSend.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            MailInfoSend.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            MailInfoSend.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            MailInfoSend.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MAIL_SEND
    /// 返回 邮件发送
    /// <summary>
    public partial class G2C_Mail_Send : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            MailInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            MailInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            MailInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            MailInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 聊天玩家信息
    /// <summary>
    public partial class CLS_ChatPlayerBase
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Puid);
            nbs.Write(Name);
            nbs.Write(HeadIndex);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Puid);
            nbs.Read(out Name);
            nbs.Read(out HeadIndex);
        }
    };
    /// <summary>
    /// 聊天信息
    /// <summary>
    public partial class CLS_ChatMsg
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(ChatTime);
            nbs.Write(Channel);
            SenderInfo.Serialize(ref nbs);
            nbs.Write(Text);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out ChatTime);
            nbs.Read(out Channel);
            SenderInfo.Unserialize(ref nbs);
            nbs.Read(out Text);
        }
    };
    /// <summary>
    /// 私聊记录
    /// <summary>
    public partial class CLS_ChatList
    {
        public void Serialize(ref NetBitStream nbs)
        {
            Info.Serialize(ref nbs);
            nbs.Write(ListChatMsgs.Count);
            foreach (var k in ListChatMsgs)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            Info.Unserialize(ref nbs);
            int var364 = nbs.ReadInt();
            for (int k = 0; k < var364; k++)
            {
                var var365 = new CLS_ChatMsg(); var365.Unserialize(ref nbs);ListChatMsgs.Add(var365);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_CHAT_SEND
    /// 请求 聊天信息发送
    /// <summary>
    public partial class C2G_Chat_Send : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Channel);
            nbs.Write(Text);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Channel);
            nbs.Read(out Text);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Channel);
            nbs.Write(Text);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Channel);
            nbs.Read(out Text);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CHAT_SEND
    /// 返回 聊天信息发送
    /// <summary>
    public partial class G2C_Chat_Send : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CHAT_RECEIVE
    /// 通知 聊天信息接收
    /// <summary>
    public partial class G2C_Chat_Receive : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListChatMsgs.Count);
            foreach (var k in ListChatMsgs)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var372 = nbs.ReadInt();
            for (int k = 0; k < var372; k++)
            {
                var var373 = new CLS_ChatMsg(); var373.Unserialize(ref nbs);ListChatMsgs.Add(var373);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListChatMsgs.Count);
            foreach (var k in ListChatMsgs)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var374 = nbs.ReadInt();
            for (int k = 0; k < var374; k++)
            {
                var var375 = new CLS_ChatMsg(); var375.Unserialize(ref nbs);ListChatMsgs.Add(var375);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_CHAT_GETPRIVATECHAT
    /// 请求 请求私聊数据
    /// <summary>
    public partial class C2G_Chat_GetPrivateChat : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CHAT_GETPRIVATECHAT
    /// 返回 聊天信息发送
    /// <summary>
    public partial class G2C_Chat_GetPrivateChat : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictChatInfo.Count);
            foreach (var kvp in DictChatInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var376 = nbs.ReadInt();
            for (int k = 0; k < var376; k++)
            {
                long var377 = nbs.ReadLong(); var var378 = new CLS_ChatList(); var378.Unserialize(ref nbs); DictChatInfo.Add(var377, var378); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictChatInfo.Count);
            foreach (var kvp in DictChatInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var379 = nbs.ReadInt();
            for (int k = 0; k < var379; k++)
            {
                long var380 = nbs.ReadLong(); var var381 = new CLS_ChatList(); var381.Unserialize(ref nbs); DictChatInfo.Add(var380, var381); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_CHAT_REMOVE
    /// 请求 删除最近联系人
    /// <summary>
    public partial class C2G_Chat_Remove : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CHAT_REMOVE
    /// 返回 删除最近联系人
    /// <summary>
    public partial class G2C_Chat_Remove : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 玩家单条信息
    /// <summary>
    public partial class CLS_FriendInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(HeadIndex);
            nbs.Write(Name);
            nbs.Write(Level);
            nbs.Write(Signature);
            nbs.Write(GiveState);
            nbs.Write(bOnline);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out HeadIndex);
            nbs.Read(out Name);
            nbs.Read(out Level);
            nbs.Read(out Signature);
            nbs.Read(out GiveState);
            nbs.Read(out bOnline);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_FRIEND_LIST
    /// 请求 好友列表
    /// <summary>
    public partial class C2G_Friend_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_FRIEND_LIST
    /// 返回 好友列表
    /// <summary>
    public partial class G2C_Friend_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var393 = nbs.ReadInt();
            for (int k = 0; k < var393; k++)
            {
                var var394 = new CLS_FriendInfo(); var394.Unserialize(ref nbs);ListItem.Add(var394);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var395 = nbs.ReadInt();
            for (int k = 0; k < var395; k++)
            {
                var var396 = new CLS_FriendInfo(); var396.Unserialize(ref nbs);ListItem.Add(var396);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_FRIEND_LISTAPPLY
    /// 请求 申请列表
    /// <summary>
    public partial class C2G_Friend_ListApply : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_FRIEND_LISTAPPLY
    /// 返回 申请列表
    /// <summary>
    public partial class G2C_Friend_ListApply : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var397 = nbs.ReadInt();
            for (int k = 0; k < var397; k++)
            {
                var var398 = new CLS_FriendInfo(); var398.Unserialize(ref nbs);ListItem.Add(var398);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var399 = nbs.ReadInt();
            for (int k = 0; k < var399; k++)
            {
                var var400 = new CLS_FriendInfo(); var400.Unserialize(ref nbs);ListItem.Add(var400);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_FRIEND_LISTRECOMMEND
    /// 请求 推荐列表
    /// <summary>
    public partial class C2G_Friend_ListRecommend : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_FRIEND_LISTRECOMMEND
    /// 返回 推荐列表
    /// <summary>
    public partial class G2C_Friend_ListRecommend : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var401 = nbs.ReadInt();
            for (int k = 0; k < var401; k++)
            {
                var var402 = new CLS_FriendInfo(); var402.Unserialize(ref nbs);ListItem.Add(var402);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var403 = nbs.ReadInt();
            for (int k = 0; k < var403; k++)
            {
                var var404 = new CLS_FriendInfo(); var404.Unserialize(ref nbs);ListItem.Add(var404);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_FRIEND_APPLY
    /// 请求 申请好友
    /// <summary>
    public partial class C2G_Friend_Apply : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_FRIEND_APPLY
    /// 返回 申请好友
    /// <summary>
    public partial class G2C_Friend_Apply : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(bFriend);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out bFriend);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(bFriend);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out bFriend);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_FRIEND_ADD
    /// 请求 添加好友
    /// <summary>
    public partial class C2G_Friend_Add : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(bAgree);
            nbs.Write(bAll);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out bAgree);
            nbs.Read(out bAll);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(bAgree);
            nbs.Write(bAll);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out bAgree);
            nbs.Read(out bAll);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_FRIEND_ADD
    /// 返回 添加好友
    /// <summary>
    public partial class G2C_Friend_Add : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_FRIEND_REMOVE
    /// 请求 请求删除
    /// <summary>
    public partial class C2G_Friend_Remove : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_FRIEND_REMOVE
    /// 返回 请求删除
    /// <summary>
    public partial class G2C_Friend_Remove : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_FRIEND_GIVE
    /// 请求 赠送体力
    /// <summary>
    public partial class C2G_Friend_Give : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(bAll);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out bAll);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(bAll);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out bAll);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_FRIEND_GIVE
    /// 返回 赠送体力
    /// <summary>
    public partial class G2C_Friend_Give : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(total);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out total);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(total);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out total);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_FRIEND_RECEIVE
    /// 请求 领取体力
    /// <summary>
    public partial class C2G_Friend_Receive : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(bAll);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out bAll);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(bAll);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out bAll);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_FRIEND_RECEIVE
    /// 返回 领取体力
    /// <summary>
    public partial class G2C_Friend_Receive : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(total);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out total);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(total);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out total);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_FRIEND_SCREEN
    /// 请求 屏蔽好友
    /// <summary>
    public partial class C2G_Friend_Screen : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(bScreen);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out bScreen);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(bScreen);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out bScreen);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_FRIEND_SCREEN
    /// 返回 屏蔽好友
    /// <summary>
    public partial class G2C_Friend_Screen : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(bScreen);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out bScreen);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(bScreen);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out bScreen);
        }
    };
    /// <summary>
    /// 城池信息简单
    /// <summary>
    public partial class CLS_MapCitySimple
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(Ownership);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out Ownership);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MAP_LISTCITY
    /// 请求 城池列表
    /// <summary>
    public partial class C2G_Map_ListCity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MAP_LISTCITY
    /// 返回 城池列表
    /// <summary>
    public partial class G2C_Map_ListCity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListCity.Count);
            foreach (var k in ListCity)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListAlliance.Count);
            foreach (var k in ListAlliance)
            {
                nbs.Write(k);
            }
            nbs.Write(ListGuildCityMy.Count);
            foreach (var k in ListGuildCityMy)
            {
                nbs.Write(k);
            }
            nbs.Write(ListGuildCityAlliance.Count);
            foreach (var k in ListGuildCityAlliance)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var441 = nbs.ReadInt();
            for (int k = 0; k < var441; k++)
            {
                var var442 = new CLS_MapCitySimple(); var442.Unserialize(ref nbs);ListCity.Add(var442);
            }
            int var443 = nbs.ReadInt();
            for (int k = 0; k < var443; k++)
            {
                long var444 = nbs.ReadLong();ListAlliance.Add(var444);
            }
            int var445 = nbs.ReadInt();
            for (int k = 0; k < var445; k++)
            {
                int var446 = nbs.ReadInt();ListGuildCityMy.Add(var446);
            }
            int var447 = nbs.ReadInt();
            for (int k = 0; k < var447; k++)
            {
                int var448 = nbs.ReadInt();ListGuildCityAlliance.Add(var448);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListCity.Count);
            foreach (var k in ListCity)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListAlliance.Count);
            foreach (var k in ListAlliance)
            {
                nbs.Write(k);
            }
            nbs.Write(ListGuildCityMy.Count);
            foreach (var k in ListGuildCityMy)
            {
                nbs.Write(k);
            }
            nbs.Write(ListGuildCityAlliance.Count);
            foreach (var k in ListGuildCityAlliance)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var449 = nbs.ReadInt();
            for (int k = 0; k < var449; k++)
            {
                var var450 = new CLS_MapCitySimple(); var450.Unserialize(ref nbs);ListCity.Add(var450);
            }
            int var451 = nbs.ReadInt();
            for (int k = 0; k < var451; k++)
            {
                long var452 = nbs.ReadLong();ListAlliance.Add(var452);
            }
            int var453 = nbs.ReadInt();
            for (int k = 0; k < var453; k++)
            {
                int var454 = nbs.ReadInt();ListGuildCityMy.Add(var454);
            }
            int var455 = nbs.ReadInt();
            for (int k = 0; k < var455; k++)
            {
                int var456 = nbs.ReadInt();ListGuildCityAlliance.Add(var456);
            }
        }
    };
    /// <summary>
    /// 城池信息
    /// <summary>
    public partial class CLS_MapCityInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(GuildName);
            nbs.Write(LeaderName);
            nbs.Write(Prosperity);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out GuildName);
            nbs.Read(out LeaderName);
            nbs.Read(out Prosperity);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MAP_CITYINFO
    /// 请求 城池信息
    /// <summary>
    public partial class C2G_Map_CityInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MAP_CITYINFO
    /// 返回 城池信息
    /// <summary>
    public partial class G2C_Map_CityInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            CityInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            CityInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            CityInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            CityInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 我方城池信息
    /// <summary>
    public partial class CLS_MapMyCityInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(Prosperity);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out Prosperity);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MAP_LISTMYCITY
    /// 请求 我方城池列表
    /// <summary>
    public partial class C2G_Map_ListMyCity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MAP_LISTMYCITY
    /// 返回 我方城池列表
    /// <summary>
    public partial class G2C_Map_ListMyCity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListMyCity.Count);
            foreach (var k in ListMyCity)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var467 = nbs.ReadInt();
            for (int k = 0; k < var467; k++)
            {
                var var468 = new CLS_MapMyCityInfo(); var468.Unserialize(ref nbs);ListMyCity.Add(var468);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListMyCity.Count);
            foreach (var k in ListMyCity)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var469 = nbs.ReadInt();
            for (int k = 0; k < var469; k++)
            {
                var var470 = new CLS_MapMyCityInfo(); var470.Unserialize(ref nbs);ListMyCity.Add(var470);
            }
        }
    };
    /// <summary>
    /// 道具信息
    /// <summary>
    public partial class CLS_ItemInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(Count);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out Count);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ITEM_LIST
    /// 请求 道具列表
    /// <summary>
    public partial class C2G_Item_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ITEM_LIST
    /// 返回 道具列表
    /// <summary>
    public partial class G2C_Item_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var473 = nbs.ReadInt();
            for (int k = 0; k < var473; k++)
            {
                var var474 = new CLS_ItemInfo(); var474.Unserialize(ref nbs);ListItem.Add(var474);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var475 = nbs.ReadInt();
            for (int k = 0; k < var475; k++)
            {
                var var476 = new CLS_ItemInfo(); var476.Unserialize(ref nbs);ListItem.Add(var476);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ITEM_SELL
    /// 请求 道具卖店
    /// <summary>
    public partial class C2G_Item_Sell : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Count);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Count);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Count);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Count);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ITEM_SELL
    /// 返回 道具卖店
    /// <summary>
    public partial class G2C_Item_Sell : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var481 = nbs.ReadInt();
            for (int k = 0; k < var481; k++)
            {
                var var482 = new CLS_ItemInfo(); var482.Unserialize(ref nbs);ListItem.Add(var482);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var483 = nbs.ReadInt();
            for (int k = 0; k < var483; k++)
            {
                var var484 = new CLS_ItemInfo(); var484.Unserialize(ref nbs);ListItem.Add(var484);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ITEM_USE
    /// 请求 道具使用
    /// <summary>
    public partial class C2G_Item_Use : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Type);
            nbs.Write(Count);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Type);
            nbs.Read(out Count);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Type);
            nbs.Write(Count);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Type);
            nbs.Read(out Count);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ITEM_USE
    /// 返回 道具使用
    /// <summary>
    public partial class G2C_Item_Use : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Type);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Type);
            int var492 = nbs.ReadInt();
            for (int k = 0; k < var492; k++)
            {
                var var493 = new CLS_ItemInfo(); var493.Unserialize(ref nbs);ListItem.Add(var493);
            }
            int var494 = nbs.ReadInt();
            for (int k = 0; k < var494; k++)
            {
                var var495 = new CLS_AwardItem(); var495.Unserialize(ref nbs);ListAward.Add(var495);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Type);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Type);
            int var497 = nbs.ReadInt();
            for (int k = 0; k < var497; k++)
            {
                var var498 = new CLS_ItemInfo(); var498.Unserialize(ref nbs);ListItem.Add(var498);
            }
            int var499 = nbs.ReadInt();
            for (int k = 0; k < var499; k++)
            {
                var var500 = new CLS_AwardItem(); var500.Unserialize(ref nbs);ListAward.Add(var500);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ITEM_RESOURCESLIST
    /// 请求 资源道具列表
    /// <summary>
    public partial class C2G_Item_ResourcesList : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Type);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Type);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Type);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Type);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ITEM_RESOURCESLIST
    /// 返回 资源道具列表
    /// <summary>
    public partial class G2C_Item_ResourcesList : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var503 = nbs.ReadInt();
            for (int k = 0; k < var503; k++)
            {
                var var504 = new CLS_ItemInfo(); var504.Unserialize(ref nbs);ListItem.Add(var504);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var505 = nbs.ReadInt();
            for (int k = 0; k < var505; k++)
            {
                var var506 = new CLS_ItemInfo(); var506.Unserialize(ref nbs);ListItem.Add(var506);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ITEM_RESOURCESUSE
    /// 请求 资源道具使用
    /// <summary>
    public partial class C2G_Item_ResourcesUse : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Items.Count);
            foreach (var k in Items)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(Type);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var507 = nbs.ReadInt();
            for (int k = 0; k < var507; k++)
            {
                var var508 = new CLS_ItemInfo(); var508.Unserialize(ref nbs);Items.Add(var508);
            }
            nbs.Read(out Type);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Items.Count);
            foreach (var k in Items)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(Type);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var510 = nbs.ReadInt();
            for (int k = 0; k < var510; k++)
            {
                var var511 = new CLS_ItemInfo(); var511.Unserialize(ref nbs);Items.Add(var511);
            }
            nbs.Read(out Type);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ITEM_RESOURCESUSE
    /// 返回 资源道具使用
    /// <summary>
    public partial class G2C_Item_ResourcesUse : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var513 = nbs.ReadInt();
            for (int k = 0; k < var513; k++)
            {
                var var514 = new CLS_ItemInfo(); var514.Unserialize(ref nbs);ListItem.Add(var514);
            }
            int var515 = nbs.ReadInt();
            for (int k = 0; k < var515; k++)
            {
                var var516 = new CLS_AwardItem(); var516.Unserialize(ref nbs);ListAward.Add(var516);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var517 = nbs.ReadInt();
            for (int k = 0; k < var517; k++)
            {
                var var518 = new CLS_ItemInfo(); var518.Unserialize(ref nbs);ListItem.Add(var518);
            }
            int var519 = nbs.ReadInt();
            for (int k = 0; k < var519; k++)
            {
                var var520 = new CLS_AwardItem(); var520.Unserialize(ref nbs);ListAward.Add(var520);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ITEM_RESOURCESBUY
    /// 请求 资源道具购买
    /// <summary>
    public partial class C2G_Item_ResourcesBuy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ID);
            nbs.Write(Amount);
            nbs.Write(Type);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out ID);
            nbs.Read(out Amount);
            nbs.Read(out Type);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ID);
            nbs.Write(Amount);
            nbs.Write(Type);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out ID);
            nbs.Read(out Amount);
            nbs.Read(out Type);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ITEM_RESOURCESBUY
    /// 返回 资源道具购买
    /// <summary>
    public partial class G2C_Item_ResourcesBuy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var527 = nbs.ReadInt();
            for (int k = 0; k < var527; k++)
            {
                var var528 = new CLS_ItemInfo(); var528.Unserialize(ref nbs);ListItem.Add(var528);
            }
            int var529 = nbs.ReadInt();
            for (int k = 0; k < var529; k++)
            {
                var var530 = new CLS_AwardItem(); var530.Unserialize(ref nbs);ListAward.Add(var530);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var531 = nbs.ReadInt();
            for (int k = 0; k < var531; k++)
            {
                var var532 = new CLS_ItemInfo(); var532.Unserialize(ref nbs);ListItem.Add(var532);
            }
            int var533 = nbs.ReadInt();
            for (int k = 0; k < var533; k++)
            {
                var var534 = new CLS_AwardItem(); var534.Unserialize(ref nbs);ListAward.Add(var534);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ITEM_COMBATUSE
    /// 请求 战斗使用道具
    /// <summary>
    public partial class C2G_Item_CombatUse : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Count);
            nbs.Write(CombatType);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Count);
            nbs.Read(out CombatType);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Count);
            nbs.Write(CombatType);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Count);
            nbs.Read(out CombatType);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ITEM_COMBATUSE
    /// 返回 战斗使用道具
    /// <summary>
    public partial class G2C_Item_CombatUse : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Count);
            nbs.Write(CombatType);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Count);
            nbs.Read(out CombatType);
            int var544 = nbs.ReadInt();
            for (int k = 0; k < var544; k++)
            {
                var var545 = new CLS_ItemInfo(); var545.Unserialize(ref nbs);ListItem.Add(var545);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Count);
            nbs.Write(CombatType);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Count);
            nbs.Read(out CombatType);
            int var549 = nbs.ReadInt();
            for (int k = 0; k < var549; k++)
            {
                var var550 = new CLS_ItemInfo(); var550.Unserialize(ref nbs);ListItem.Add(var550);
            }
        }
    };
    /// <summary>
    /// 装备高级属性
    /// <summary>
    public partial class CLS_EquipSuffix
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(ConfigId);
            nbs.Write(PassiveType);
            nbs.Write(SuffixValue);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out ConfigId);
            nbs.Read(out PassiveType);
            nbs.Read(out SuffixValue);
        }
    };
    /// <summary>
    /// 装备信息
    /// <summary>
    public partial class CLS_EquipInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(ConfigId);
            nbs.Write(EquipType);
            nbs.Write(Intensify);
            nbs.Write(CombatProperty.Count);
            foreach (var kvp in CombatProperty)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(MarkName);
            nbs.Write(SuffixProperty.Count);
            foreach (var k in SuffixProperty)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out ConfigId);
            nbs.Read(out EquipType);
            nbs.Read(out Intensify);
            int var558 = nbs.ReadInt();
            for (int k = 0; k < var558; k++)
            {
                int var559 = nbs.ReadInt(); float var560 = nbs.ReadFloat(); CombatProperty.Add(var559, var560); 
            }
            nbs.Read(out MarkName);
            int var562 = nbs.ReadInt();
            for (int k = 0; k < var562; k++)
            {
                var var563 = new CLS_EquipSuffix(); var563.Unserialize(ref nbs);SuffixProperty.Add(var563);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EQUIP_LIST
    /// 请求 装备列表
    /// <summary>
    public partial class C2G_Equip_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EQUIP_LIST
    /// 返回 装备列表
    /// <summary>
    public partial class G2C_Equip_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PageIndex);
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PageIndex);
            int var565 = nbs.ReadInt();
            for (int k = 0; k < var565; k++)
            {
                long var566 = nbs.ReadLong(); var var567 = new CLS_EquipInfo(); var567.Unserialize(ref nbs); DictEquip.Add(var566, var567); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PageIndex);
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PageIndex);
            int var569 = nbs.ReadInt();
            for (int k = 0; k < var569; k++)
            {
                long var570 = nbs.ReadLong(); var var571 = new CLS_EquipInfo(); var571.Unserialize(ref nbs); DictEquip.Add(var570, var571); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EQUIP_WARRIORLIST
    /// 请求 武将装备列表
    /// <summary>
    public partial class C2G_Equip_WarriorList : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EQUIP_WARRIORLIST
    /// 返回 武将装备列表
    /// <summary>
    public partial class G2C_Equip_WarriorList : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictEquiped.Count);
            foreach (var kvp in DictEquiped)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            WarriorInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var574 = nbs.ReadInt();
            for (int k = 0; k < var574; k++)
            {
                int var575 = nbs.ReadInt(); var var576 = new CLS_EquipInfo(); var576.Unserialize(ref nbs); DictEquiped.Add(var575, var576); 
            }
            int var577 = nbs.ReadInt();
            for (int k = 0; k < var577; k++)
            {
                long var578 = nbs.ReadLong(); var var579 = new CLS_EquipInfo(); var579.Unserialize(ref nbs); DictEquip.Add(var578, var579); 
            }
            WarriorInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictEquiped.Count);
            foreach (var kvp in DictEquiped)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            WarriorInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var581 = nbs.ReadInt();
            for (int k = 0; k < var581; k++)
            {
                int var582 = nbs.ReadInt(); var var583 = new CLS_EquipInfo(); var583.Unserialize(ref nbs); DictEquiped.Add(var582, var583); 
            }
            int var584 = nbs.ReadInt();
            for (int k = 0; k < var584; k++)
            {
                long var585 = nbs.ReadLong(); var var586 = new CLS_EquipInfo(); var586.Unserialize(ref nbs); DictEquip.Add(var585, var586); 
            }
            WarriorInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EQUIP_WARRIORALL
    /// 请求 所有武将装备列表
    /// <summary>
    public partial class C2G_Equip_WarriorAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EQUIP_WARRIORALL
    /// 返回 所有武将装备列表
    /// <summary>
    public partial class G2C_Equip_WarriorAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var588 = nbs.ReadInt();
            for (int k = 0; k < var588; k++)
            {
                long var589 = nbs.ReadLong(); var var590 = new CLS_EquipInfo(); var590.Unserialize(ref nbs); DictEquip.Add(var589, var590); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var591 = nbs.ReadInt();
            for (int k = 0; k < var591; k++)
            {
                long var592 = nbs.ReadLong(); var var593 = new CLS_EquipInfo(); var593.Unserialize(ref nbs); DictEquip.Add(var592, var593); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EQUIP_WARRIORWIELD
    /// 请求 武将装备运用
    /// <summary>
    public partial class C2G_Equip_WarriorWield : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(WarriorId);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out WarriorId);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(WarriorId);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out WarriorId);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EQUIP_WARRIORWIELD
    /// 返回 武将装备运用
    /// <summary>
    public partial class G2C_Equip_WarriorWield : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictEquiped.Count);
            foreach (var kvp in DictEquiped)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            WarriorInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var598 = nbs.ReadInt();
            for (int k = 0; k < var598; k++)
            {
                int var599 = nbs.ReadInt(); var var600 = new CLS_EquipInfo(); var600.Unserialize(ref nbs); DictEquiped.Add(var599, var600); 
            }
            int var601 = nbs.ReadInt();
            for (int k = 0; k < var601; k++)
            {
                long var602 = nbs.ReadLong(); var var603 = new CLS_EquipInfo(); var603.Unserialize(ref nbs); DictEquip.Add(var602, var603); 
            }
            WarriorInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictEquiped.Count);
            foreach (var kvp in DictEquiped)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            WarriorInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var605 = nbs.ReadInt();
            for (int k = 0; k < var605; k++)
            {
                int var606 = nbs.ReadInt(); var var607 = new CLS_EquipInfo(); var607.Unserialize(ref nbs); DictEquiped.Add(var606, var607); 
            }
            int var608 = nbs.ReadInt();
            for (int k = 0; k < var608; k++)
            {
                long var609 = nbs.ReadLong(); var var610 = new CLS_EquipInfo(); var610.Unserialize(ref nbs); DictEquip.Add(var609, var610); 
            }
            WarriorInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EQUIP_WARRIORREMOVE
    /// 请求 武将装备卸下
    /// <summary>
    public partial class C2G_Equip_WarriorRemove : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(WarriorId);
            nbs.Write(EquipType);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out WarriorId);
            nbs.Read(out EquipType);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(WarriorId);
            nbs.Write(EquipType);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out WarriorId);
            nbs.Read(out EquipType);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EQUIP_WARRIORREMOVE
    /// 返回 武将装备卸下
    /// <summary>
    public partial class G2C_Equip_WarriorRemove : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictEquiped.Count);
            foreach (var kvp in DictEquiped)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            WarriorInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var616 = nbs.ReadInt();
            for (int k = 0; k < var616; k++)
            {
                int var617 = nbs.ReadInt(); var var618 = new CLS_EquipInfo(); var618.Unserialize(ref nbs); DictEquiped.Add(var617, var618); 
            }
            int var619 = nbs.ReadInt();
            for (int k = 0; k < var619; k++)
            {
                long var620 = nbs.ReadLong(); var var621 = new CLS_EquipInfo(); var621.Unserialize(ref nbs); DictEquip.Add(var620, var621); 
            }
            WarriorInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictEquiped.Count);
            foreach (var kvp in DictEquiped)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            WarriorInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var623 = nbs.ReadInt();
            for (int k = 0; k < var623; k++)
            {
                int var624 = nbs.ReadInt(); var var625 = new CLS_EquipInfo(); var625.Unserialize(ref nbs); DictEquiped.Add(var624, var625); 
            }
            int var626 = nbs.ReadInt();
            for (int k = 0; k < var626; k++)
            {
                long var627 = nbs.ReadLong(); var var628 = new CLS_EquipInfo(); var628.Unserialize(ref nbs); DictEquip.Add(var627, var628); 
            }
            WarriorInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EQUIP_WARRIORRESOLVE
    /// 请求 武将装备分解
    /// <summary>
    public partial class C2G_Equip_WarriorResolve : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id.Count);
            foreach (var k in Id)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var630 = nbs.ReadInt();
            for (int k = 0; k < var630; k++)
            {
                long var631 = nbs.ReadLong();Id.Add(var631);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id.Count);
            foreach (var k in Id)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var632 = nbs.ReadInt();
            for (int k = 0; k < var632; k++)
            {
                long var633 = nbs.ReadLong();Id.Add(var633);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EQUIP_WARRIORRESOLVE
    /// 返回 武将装备分解
    /// <summary>
    public partial class G2C_Equip_WarriorResolve : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var634 = nbs.ReadInt();
            for (int k = 0; k < var634; k++)
            {
                var var635 = new CLS_AwardItem(); var635.Unserialize(ref nbs);ListAward.Add(var635);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var636 = nbs.ReadInt();
            for (int k = 0; k < var636; k++)
            {
                var var637 = new CLS_AwardItem(); var637.Unserialize(ref nbs);ListAward.Add(var637);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EQUIP_RENAME
    /// 请求 装备修改名称
    /// <summary>
    public partial class C2G_Equip_Rename : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MarkName);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MarkName);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MarkName);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MarkName);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EQUIP_RENAME
    /// 返回 装备修改名称
    /// <summary>
    public partial class G2C_Equip_Rename : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EQUIP_INTENSIFYINFO
    /// 请求 装备强化信息
    /// <summary>
    public partial class C2G_Equip_IntensifyInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(EquipID);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out EquipID);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(EquipID);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out EquipID);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EQUIP_INTENSIFYINFO
    /// 返回 装备强化信息
    /// <summary>
    public partial class G2C_Equip_IntensifyInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            IntensityInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            IntensityInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            IntensityInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            IntensityInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EQUIP_INTENSIFY
    /// 请求 装备强化
    /// <summary>
    public partial class C2G_Equip_Intensify : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(EquipID);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out EquipID);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(EquipID);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out EquipID);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EQUIP_INTENSIFY
    /// 返回 装备强化
    /// <summary>
    public partial class G2C_Equip_Intensify : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            IntensityInfo.Serialize(ref nbs);
            nbs.Write(IntensifyResult);
            nbs.Write(AwardItem.Count);
            foreach (var k in AwardItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            IntensityInfo.Unserialize(ref nbs);
            nbs.Read(out IntensifyResult);
            int var648 = nbs.ReadInt();
            for (int k = 0; k < var648; k++)
            {
                var var649 = new CLS_AwardItem(); var649.Unserialize(ref nbs);AwardItem.Add(var649);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            IntensityInfo.Serialize(ref nbs);
            nbs.Write(IntensifyResult);
            nbs.Write(AwardItem.Count);
            foreach (var k in AwardItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            IntensityInfo.Unserialize(ref nbs);
            nbs.Read(out IntensifyResult);
            int var652 = nbs.ReadInt();
            for (int k = 0; k < var652; k++)
            {
                var var653 = new CLS_AwardItem(); var653.Unserialize(ref nbs);AwardItem.Add(var653);
            }
        }
    };
    /// <summary>
    /// 装备强化信息
    /// <summary>
    public partial class CLS_EquipIntensifyInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(IntensityId);
            nbs.Write(Atk);
            nbs.Write(Def);
            nbs.Write(Hp);
            nbs.Write(Inte);
            nbs.Write(IntensityAtk);
            nbs.Write(IntensityDef);
            nbs.Write(IntensityInte);
            nbs.Write(IntensityHp);
            nbs.Write(Gold);
            nbs.Write(ListItemNeedInfo.Count);
            foreach (var k in ListItemNeedInfo)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out IntensityId);
            nbs.Read(out Atk);
            nbs.Read(out Def);
            nbs.Read(out Hp);
            nbs.Read(out Inte);
            nbs.Read(out IntensityAtk);
            nbs.Read(out IntensityDef);
            nbs.Read(out IntensityInte);
            nbs.Read(out IntensityHp);
            nbs.Read(out Gold);
            int var664 = nbs.ReadInt();
            for (int k = 0; k < var664; k++)
            {
                var var665 = new CLS_ItemNeedInfo(); var665.Unserialize(ref nbs);ListItemNeedInfo.Add(var665);
            }
        }
    };
    /// <summary>
    /// 技能信息
    /// <summary>
    public partial class CLS_SkillInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(SkillId);
            nbs.Write(Level);
            nbs.Write(Exp);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out SkillId);
            nbs.Read(out Level);
            nbs.Read(out Exp);
        }
    };
    /// <summary>
    /// 组合信息
    /// <summary>
    public partial class CLS_WarriorCollect
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(CollectId);
            nbs.Write(Valid);
            nbs.Write(DictHas.Count);
            foreach (var kvp in DictHas)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out CollectId);
            nbs.Read(out Valid);
            int var671 = nbs.ReadInt();
            for (int k = 0; k < var671; k++)
            {
                int var672 = nbs.ReadInt(); bool var673 = nbs.ReadBool(); DictHas.Add(var672, var673); 
            }
        }
    };
    /// <summary>
    /// 武将信息
    /// <summary>
    public partial class CLS_WarriorInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(ConfigId);
            nbs.Write(Level);
            nbs.Write(Exp);
            nbs.Write(MarkName);
            nbs.Write(Lock);
            nbs.Write(InRecruit);
            nbs.Write(InBattle);
            nbs.Write(Captive);
            nbs.Write(Employed);
            nbs.Write(InArmy);
            nbs.Write(InAffairs);
            nbs.Write(InGrab);
            nbs.Write(ListSkill.Count);
            foreach (var k in ListSkill)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(AdvanceLv);
            nbs.Write(BaseAtk);
            nbs.Write(BaseDef);
            nbs.Write(BaseHp);
            nbs.Write(BaseInte);
            nbs.Write(BaseBreak);
            nbs.Write(CombatProperty.Count);
            foreach (var kvp in CombatProperty)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(CurrentHp);
            nbs.Write(CombatPower);
            nbs.Write(DictEquiped.Count);
            foreach (var kvp in DictEquiped)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(Satr);
            nbs.Write(WakeLevel);
            nbs.Write(DictWake.Count);
            foreach (var kvp in DictWake)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(DictStremgthen.Count);
            foreach (var kvp in DictStremgthen)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(DictWarriorCollect.Count);
            foreach (var kvp in DictWarriorCollect)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out ConfigId);
            nbs.Read(out Level);
            nbs.Read(out Exp);
            nbs.Read(out MarkName);
            nbs.Read(out Lock);
            nbs.Read(out InRecruit);
            nbs.Read(out InBattle);
            nbs.Read(out Captive);
            nbs.Read(out Employed);
            nbs.Read(out InArmy);
            nbs.Read(out InAffairs);
            nbs.Read(out InGrab);
            int var687 = nbs.ReadInt();
            for (int k = 0; k < var687; k++)
            {
                var var688 = new CLS_SkillInfo(); var688.Unserialize(ref nbs);ListSkill.Add(var688);
            }
            nbs.Read(out AdvanceLv);
            nbs.Read(out BaseAtk);
            nbs.Read(out BaseDef);
            nbs.Read(out BaseHp);
            nbs.Read(out BaseInte);
            nbs.Read(out BaseBreak);
            int var695 = nbs.ReadInt();
            for (int k = 0; k < var695; k++)
            {
                int var696 = nbs.ReadInt(); float var697 = nbs.ReadFloat(); CombatProperty.Add(var696, var697); 
            }
            nbs.Read(out CurrentHp);
            nbs.Read(out CombatPower);
            int var700 = nbs.ReadInt();
            for (int k = 0; k < var700; k++)
            {
                int var701 = nbs.ReadInt(); var var702 = new CLS_EquipInfo(); var702.Unserialize(ref nbs); DictEquiped.Add(var701, var702); 
            }
            nbs.Read(out Satr);
            nbs.Read(out WakeLevel);
            int var705 = nbs.ReadInt();
            for (int k = 0; k < var705; k++)
            {
                int var706 = nbs.ReadInt(); int var707 = nbs.ReadInt(); DictWake.Add(var706, var707); 
            }
            int var708 = nbs.ReadInt();
            for (int k = 0; k < var708; k++)
            {
                int var709 = nbs.ReadInt(); float var710 = nbs.ReadFloat(); DictStremgthen.Add(var709, var710); 
            }
            int var711 = nbs.ReadInt();
            for (int k = 0; k < var711; k++)
            {
                int var712 = nbs.ReadInt(); var var713 = new CLS_WarriorCollect(); var713.Unserialize(ref nbs); DictWarriorCollect.Add(var712, var713); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_WARRIORLIST
    /// 请求 武将列表
    /// <summary>
    public partial class C2G_Warrior_WarriorList : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_WARRIORLIST
    /// 返回 武将列表
    /// <summary>
    public partial class G2C_Warrior_WarriorList : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListWarrior.Count);
            foreach (var k in ListWarrior)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListInBattle.Count);
            foreach (var k in ListInBattle)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var714 = nbs.ReadInt();
            for (int k = 0; k < var714; k++)
            {
                var var715 = new CLS_WarriorInfo(); var715.Unserialize(ref nbs);ListWarrior.Add(var715);
            }
            int var716 = nbs.ReadInt();
            for (int k = 0; k < var716; k++)
            {
                long var717 = nbs.ReadLong();ListInBattle.Add(var717);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListWarrior.Count);
            foreach (var k in ListWarrior)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListInBattle.Count);
            foreach (var k in ListInBattle)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var718 = nbs.ReadInt();
            for (int k = 0; k < var718; k++)
            {
                var var719 = new CLS_WarriorInfo(); var719.Unserialize(ref nbs);ListWarrior.Add(var719);
            }
            int var720 = nbs.ReadInt();
            for (int k = 0; k < var720; k++)
            {
                long var721 = nbs.ReadLong();ListInBattle.Add(var721);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_LOCK
    /// 请求 武将锁定/解锁
    /// <summary>
    public partial class C2G_Warrior_Lock : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_LOCK
    /// 返回 武将锁定/解锁
    /// <summary>
    public partial class G2C_Warrior_Lock : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_ADVANCE
    /// 请求 武将进阶
    /// <summary>
    public partial class C2G_Warrior_Advance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(MateriaWarriorID.Count);
            foreach (var k in MateriaWarriorID)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var727 = nbs.ReadInt();
            for (int k = 0; k < var727; k++)
            {
                long var728 = nbs.ReadLong();MateriaWarriorID.Add(var728);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(MateriaWarriorID.Count);
            foreach (var k in MateriaWarriorID)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var730 = nbs.ReadInt();
            for (int k = 0; k < var730; k++)
            {
                long var731 = nbs.ReadLong();MateriaWarriorID.Add(var731);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_ADVANCE
    /// 返回 武将进阶
    /// <summary>
    public partial class G2C_Warrior_Advance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            WarriorInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            WarriorInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            WarriorInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            WarriorInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_RENAME
    /// 请求 武将修改昵称
    /// <summary>
    public partial class C2G_Warrior_Rename : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(MarkName);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out MarkName);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(MarkName);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out MarkName);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_RENAME
    /// 返回 武将修改昵称
    /// <summary>
    public partial class G2C_Warrior_Rename : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_UPLEVEL
    /// 请求 武将升级
    /// <summary>
    public partial class C2G_Warrior_UpLevel : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(ListWarrior.Count);
            foreach (var k in ListWarrior)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var739 = nbs.ReadInt();
            for (int k = 0; k < var739; k++)
            {
                long var740 = nbs.ReadLong();ListWarrior.Add(var740);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(ListWarrior.Count);
            foreach (var k in ListWarrior)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var742 = nbs.ReadInt();
            for (int k = 0; k < var742; k++)
            {
                long var743 = nbs.ReadLong();ListWarrior.Add(var743);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_UPLEVEL
    /// 返回 武将升级
    /// <summary>
    public partial class G2C_Warrior_UpLevel : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Level);
            nbs.Write(Exp);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Level);
            nbs.Read(out Exp);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Level);
            nbs.Write(Exp);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Level);
            nbs.Read(out Exp);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_NOTIFYLEVELUP
    /// 通知 武将升级
    /// <summary>
    public partial class G2C_Warrior_NotifyLevelUp : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_IMPROVEINFO
    /// 请求 武将培养信息
    /// <summary>
    public partial class C2G_Warrior_ImproveInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_IMPROVEINFO
    /// 返回 武将培养信息
    /// <summary>
    public partial class G2C_Warrior_ImproveInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var750 = nbs.ReadInt();
            for (int k = 0; k < var750; k++)
            {
                var var751 = new CLS_ItemInfo(); var751.Unserialize(ref nbs);ListItem.Add(var751);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var752 = nbs.ReadInt();
            for (int k = 0; k < var752; k++)
            {
                var var753 = new CLS_ItemInfo(); var753.Unserialize(ref nbs);ListItem.Add(var753);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_IMPROVE
    /// 请求 武将培养
    /// <summary>
    public partial class C2G_Warrior_Improve : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            ItemInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            ItemInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            ItemInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            ItemInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_IMPROVE
    /// 返回 武将培养
    /// <summary>
    public partial class G2C_Warrior_Improve : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_STAR
    /// 请求 武将升星
    /// <summary>
    public partial class C2G_Warrior_Star : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(MateriaWarriorID.Count);
            foreach (var k in MateriaWarriorID)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var759 = nbs.ReadInt();
            for (int k = 0; k < var759; k++)
            {
                long var760 = nbs.ReadLong();MateriaWarriorID.Add(var760);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(MateriaWarriorID.Count);
            foreach (var k in MateriaWarriorID)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var762 = nbs.ReadInt();
            for (int k = 0; k < var762; k++)
            {
                long var763 = nbs.ReadLong();MateriaWarriorID.Add(var763);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_STAR
    /// 返回 武将升星
    /// <summary>
    public partial class G2C_Warrior_Star : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_SKILL
    /// 请求 武将技能
    /// <summary>
    public partial class C2G_Warrior_Skill : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Skill);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Skill);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Skill);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Skill);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_SKILL
    /// 返回 武将技能
    /// <summary>
    public partial class G2C_Warrior_Skill : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_WAKEUNLOCK
    /// 请求 武将觉醒条件激活
    /// <summary>
    public partial class C2G_Warrior_WakeUnlock : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Type);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Type);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Type);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Type);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_WAKEUNLOCK
    /// 返回 武将觉醒条件激活
    /// <summary>
    public partial class G2C_Warrior_WakeUnlock : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_WAKEINFO
    /// 请求 武将觉醒材料信息
    /// <summary>
    public partial class C2G_Warrior_WakeInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Type);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Type);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Type);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Type);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_WAKEINFO
    /// 返回 武将觉醒材料信息
    /// <summary>
    public partial class G2C_Warrior_WakeInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItemNeedInfo.Count);
            foreach (var k in ListItemNeedInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(maxStoryId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var776 = nbs.ReadInt();
            for (int k = 0; k < var776; k++)
            {
                var var777 = new CLS_ItemNeedInfo(); var777.Unserialize(ref nbs);ListItemNeedInfo.Add(var777);
            }
            nbs.Read(out maxStoryId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItemNeedInfo.Count);
            foreach (var k in ListItemNeedInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(maxStoryId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var779 = nbs.ReadInt();
            for (int k = 0; k < var779; k++)
            {
                var var780 = new CLS_ItemNeedInfo(); var780.Unserialize(ref nbs);ListItemNeedInfo.Add(var780);
            }
            nbs.Read(out maxStoryId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_WAKEUP
    /// 请求 武将觉醒
    /// <summary>
    public partial class C2G_Warrior_WakeUp : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_WAKEUP
    /// 返回 武将觉醒
    /// <summary>
    public partial class G2C_Warrior_WakeUp : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_SELL
    /// 请求 武将出售
    /// <summary>
    public partial class C2G_Warrior_Sell : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListIds.Count);
            foreach (var k in ListIds)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var784 = nbs.ReadInt();
            for (int k = 0; k < var784; k++)
            {
                long var785 = nbs.ReadLong();ListIds.Add(var785);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListIds.Count);
            foreach (var k in ListIds)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var786 = nbs.ReadInt();
            for (int k = 0; k < var786; k++)
            {
                long var787 = nbs.ReadLong();ListIds.Add(var787);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_SELL
    /// 返回 武将出售
    /// <summary>
    public partial class G2C_Warrior_Sell : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Money);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Money);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Money);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Money);
        }
    };
    /// <summary>
    /// 封地建筑信息
    /// <summary>
    public partial class CLS_BuildingPlayerInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(BuildingType);
            nbs.Write(Level);
            nbs.Write(Capacity);
            nbs.Write(Stock);
            nbs.Write(StoreCapacity);
            nbs.Write(StoreStock);
            nbs.Write(CapacityNextLevelAdd);
            nbs.Write(IsInBuilding);
            nbs.Write(BuildEndMs);
            nbs.Write(YieldPerHour);
            nbs.Write(YieldPerHourNextLevelAdd);
            nbs.Write(CostTime);
            nbs.Write(CostGold);
            nbs.Write(CostFood);
            nbs.Write(CostWood);
            nbs.Write(CostIron);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out BuildingType);
            nbs.Read(out Level);
            nbs.Read(out Capacity);
            nbs.Read(out Stock);
            nbs.Read(out StoreCapacity);
            nbs.Read(out StoreStock);
            nbs.Read(out CapacityNextLevelAdd);
            nbs.Read(out IsInBuilding);
            nbs.Read(out BuildEndMs);
            nbs.Read(out YieldPerHour);
            nbs.Read(out YieldPerHourNextLevelAdd);
            nbs.Read(out CostTime);
            nbs.Read(out CostGold);
            nbs.Read(out CostFood);
            nbs.Read(out CostWood);
            nbs.Read(out CostIron);
        }
    };
    /// <summary>
    /// 封地建筑简易信息 用来推送
    /// <summary>
    public partial class CLS_BuildingPlayerInfoSimple
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(Stock);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out Stock);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BUILDINGPLAYER_LIST
    /// 请求 封地建筑列表
    /// <summary>
    public partial class C2G_BuildingPlayer_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BUILDINGPLAYER_LIST
    /// 返回 封地建筑列表
    /// <summary>
    public partial class G2C_BuildingPlayer_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictBuilding.Count);
            foreach (var kvp in DictBuilding)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var809 = nbs.ReadInt();
            for (int k = 0; k < var809; k++)
            {
                int var810 = nbs.ReadInt(); var var811 = new CLS_BuildingPlayerInfo(); var811.Unserialize(ref nbs); DictBuilding.Add(var810, var811); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictBuilding.Count);
            foreach (var kvp in DictBuilding)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var812 = nbs.ReadInt();
            for (int k = 0; k < var812; k++)
            {
                int var813 = nbs.ReadInt(); var var814 = new CLS_BuildingPlayerInfo(); var814.Unserialize(ref nbs); DictBuilding.Add(var813, var814); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BUILDINGPLAYER_PUSHINFOSIMPLE
    /// 推送 封地建筑简易信息
    /// <summary>
    public partial class G2C_BuildingPlayer_PushInfoSimple : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictBuilding.Count);
            foreach (var kvp in DictBuilding)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var815 = nbs.ReadInt();
            for (int k = 0; k < var815; k++)
            {
                int var816 = nbs.ReadInt(); var var817 = new CLS_BuildingPlayerInfoSimple(); var817.Unserialize(ref nbs); DictBuilding.Add(var816, var817); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictBuilding.Count);
            foreach (var kvp in DictBuilding)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var818 = nbs.ReadInt();
            for (int k = 0; k < var818; k++)
            {
                int var819 = nbs.ReadInt(); var var820 = new CLS_BuildingPlayerInfoSimple(); var820.Unserialize(ref nbs); DictBuilding.Add(var819, var820); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BUILDINGPLAYER_HARVEST
    /// 请求 封地建筑收获
    /// <summary>
    public partial class C2G_BuildingPlayer_Harvest : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BUILDINGPLAYER_HARVEST
    /// 返回 封地建筑收获
    /// <summary>
    public partial class G2C_BuildingPlayer_Harvest : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CountHarvest);
            Building.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CountHarvest);
            Building.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CountHarvest);
            Building.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CountHarvest);
            Building.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BUILDINGPLAYER_HARVESTALL
    /// 请求 封地建筑一键收获
    /// <summary>
    public partial class C2G_BuildingPlayer_HarvestAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BUILDINGPLAYER_HARVESTALL
    /// 返回 封地建筑一键收获
    /// <summary>
    public partial class G2C_BuildingPlayer_HarvestAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictBuilding.Count);
            foreach (var kvp in DictBuilding)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var827 = nbs.ReadInt();
            for (int k = 0; k < var827; k++)
            {
                int var828 = nbs.ReadInt(); var var829 = new CLS_BuildingPlayerInfo(); var829.Unserialize(ref nbs); DictBuilding.Add(var828, var829); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictBuilding.Count);
            foreach (var kvp in DictBuilding)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var830 = nbs.ReadInt();
            for (int k = 0; k < var830; k++)
            {
                int var831 = nbs.ReadInt(); var var832 = new CLS_BuildingPlayerInfo(); var832.Unserialize(ref nbs); DictBuilding.Add(var831, var832); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BUILDINGPLAYER_BUILD
    /// 请求 封地建筑建造/升级
    /// <summary>
    public partial class C2G_BuildingPlayer_Build : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BUILDINGPLAYER_BUILD
    /// 返回 封地建筑建造/升级
    /// <summary>
    public partial class G2C_BuildingPlayer_Build : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Building.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Building.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Building.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Building.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BUILDINGPLAYER_NOTIFYBUILT
    /// 通知建筑完成
    /// <summary>
    public partial class G2C_BuildingPlayer_NotifyBuilt : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Building.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Building.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Building.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Building.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 匠工坊单条信息 用来推送
    /// <summary>
    public partial class CLS_SmithSimple
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(ListItemNeedInfo.Count);
            foreach (var k in ListItemNeedInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(Lock);
            nbs.Write(num);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            int var840 = nbs.ReadInt();
            for (int k = 0; k < var840; k++)
            {
                var var841 = new CLS_ItemNeedInfo(); var841.Unserialize(ref nbs);ListItemNeedInfo.Add(var841);
            }
            nbs.Read(out Lock);
            nbs.Read(out num);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SMITH_START
    /// 请求 匠工坊列表
    /// <summary>
    public partial class C2G_Smith_Start : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SMITH_START
    /// 返回 匠工坊列表
    /// <summary>
    public partial class G2C_Smith_Start : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DicSmithInfo.Count);
            foreach (var kvp in DicSmithInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var844 = nbs.ReadInt();
            for (int k = 0; k < var844; k++)
            {
                int var845 = nbs.ReadInt(); var var846 = new CLS_SmithSimple(); var846.Unserialize(ref nbs); DicSmithInfo.Add(var845, var846); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DicSmithInfo.Count);
            foreach (var kvp in DicSmithInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var847 = nbs.ReadInt();
            for (int k = 0; k < var847; k++)
            {
                int var848 = nbs.ReadInt(); var var849 = new CLS_SmithSimple(); var849.Unserialize(ref nbs); DicSmithInfo.Add(var848, var849); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SMITH_DO
    /// 请求 匠工坊制作
    /// <summary>
    public partial class C2G_Smith_Do : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ID);
            nbs.Write(Count);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out ID);
            nbs.Read(out Count);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ID);
            nbs.Write(Count);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out ID);
            nbs.Read(out Count);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SMITH_DO
    /// 返回 匠工坊制作 产出
    /// <summary>
    public partial class G2C_Smith_Do : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Items.Count);
            foreach (var k in Items)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(EquipInfo.Count);
            foreach (var k in EquipInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var854 = nbs.ReadInt();
            for (int k = 0; k < var854; k++)
            {
                var var855 = new CLS_AwardItem(); var855.Unserialize(ref nbs);Items.Add(var855);
            }
            int var856 = nbs.ReadInt();
            for (int k = 0; k < var856; k++)
            {
                var var857 = new CLS_EquipInfo(); var857.Unserialize(ref nbs);EquipInfo.Add(var857);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Items.Count);
            foreach (var k in Items)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(EquipInfo.Count);
            foreach (var k in EquipInfo)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var858 = nbs.ReadInt();
            for (int k = 0; k < var858; k++)
            {
                var var859 = new CLS_AwardItem(); var859.Unserialize(ref nbs);Items.Add(var859);
            }
            int var860 = nbs.ReadInt();
            for (int k = 0; k < var860; k++)
            {
                var var861 = new CLS_EquipInfo(); var861.Unserialize(ref nbs);EquipInfo.Add(var861);
            }
        }
    };
    /// <summary>
    /// 兵法信息
    /// <summary>
    public partial class CLS_ScienceInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(ScienceType);
            nbs.Write(Level);
            nbs.Write(ConfigID);
            nbs.Write(IsInLearning);
            nbs.Write(LearnEndMs);
            nbs.Write(CompleteNeed);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out ScienceType);
            nbs.Read(out Level);
            nbs.Read(out ConfigID);
            nbs.Read(out IsInLearning);
            nbs.Read(out LearnEndMs);
            nbs.Read(out CompleteNeed);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SCIENCE_LIST
    /// 请求 兵法列表
    /// <summary>
    public partial class C2G_Science_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SCIENCE_LIST
    /// 返回 兵法列表
    /// <summary>
    public partial class G2C_Science_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictScience.Count);
            foreach (var kvp in DictScience)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var868 = nbs.ReadInt();
            for (int k = 0; k < var868; k++)
            {
                int var869 = nbs.ReadInt(); var var870 = new CLS_ScienceInfo(); var870.Unserialize(ref nbs); DictScience.Add(var869, var870); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictScience.Count);
            foreach (var kvp in DictScience)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var871 = nbs.ReadInt();
            for (int k = 0; k < var871; k++)
            {
                int var872 = nbs.ReadInt(); var var873 = new CLS_ScienceInfo(); var873.Unserialize(ref nbs); DictScience.Add(var872, var873); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SCIENCE_LEARN
    /// 请求 兵法研究
    /// <summary>
    public partial class C2G_Science_Learn : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SCIENCE_LEARN
    /// 返回 兵法研究
    /// <summary>
    public partial class G2C_Science_Learn : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SCIENCE_INFO
    /// 请求 兵法信息
    /// <summary>
    public partial class C2G_Science_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SCIENCE_INFO
    /// 返回 兵法信息
    /// <summary>
    public partial class G2C_Science_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SCIENCE_CANCEL
    /// 请求 兵法取消研究
    /// <summary>
    public partial class C2G_Science_Cancel : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SCIENCE_CANCEL
    /// 返回 兵法取消研究
    /// <summary>
    public partial class G2C_Science_Cancel : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SCIENCE_NOTIFY
    /// 通知兵法完成
    /// <summary>
    public partial class G2C_Science_Notify : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ScienceInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ScienceInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ScienceInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ScienceInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 兵营募兵信息
    /// <summary>
    public partial class CLS_RecruitInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(ERecruitStatus);
            nbs.Write(DtRecruitStart);
            nbs.Write(DtRecruitEnd);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out ERecruitStatus);
            nbs.Read(out DtRecruitStart);
            nbs.Read(out DtRecruitEnd);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_RECRUIT_INFO
    /// 请求 兵营募兵信息
    /// <summary>
    public partial class C2G_Recruit_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_RECRUIT_INFO
    /// 返回 兵营募兵信息
    /// <summary>
    public partial class G2C_Recruit_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            RecruitInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            RecruitInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            RecruitInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            RecruitInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_RECRUIT_START
    /// 请求 兵营募兵
    /// <summary>
    public partial class C2G_Recruit_Start : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Count);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Count);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Count);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Count);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_RECRUIT_START
    /// 返回 兵营募兵
    /// <summary>
    public partial class G2C_Recruit_Start : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Count);
            RecruitInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Count);
            RecruitInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Count);
            RecruitInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Count);
            RecruitInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_RECRUIT_NOTIFYCOMPLETE
    /// 通知募兵完成
    /// <summary>
    public partial class G2C_Recruit_NotifyComplete : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Building.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Building.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Building.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Building.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_PLAYER_SPEEDUPINFO
    /// 请求 通用加速信息
    /// <summary>
    public partial class C2G_Player_SpeedupInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Type);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Type);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Type);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Type);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_PLAYER_SPEEDUPINFO
    /// 返回 通用加速信息
    /// <summary>
    public partial class G2C_Player_SpeedupInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(EndMs);
            nbs.Write(CompleteNeed);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out EndMs);
            nbs.Read(out CompleteNeed);
            int var916 = nbs.ReadInt();
            for (int k = 0; k < var916; k++)
            {
                var var917 = new CLS_ItemInfo(); var917.Unserialize(ref nbs);ListItem.Add(var917);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(EndMs);
            nbs.Write(CompleteNeed);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out EndMs);
            nbs.Read(out CompleteNeed);
            int var920 = nbs.ReadInt();
            for (int k = 0; k < var920; k++)
            {
                var var921 = new CLS_ItemInfo(); var921.Unserialize(ref nbs);ListItem.Add(var921);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BUILDINGPLAYER_SPEEDUPCOMPLETE
    /// 请求 封地建筑建造加速立即完成
    /// <summary>
    public partial class C2G_BuildingPlayer_SpeedupComplete : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BUILDINGPLAYER_SPEEDUPCOMPLETE
    /// 返回 封地建筑建造加速立即完成
    /// <summary>
    public partial class G2C_BuildingPlayer_SpeedupComplete : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Building.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Building.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Building.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Building.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_RECRUIT_SPEEDUP
    /// 请求 兵营募兵加速
    /// <summary>
    public partial class C2G_Recruit_Speedup : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Type);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Type);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Type);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Type);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_RECRUIT_SPEEDUP
    /// 返回 兵营募兵加速
    /// <summary>
    public partial class G2C_Recruit_Speedup : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            RecruitInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            RecruitInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            RecruitInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            RecruitInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SCIENCE_FAST
    /// 请求 兵法立即研究或加速信息
    /// <summary>
    public partial class C2G_Science_Fast : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SCIENCE_FAST
    /// 返回 兵法立即研究或加速信息
    /// <summary>
    public partial class G2C_Science_Fast : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_PLAYER_SPEEDUPBUY
    /// 请求 加速道具购买
    /// <summary>
    public partial class C2G_Player_SpeedupBuy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Amount);
            nbs.Write(Type);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Amount);
            nbs.Read(out Type);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Amount);
            nbs.Write(Type);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Amount);
            nbs.Read(out Type);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_PLAYER_SPEEDUPBUY
    /// 返回 加速道具购买
    /// <summary>
    public partial class G2C_Player_SpeedupBuy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var944 = nbs.ReadInt();
            for (int k = 0; k < var944; k++)
            {
                var var945 = new CLS_ItemInfo(); var945.Unserialize(ref nbs);ListItem.Add(var945);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var946 = nbs.ReadInt();
            for (int k = 0; k < var946; k++)
            {
                var var947 = new CLS_ItemInfo(); var947.Unserialize(ref nbs);ListItem.Add(var947);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_PLAYER_SPEEDUP
    /// 请求 加速使用道具
    /// <summary>
    public partial class C2G_Player_Speedup : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Items.Count);
            foreach (var k in Items)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(Type);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var949 = nbs.ReadInt();
            for (int k = 0; k < var949; k++)
            {
                var var950 = new CLS_ItemInfo(); var950.Unserialize(ref nbs);Items.Add(var950);
            }
            nbs.Read(out Type);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Items.Count);
            foreach (var k in Items)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(Type);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var953 = nbs.ReadInt();
            for (int k = 0; k < var953; k++)
            {
                var var954 = new CLS_ItemInfo(); var954.Unserialize(ref nbs);Items.Add(var954);
            }
            nbs.Read(out Type);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_PLAYER_SPEEDUP
    /// 返回 加速使用道具
    /// <summary>
    public partial class G2C_Player_Speedup : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Type);
            Building.Serialize(ref nbs);
            RecruitInfo.Serialize(ref nbs);
            ScienceInfo.Serialize(ref nbs);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(EndMs);
            nbs.Write(CompleteNeed);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Type);
            Building.Unserialize(ref nbs);
            RecruitInfo.Unserialize(ref nbs);
            ScienceInfo.Unserialize(ref nbs);
            int var960 = nbs.ReadInt();
            for (int k = 0; k < var960; k++)
            {
                var var961 = new CLS_ItemInfo(); var961.Unserialize(ref nbs);ListItem.Add(var961);
            }
            nbs.Read(out EndMs);
            nbs.Read(out CompleteNeed);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Type);
            Building.Serialize(ref nbs);
            RecruitInfo.Serialize(ref nbs);
            ScienceInfo.Serialize(ref nbs);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(EndMs);
            nbs.Write(CompleteNeed);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Type);
            Building.Unserialize(ref nbs);
            RecruitInfo.Unserialize(ref nbs);
            ScienceInfo.Unserialize(ref nbs);
            int var968 = nbs.ReadInt();
            for (int k = 0; k < var968; k++)
            {
                var var969 = new CLS_ItemInfo(); var969.Unserialize(ref nbs);ListItem.Add(var969);
            }
            nbs.Read(out EndMs);
            nbs.Read(out CompleteNeed);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_HELP_FAST
    /// 请求 小助手
    /// <summary>
    public partial class C2G_Help_Fast : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_HELP_FAST
    /// 返回 小助手
    /// <summary>
    public partial class G2C_Help_Fast : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Building1.Serialize(ref nbs);
            Building2.Serialize(ref nbs);
            ScienceInfo.Serialize(ref nbs);
            RecruitInfoBu.Serialize(ref nbs);
            RecruitInfoQi.Serialize(ref nbs);
            RecruitInfoGong.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Building1.Unserialize(ref nbs);
            Building2.Unserialize(ref nbs);
            ScienceInfo.Unserialize(ref nbs);
            RecruitInfoBu.Unserialize(ref nbs);
            RecruitInfoQi.Unserialize(ref nbs);
            RecruitInfoGong.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Building1.Serialize(ref nbs);
            Building2.Serialize(ref nbs);
            ScienceInfo.Serialize(ref nbs);
            RecruitInfoBu.Serialize(ref nbs);
            RecruitInfoQi.Serialize(ref nbs);
            RecruitInfoGong.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Building1.Unserialize(ref nbs);
            Building2.Unserialize(ref nbs);
            ScienceInfo.Unserialize(ref nbs);
            RecruitInfoBu.Unserialize(ref nbs);
            RecruitInfoQi.Unserialize(ref nbs);
            RecruitInfoGong.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 城池信息
    /// <summary>
    public partial class CLS_CityInfoBase
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(LeaderPuid);
            nbs.Write(LeaderName);
            nbs.Write(Prosperity);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out LeaderPuid);
            nbs.Read(out LeaderName);
            nbs.Read(out Prosperity);
        }
    };
    /// <summary>
    /// 势力城池信息
    /// <summary>
    public partial class CLS_CityInfo4Guild
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(LeaderPuid);
            nbs.Write(LeaderName);
            nbs.Write(Prosperity);
            nbs.Write(Revenue);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out LeaderPuid);
            nbs.Read(out LeaderName);
            nbs.Read(out Prosperity);
            nbs.Read(out Revenue);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_CITY_CITYINFO
    /// 请求 城池信息
    /// <summary>
    public partial class C2G_City_CityInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CITY_CITYINFO
    /// 返回 城池信息
    /// <summary>
    public partial class G2C_City_CityInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            CityInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            CityInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            CityInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            CityInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_CITY_LISTCITY
    /// 请求 城池列表
    /// <summary>
    public partial class C2G_City_ListCity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CITY_LISTCITY
    /// 返回 城池列表
    /// <summary>
    public partial class G2C_City_ListCity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CapitalCity);
            nbs.Write(DictCity.Count);
            foreach (var kvp in DictCity)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CapitalCity);
            int var998 = nbs.ReadInt();
            for (int k = 0; k < var998; k++)
            {
                int var999 = nbs.ReadInt(); var var1000 = new CLS_CityInfoBase(); var1000.Unserialize(ref nbs); DictCity.Add(var999, var1000); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CapitalCity);
            nbs.Write(DictCity.Count);
            foreach (var kvp in DictCity)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CapitalCity);
            int var1002 = nbs.ReadInt();
            for (int k = 0; k < var1002; k++)
            {
                int var1003 = nbs.ReadInt(); var var1004 = new CLS_CityInfoBase(); var1004.Unserialize(ref nbs); DictCity.Add(var1003, var1004); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_CITY_DEPOTINFO
    /// 请求 府库
    /// <summary>
    public partial class C2G_City_DepotInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CITY_DEPOTINFO
    /// 返回 府库
    /// <summary>
    public partial class G2C_City_DepotInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Prosperity);
            nbs.Write(RevenueDay);
            nbs.Write(RevenueAll);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Prosperity);
            nbs.Read(out RevenueDay);
            nbs.Read(out RevenueAll);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Prosperity);
            nbs.Write(RevenueDay);
            nbs.Write(RevenueAll);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Prosperity);
            nbs.Read(out RevenueDay);
            nbs.Read(out RevenueAll);
        }
    };
    /// <summary>
    /// 建筑道具需求
    /// <summary>
    public partial class CLS_BuildingItemNeedInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(ItemId);
            nbs.Write(Built);
            nbs.Write(Need);
            nbs.Write(Value);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out ItemId);
            nbs.Read(out Built);
            nbs.Read(out Need);
            nbs.Read(out Value);
        }
    };
    /// <summary>
    /// 城池建筑信息
    /// <summary>
    public partial class CLS_CityBuildingInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Pos);
            nbs.Write(BuildingType);
            nbs.Write(Level);
            nbs.Write(DictNeedInfo.Count);
            foreach (var kvp in DictNeedInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Pos);
            nbs.Read(out BuildingType);
            nbs.Read(out Level);
            int var1020 = nbs.ReadInt();
            for (int k = 0; k < var1020; k++)
            {
                int var1021 = nbs.ReadInt(); var var1022 = new CLS_BuildingItemNeedInfo(); var1022.Unserialize(ref nbs); DictNeedInfo.Add(var1021, var1022); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_CITYBUILDING_LIST
    /// 请求 建筑列表
    /// <summary>
    public partial class C2G_CityBuilding_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CITYBUILDING_LIST
    /// 返回 建筑列表
    /// <summary>
    public partial class G2C_CityBuilding_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictBuilding.Count);
            foreach (var kvp in DictBuilding)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1025 = nbs.ReadInt();
            for (int k = 0; k < var1025; k++)
            {
                int var1026 = nbs.ReadInt(); var var1027 = new CLS_CityBuildingInfo(); var1027.Unserialize(ref nbs); DictBuilding.Add(var1026, var1027); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictBuilding.Count);
            foreach (var kvp in DictBuilding)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1028 = nbs.ReadInt();
            for (int k = 0; k < var1028; k++)
            {
                int var1029 = nbs.ReadInt(); var var1030 = new CLS_CityBuildingInfo(); var1030.Unserialize(ref nbs); DictBuilding.Add(var1029, var1030); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_CITYBUILDING_BUILD
    /// 请求 建筑升级
    /// <summary>
    public partial class C2G_CityBuilding_Build : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(Pos);
            nbs.Write(DictBuildUse.Count);
            foreach (var kvp in DictBuildUse)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out Pos);
            int var1033 = nbs.ReadInt();
            for (int k = 0; k < var1033; k++)
            {
                int var1034 = nbs.ReadInt(); int var1035 = nbs.ReadInt(); DictBuildUse.Add(var1034, var1035); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(Pos);
            nbs.Write(DictBuildUse.Count);
            foreach (var kvp in DictBuildUse)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out Pos);
            int var1038 = nbs.ReadInt();
            for (int k = 0; k < var1038; k++)
            {
                int var1039 = nbs.ReadInt(); int var1040 = nbs.ReadInt(); DictBuildUse.Add(var1039, var1040); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CITYBUILDING_BUILD
    /// 返回 建筑升级
    /// <summary>
    public partial class G2C_CityBuilding_Build : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BuildingInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BuildingInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BuildingInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BuildingInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 守备营城墙信息
    /// <summary>
    public partial class CLS_CampWallInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            WallHp.Serialize(ref nbs);
            nbs.Write(TsCooldownRepair);
            nbs.Write(Bowls);
            nbs.Write(Frise);
            nbs.Write(Trap);
            nbs.Write(DictNeedInfo.Count);
            foreach (var kvp in DictNeedInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            WallHp.Unserialize(ref nbs);
            nbs.Read(out TsCooldownRepair);
            nbs.Read(out Bowls);
            nbs.Read(out Frise);
            nbs.Read(out Trap);
            int var1049 = nbs.ReadInt();
            for (int k = 0; k < var1049; k++)
            {
                int var1050 = nbs.ReadInt(); var var1051 = new CLS_ItemNeedInfo(); var1051.Unserialize(ref nbs); DictNeedInfo.Add(var1050, var1051); 
            }
        }
    };
    /// <summary>
    /// 城墙信息
    /// <summary>
    public partial class CLS_WallInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(Level);
            nbs.Write(DictCampWall.Count);
            foreach (var kvp in DictCampWall)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out Level);
            int var1054 = nbs.ReadInt();
            for (int k = 0; k < var1054; k++)
            {
                int var1055 = nbs.ReadInt(); var var1056 = new CLS_CampWallInfo(); var1056.Unserialize(ref nbs); DictCampWall.Add(var1055, var1056); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WALL_INFO
    /// 请求 城墙信息
    /// <summary>
    public partial class C2G_Wall_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WALL_INFO
    /// 返回 城墙信息
    /// <summary>
    public partial class G2C_Wall_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            WallInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            WallInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            WallInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            WallInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WALL_REPAIR
    /// 请求 城墙修复
    /// <summary>
    public partial class C2G_Wall_Repair : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WALL_REPAIR
    /// 返回 城墙修复
    /// <summary>
    public partial class G2C_Wall_Repair : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            WallInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            WallInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            WallInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            WallInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WALL_MAKEWORK
    /// 请求 城墙建造器械
    /// <summary>
    public partial class C2G_Wall_MakeWork : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.Write(WallWorkType);
            nbs.Write(MakeCount);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            nbs.Read(out WallWorkType);
            nbs.Read(out MakeCount);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.Write(WallWorkType);
            nbs.Write(MakeCount);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            nbs.Read(out WallWorkType);
            nbs.Read(out MakeCount);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WALL_MAKEWORK
    /// 返回 城墙建造器械
    /// <summary>
    public partial class G2C_Wall_MakeWork : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.Write(WallWorkType);
            nbs.Write(MakeCount);
            WallInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            nbs.Read(out WallWorkType);
            nbs.Read(out MakeCount);
            WallInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.Write(WallWorkType);
            nbs.Write(MakeCount);
            WallInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            nbs.Read(out WallWorkType);
            nbs.Read(out MakeCount);
            WallInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 守军NPC信息
    /// <summary>
    public partial class CLS_CampNpcInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(StageId);
            nbs.Write(IsAlive);
            nbs.Write(TsRevive);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out StageId);
            nbs.Read(out IsAlive);
            nbs.Read(out TsRevive);
        }
    };
    /// <summary>
    /// 守备营信息
    /// <summary>
    public partial class CLS_CampInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(DictCampNpc.Count);
            foreach (var kvp in DictCampNpc)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            int var1096 = nbs.ReadInt();
            for (int k = 0; k < var1096; k++)
            {
                int var1097 = nbs.ReadInt(); var var1098 = new CLS_CampNpcInfo(); var1098.Unserialize(ref nbs); DictCampNpc.Add(var1097, var1098); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_CAMP_INFO
    /// 请求 守备营信息
    /// <summary>
    public partial class C2G_Camp_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CAMP_INFO
    /// 返回 守备营信息
    /// <summary>
    public partial class G2C_Camp_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(DictCamp.Count);
            foreach (var kvp in DictCamp)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            int var1102 = nbs.ReadInt();
            for (int k = 0; k < var1102; k++)
            {
                int var1103 = nbs.ReadInt(); var var1104 = new CLS_CampInfo(); var1104.Unserialize(ref nbs); DictCamp.Add(var1103, var1104); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(DictCamp.Count);
            foreach (var kvp in DictCamp)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            int var1106 = nbs.ReadInt();
            for (int k = 0; k < var1106; k++)
            {
                int var1107 = nbs.ReadInt(); var var1108 = new CLS_CampInfo(); var1108.Unserialize(ref nbs); DictCamp.Add(var1107, var1108); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_CITY_SHOPINFO
    /// 请求 城池珍宝阁信息
    /// <summary>
    public partial class C2G_City_ShopInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CITY_SHOPINFO
    /// 返回 城池珍宝阁信息
    /// <summary>
    public partial class G2C_City_ShopInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(GoodsInfo.Count);
            foreach (var k in GoodsInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(SpecialtyGoodsInfo.Count);
            foreach (var kvp in SpecialtyGoodsInfo)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(Contribution);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            int var1112 = nbs.ReadInt();
            for (int k = 0; k < var1112; k++)
            {
                var var1113 = new CLS_ShopGoodsInfo(); var1113.Unserialize(ref nbs);GoodsInfo.Add(var1113);
            }
            int var1114 = nbs.ReadInt();
            for (int k = 0; k < var1114; k++)
            {
                int var1115 = nbs.ReadInt(); int var1116 = nbs.ReadInt(); SpecialtyGoodsInfo.Add(var1115, var1116); 
            }
            nbs.Read(out Contribution);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(GoodsInfo.Count);
            foreach (var k in GoodsInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(SpecialtyGoodsInfo.Count);
            foreach (var kvp in SpecialtyGoodsInfo)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(Contribution);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            int var1119 = nbs.ReadInt();
            for (int k = 0; k < var1119; k++)
            {
                var var1120 = new CLS_ShopGoodsInfo(); var1120.Unserialize(ref nbs);GoodsInfo.Add(var1120);
            }
            int var1121 = nbs.ReadInt();
            for (int k = 0; k < var1121; k++)
            {
                int var1122 = nbs.ReadInt(); int var1123 = nbs.ReadInt(); SpecialtyGoodsInfo.Add(var1122, var1123); 
            }
            nbs.Read(out Contribution);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_CITY_SHOPBUY
    /// 请求 处理城池珍宝阁购买
    /// <summary>
    public partial class C2G_City_ShopBuy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(Config);
            nbs.Write(Amount);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out Config);
            nbs.Read(out Amount);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(Config);
            nbs.Write(Amount);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out Config);
            nbs.Read(out Amount);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CITY_SHOPBUY
    /// 返回 处理城池珍宝阁购买
    /// <summary>
    public partial class G2C_City_ShopBuy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(GoodsInfo.Count);
            foreach (var k in GoodsInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(Contribution);
            nbs.Write(CityUid);
            nbs.Write(SpecialtyGoodsInfo.Count);
            foreach (var kvp in SpecialtyGoodsInfo)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1131 = nbs.ReadInt();
            for (int k = 0; k < var1131; k++)
            {
                var var1132 = new CLS_ShopGoodsInfo(); var1132.Unserialize(ref nbs);GoodsInfo.Add(var1132);
            }
            nbs.Read(out Contribution);
            nbs.Read(out CityUid);
            int var1135 = nbs.ReadInt();
            for (int k = 0; k < var1135; k++)
            {
                int var1136 = nbs.ReadInt(); int var1137 = nbs.ReadInt(); SpecialtyGoodsInfo.Add(var1136, var1137); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(GoodsInfo.Count);
            foreach (var k in GoodsInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(Contribution);
            nbs.Write(CityUid);
            nbs.Write(SpecialtyGoodsInfo.Count);
            foreach (var kvp in SpecialtyGoodsInfo)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1138 = nbs.ReadInt();
            for (int k = 0; k < var1138; k++)
            {
                var var1139 = new CLS_ShopGoodsInfo(); var1139.Unserialize(ref nbs);GoodsInfo.Add(var1139);
            }
            nbs.Read(out Contribution);
            nbs.Read(out CityUid);
            int var1142 = nbs.ReadInt();
            for (int k = 0; k < var1142; k++)
            {
                int var1143 = nbs.ReadInt(); int var1144 = nbs.ReadInt(); SpecialtyGoodsInfo.Add(var1143, var1144); 
            }
        }
    };
    /// <summary>
    /// 商城页面信息
    /// <summary>
    public partial class CLS_ShopPageInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(DictGoods.Count);
            foreach (var kvp in DictGoods)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(Cooldown);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            int var1146 = nbs.ReadInt();
            for (int k = 0; k < var1146; k++)
            {
                int var1147 = nbs.ReadInt(); var var1148 = new CLS_ShopGoodsInfo(); var1148.Unserialize(ref nbs); DictGoods.Add(var1147, var1148); 
            }
            nbs.Read(out Cooldown);
        }
    };
    /// <summary>
    /// 商城货物信息
    /// <summary>
    public partial class CLS_ShopGoodsInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(Count);
            nbs.Write(AmoutCanBuy);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out Count);
            nbs.Read(out AmoutCanBuy);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SHOP_LIST
    /// 请求 商城列表
    /// <summary>
    public partial class C2G_Shop_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SHOP_LIST
    /// 返回 商城列表
    /// <summary>
    public partial class G2C_Shop_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictPage.Count);
            foreach (var kvp in DictPage)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(RefreshTotal);
            nbs.Write(RefreshCost);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1153 = nbs.ReadInt();
            for (int k = 0; k < var1153; k++)
            {
                int var1154 = nbs.ReadInt(); var var1155 = new CLS_ShopPageInfo(); var1155.Unserialize(ref nbs); DictPage.Add(var1154, var1155); 
            }
            nbs.Read(out RefreshTotal);
            nbs.Read(out RefreshCost);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictPage.Count);
            foreach (var kvp in DictPage)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(RefreshTotal);
            nbs.Write(RefreshCost);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1158 = nbs.ReadInt();
            for (int k = 0; k < var1158; k++)
            {
                int var1159 = nbs.ReadInt(); var var1160 = new CLS_ShopPageInfo(); var1160.Unserialize(ref nbs); DictPage.Add(var1159, var1160); 
            }
            nbs.Read(out RefreshTotal);
            nbs.Read(out RefreshCost);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SHOP_BUY
    /// 请求 商城购买
    /// <summary>
    public partial class C2G_Shop_Buy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Amount);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Amount);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Amount);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Amount);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SHOP_BUY
    /// 返回 商城购买
    /// <summary>
    public partial class G2C_Shop_Buy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictPage.Count);
            foreach (var kvp in DictPage)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1167 = nbs.ReadInt();
            for (int k = 0; k < var1167; k++)
            {
                int var1168 = nbs.ReadInt(); var var1169 = new CLS_ShopPageInfo(); var1169.Unserialize(ref nbs); DictPage.Add(var1168, var1169); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictPage.Count);
            foreach (var kvp in DictPage)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1170 = nbs.ReadInt();
            for (int k = 0; k < var1170; k++)
            {
                int var1171 = nbs.ReadInt(); var var1172 = new CLS_ShopPageInfo(); var1172.Unserialize(ref nbs); DictPage.Add(var1171, var1172); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SHOP_QUICKBUY
    /// 请求 商城快捷购买
    /// <summary>
    public partial class C2G_Shop_QuickBuy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Amount);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Amount);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Amount);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Amount);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SHOP_QUICKBUY
    /// 返回 商城快捷购买
    /// <summary>
    public partial class G2C_Shop_QuickBuy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_REFRESH_DIAMOND_STORE
    /// 请求 刷新钻石商城
    /// <summary>
    public partial class C2G_Refresh_Diamond_Store : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_REFRESH_DIAMOND_STORE
    /// 返回 刷新钻石商城
    /// <summary>
    public partial class G2C_Refresh_Diamond_Store : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(RefreshTotal);
            nbs.Write(RefreshCost);
            nbs.Write(DictPage.Count);
            foreach (var kvp in DictPage)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out RefreshTotal);
            nbs.Read(out RefreshCost);
            int var1181 = nbs.ReadInt();
            for (int k = 0; k < var1181; k++)
            {
                int var1182 = nbs.ReadInt(); var var1183 = new CLS_ShopPageInfo(); var1183.Unserialize(ref nbs); DictPage.Add(var1182, var1183); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(RefreshTotal);
            nbs.Write(RefreshCost);
            nbs.Write(DictPage.Count);
            foreach (var kvp in DictPage)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out RefreshTotal);
            nbs.Read(out RefreshCost);
            int var1186 = nbs.ReadInt();
            for (int k = 0; k < var1186; k++)
            {
                int var1187 = nbs.ReadInt(); var var1188 = new CLS_ShopPageInfo(); var1188.Unserialize(ref nbs); DictPage.Add(var1187, var1188); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SHOP_BUYWARRIORBAG
    /// 请求 商城购买武将背包上限
    /// <summary>
    public partial class C2G_Shop_BuyWarriorBag : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SHOP_BUYWARRIORBAG
    /// 返回 商城购买武将背包上限
    /// <summary>
    public partial class G2C_Shop_BuyWarriorBag : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BUY_GOLD
    /// 请求 金币兑换
    /// <summary>
    public partial class C2G_Buy_Gold : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(times);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out times);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(times);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out times);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BUY_GOLD
    /// 返回
    /// <summary>
    public partial class G2C_Buy_Gold : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(addGold);
            nbs.Write(useGem);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out addGold);
            nbs.Read(out useGem);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(addGold);
            nbs.Write(useGem);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out addGold);
            nbs.Read(out useGem);
        }
    };
    /// <summary>
    /// 单子信息
    /// <summary>
    public partial class CLS_DesignInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(DesignMode);
            nbs.Write(Puid);
            nbs.Write(Name);
            nbs.Write(Price);
            nbs.Write(Count);
            nbs.Write(DtExpire);
            nbs.Write(TsRemainder);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out DesignMode);
            nbs.Read(out Puid);
            nbs.Read(out Name);
            nbs.Read(out Price);
            nbs.Read(out Count);
            nbs.Read(out DtExpire);
            nbs.Read(out TsRemainder);
        }
    };
    /// <summary>
    /// 上次交易信息
    /// <summary>
    public partial class CLS_TransactionInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Price);
            nbs.Write(DtTransaction);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Price);
            nbs.Read(out DtTransaction);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EXCHANGE_LIST
    /// 请求 挂单列表
    /// <summary>
    public partial class C2G_Exchange_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignFlag);
            nbs.Write(DesignMode);
            nbs.Write(PageIndex);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignFlag);
            nbs.Read(out DesignMode);
            nbs.Read(out PageIndex);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignFlag);
            nbs.Write(DesignMode);
            nbs.Write(PageIndex);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignFlag);
            nbs.Read(out DesignMode);
            nbs.Read(out PageIndex);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EXCHANGE_LIST
    /// 返回 挂单列表
    /// <summary>
    public partial class G2C_Exchange_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignFlag);
            nbs.Write(DesignMode);
            nbs.Write(PageIndex);
            nbs.Write(DesignCount);
            nbs.Write(ListDesign.Count);
            foreach (var k in ListDesign)
            {
                k.Serialize(ref nbs);
            }
            TransactionInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignFlag);
            nbs.Read(out DesignMode);
            nbs.Read(out PageIndex);
            nbs.Read(out DesignCount);
            int var1219 = nbs.ReadInt();
            for (int k = 0; k < var1219; k++)
            {
                var var1220 = new CLS_DesignInfo(); var1220.Unserialize(ref nbs);ListDesign.Add(var1220);
            }
            TransactionInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignFlag);
            nbs.Write(DesignMode);
            nbs.Write(PageIndex);
            nbs.Write(DesignCount);
            nbs.Write(ListDesign.Count);
            foreach (var k in ListDesign)
            {
                k.Serialize(ref nbs);
            }
            TransactionInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignFlag);
            nbs.Read(out DesignMode);
            nbs.Read(out PageIndex);
            nbs.Read(out DesignCount);
            int var1226 = nbs.ReadInt();
            for (int k = 0; k < var1226; k++)
            {
                var var1227 = new CLS_DesignInfo(); var1227.Unserialize(ref nbs);ListDesign.Add(var1227);
            }
            TransactionInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EXCHANGE_SHELVES
    /// 请求 挂单买卖
    /// <summary>
    public partial class C2G_Exchange_Shelves : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignMode);
            nbs.Write(Price);
            nbs.Write(Count);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignMode);
            nbs.Read(out Price);
            nbs.Read(out Count);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignMode);
            nbs.Write(Price);
            nbs.Write(Count);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignMode);
            nbs.Read(out Price);
            nbs.Read(out Count);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EXCHANGE_SHELVES
    /// 返回 挂单买卖
    /// <summary>
    public partial class G2C_Exchange_Shelves : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignMode);
            DesignInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignMode);
            DesignInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignMode);
            DesignInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignMode);
            DesignInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EXCHANGE_REVOKE
    /// 请求 挂单撤销
    /// <summary>
    public partial class C2G_Exchange_Revoke : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignMode);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignMode);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignMode);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignMode);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EXCHANGE_REVOKE
    /// 返回 挂单撤销
    /// <summary>
    public partial class G2C_Exchange_Revoke : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_EXCHANGE_TRANSACTION
    /// 请求 交易买卖
    /// <summary>
    public partial class C2G_Exchange_Transaction : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignMode);
            nbs.Write(Id);
            nbs.Write(Count);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignMode);
            nbs.Read(out Id);
            nbs.Read(out Count);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignMode);
            nbs.Write(Id);
            nbs.Write(Count);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignMode);
            nbs.Read(out Id);
            nbs.Read(out Count);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_EXCHANGE_TRANSACTION
    /// 返回 交易买卖
    /// <summary>
    public partial class G2C_Exchange_Transaction : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignMode);
            DesignInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignMode);
            DesignInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DesignMode);
            DesignInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DesignMode);
            DesignInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    ///  交易信息
    /// <summary>
    public partial class CLS_TransactionLog
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(DesignMode);
            nbs.Write(MoneyType);
            nbs.Write(Price);
            nbs.Write(Count);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out DesignMode);
            nbs.Read(out MoneyType);
            nbs.Read(out Price);
            nbs.Read(out Count);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GETTRANSACTIONLOGLIST
    /// 请求 交易记录
    /// <summary>
    public partial class C2G_GetTransactionLogList : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Type);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Type);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Type);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Type);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GETTRANSACTIONLOGLIST
    /// 返回 交易记录
    /// <summary>
    public partial class G2C_GetTransactionLogList : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Type);
            nbs.Write(ListTransactionLog.Count);
            foreach (var k in ListTransactionLog)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Type);
            int var1260 = nbs.ReadInt();
            for (int k = 0; k < var1260; k++)
            {
                var var1261 = new CLS_TransactionLog(); var1261.Unserialize(ref nbs);ListTransactionLog.Add(var1261);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Type);
            nbs.Write(ListTransactionLog.Count);
            foreach (var k in ListTransactionLog)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Type);
            int var1263 = nbs.ReadInt();
            for (int k = 0; k < var1263; k++)
            {
                var var1264 = new CLS_TransactionLog(); var1264.Unserialize(ref nbs);ListTransactionLog.Add(var1264);
            }
        }
    };
    /// <summary>
    /// 商会单子信息 基础
    /// <summary>
    public partial class CLS_AuctionInfoBase
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(Puid);
            nbs.Write(Name);
            nbs.Write(Price);
            nbs.Write(DtExpire);
            nbs.Write(TsRemainder);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out Puid);
            nbs.Read(out Name);
            nbs.Read(out Price);
            nbs.Read(out DtExpire);
            nbs.Read(out TsRemainder);
        }
    };
    /// <summary>
    /// 商会单子信息 道具
    /// <summary>
    public partial class CLS_AuctionInfoItem
    {
        public void Serialize(ref NetBitStream nbs)
        {
            AuctionInfoBase.Serialize(ref nbs);
            ItemInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            AuctionInfoBase.Unserialize(ref nbs);
            ItemInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_LISTITEM
    /// 请求 商会列表 道具
    /// <summary>
    public partial class C2G_Auction_ListItem : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Order);
            nbs.Write(AuctionFlag);
            nbs.Write(SubType);
            nbs.Write(PageIndex);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Order);
            nbs.Read(out AuctionFlag);
            nbs.Read(out SubType);
            nbs.Read(out PageIndex);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Order);
            nbs.Write(AuctionFlag);
            nbs.Write(SubType);
            nbs.Write(PageIndex);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Order);
            nbs.Read(out AuctionFlag);
            nbs.Read(out SubType);
            nbs.Read(out PageIndex);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_LISTITEM
    /// 返回 商会列表 道具
    /// <summary>
    public partial class G2C_Auction_ListItem : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Order);
            nbs.Write(AuctionFlag);
            nbs.Write(SubType);
            nbs.Write(PageIndex);
            nbs.Write(TotalCount);
            nbs.Write(DictItem.Count);
            foreach (var kvp in DictItem)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Order);
            nbs.Read(out AuctionFlag);
            nbs.Read(out SubType);
            nbs.Read(out PageIndex);
            nbs.Read(out TotalCount);
            int var1286 = nbs.ReadInt();
            for (int k = 0; k < var1286; k++)
            {
                long var1287 = nbs.ReadLong(); var var1288 = new CLS_AuctionInfoItem(); var1288.Unserialize(ref nbs); DictItem.Add(var1287, var1288); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Order);
            nbs.Write(AuctionFlag);
            nbs.Write(SubType);
            nbs.Write(PageIndex);
            nbs.Write(TotalCount);
            nbs.Write(DictItem.Count);
            foreach (var kvp in DictItem)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Order);
            nbs.Read(out AuctionFlag);
            nbs.Read(out SubType);
            nbs.Read(out PageIndex);
            nbs.Read(out TotalCount);
            int var1294 = nbs.ReadInt();
            for (int k = 0; k < var1294; k++)
            {
                long var1295 = nbs.ReadLong(); var var1296 = new CLS_AuctionInfoItem(); var1296.Unserialize(ref nbs); DictItem.Add(var1295, var1296); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_SELLITEM
    /// 请求 商会出售 道具
    /// <summary>
    public partial class C2G_Auction_SellItem : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ItemInfo.Serialize(ref nbs);
            nbs.Write(Price);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ItemInfo.Unserialize(ref nbs);
            nbs.Read(out Price);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ItemInfo.Serialize(ref nbs);
            nbs.Write(Price);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ItemInfo.Unserialize(ref nbs);
            nbs.Read(out Price);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_SELLITEM
    /// 返回 商会出售 道具
    /// <summary>
    public partial class G2C_Auction_SellItem : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            AuctionInfoItem.Serialize(ref nbs);
            ItemInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            AuctionInfoItem.Unserialize(ref nbs);
            ItemInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            AuctionInfoItem.Serialize(ref nbs);
            ItemInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            AuctionInfoItem.Unserialize(ref nbs);
            ItemInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_RETURNITEM
    /// 请求 商会撤卖 道具
    /// <summary>
    public partial class C2G_Auction_ReturnItem : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_RETURNITEM
    /// 返回 商会撤卖 道具
    /// <summary>
    public partial class G2C_Auction_ReturnItem : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ItemInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ItemInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ItemInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ItemInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_BUYITEM
    /// 请求 商会买入 道具
    /// <summary>
    public partial class C2G_Auction_BuyItem : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_BUYITEM
    /// 返回 商会买入 道具
    /// <summary>
    public partial class G2C_Auction_BuyItem : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ItemInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ItemInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ItemInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ItemInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 商会单子信息 装备
    /// <summary>
    public partial class CLS_AuctionInfoEquip
    {
        public void Serialize(ref NetBitStream nbs)
        {
            AuctionInfoBase.Serialize(ref nbs);
            EquipInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            AuctionInfoBase.Unserialize(ref nbs);
            EquipInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_LISTEQUIP
    /// 请求 商会列表 装备
    /// <summary>
    public partial class C2G_Auction_ListEquip : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Order);
            nbs.Write(AuctionFlag);
            nbs.Write(SubType);
            nbs.Write(PageIndex);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Order);
            nbs.Read(out AuctionFlag);
            nbs.Read(out SubType);
            nbs.Read(out PageIndex);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Order);
            nbs.Write(AuctionFlag);
            nbs.Write(SubType);
            nbs.Write(PageIndex);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Order);
            nbs.Read(out AuctionFlag);
            nbs.Read(out SubType);
            nbs.Read(out PageIndex);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_LISTEQUIP
    /// 返回 商会列表 装备
    /// <summary>
    public partial class G2C_Auction_ListEquip : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Order);
            nbs.Write(AuctionFlag);
            nbs.Write(SubType);
            nbs.Write(PageIndex);
            nbs.Write(TotalCount);
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Order);
            nbs.Read(out AuctionFlag);
            nbs.Read(out SubType);
            nbs.Read(out PageIndex);
            nbs.Read(out TotalCount);
            int var1328 = nbs.ReadInt();
            for (int k = 0; k < var1328; k++)
            {
                long var1329 = nbs.ReadLong(); var var1330 = new CLS_AuctionInfoEquip(); var1330.Unserialize(ref nbs); DictEquip.Add(var1329, var1330); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Order);
            nbs.Write(AuctionFlag);
            nbs.Write(SubType);
            nbs.Write(PageIndex);
            nbs.Write(TotalCount);
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Order);
            nbs.Read(out AuctionFlag);
            nbs.Read(out SubType);
            nbs.Read(out PageIndex);
            nbs.Read(out TotalCount);
            int var1336 = nbs.ReadInt();
            for (int k = 0; k < var1336; k++)
            {
                long var1337 = nbs.ReadLong(); var var1338 = new CLS_AuctionInfoEquip(); var1338.Unserialize(ref nbs); DictEquip.Add(var1337, var1338); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_SELLEQUIP
    /// 请求 商会出售 装备
    /// <summary>
    public partial class C2G_Auction_SellEquip : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(EquipId);
            nbs.Write(Price);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out EquipId);
            nbs.Read(out Price);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(EquipId);
            nbs.Write(Price);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out EquipId);
            nbs.Read(out Price);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_SELLEQUIP
    /// 返回 商会出售 装备
    /// <summary>
    public partial class G2C_Auction_SellEquip : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            AuctionInfoEquip.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            AuctionInfoEquip.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            AuctionInfoEquip.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            AuctionInfoEquip.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_RETURNEQUIP
    /// 请求 商会撤卖 装备
    /// <summary>
    public partial class C2G_Auction_ReturnEquip : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_RETURNEQUIP
    /// 返回 商会撤卖 装备
    /// <summary>
    public partial class G2C_Auction_ReturnEquip : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            EquipInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            EquipInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            EquipInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            EquipInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_BUYEQUIP
    /// 请求 商会买入 装备
    /// <summary>
    public partial class C2G_Auction_BuyEquip : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_BUYEQUIP
    /// 返回 商会买入 装备
    /// <summary>
    public partial class G2C_Auction_BuyEquip : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            EquipInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            EquipInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            EquipInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            EquipInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 商会单子信息 武将
    /// <summary>
    public partial class CLS_AuctionInfoWarrior
    {
        public void Serialize(ref NetBitStream nbs)
        {
            AuctionInfoBase.Serialize(ref nbs);
            WarriorInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            AuctionInfoBase.Unserialize(ref nbs);
            WarriorInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_LISTWARRIOR
    /// 请求 商会列表 武将
    /// <summary>
    public partial class C2G_Auction_ListWarrior : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Order);
            nbs.Write(AuctionFlag);
            nbs.Write(SubType);
            nbs.Write(PageIndex);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Order);
            nbs.Read(out AuctionFlag);
            nbs.Read(out SubType);
            nbs.Read(out PageIndex);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Order);
            nbs.Write(AuctionFlag);
            nbs.Write(SubType);
            nbs.Write(PageIndex);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Order);
            nbs.Read(out AuctionFlag);
            nbs.Read(out SubType);
            nbs.Read(out PageIndex);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_LISTWARRIOR
    /// 返回 商会列表 武将
    /// <summary>
    public partial class G2C_Auction_ListWarrior : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Order);
            nbs.Write(AuctionFlag);
            nbs.Write(SubType);
            nbs.Write(PageIndex);
            nbs.Write(TotalCount);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Order);
            nbs.Read(out AuctionFlag);
            nbs.Read(out SubType);
            nbs.Read(out PageIndex);
            nbs.Read(out TotalCount);
            int var1368 = nbs.ReadInt();
            for (int k = 0; k < var1368; k++)
            {
                long var1369 = nbs.ReadLong(); var var1370 = new CLS_AuctionInfoWarrior(); var1370.Unserialize(ref nbs); DictWarrior.Add(var1369, var1370); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Order);
            nbs.Write(AuctionFlag);
            nbs.Write(SubType);
            nbs.Write(PageIndex);
            nbs.Write(TotalCount);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Order);
            nbs.Read(out AuctionFlag);
            nbs.Read(out SubType);
            nbs.Read(out PageIndex);
            nbs.Read(out TotalCount);
            int var1376 = nbs.ReadInt();
            for (int k = 0; k < var1376; k++)
            {
                long var1377 = nbs.ReadLong(); var var1378 = new CLS_AuctionInfoWarrior(); var1378.Unserialize(ref nbs); DictWarrior.Add(var1377, var1378); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_SELLWARRIOR
    /// 请求 商会出售 武将
    /// <summary>
    public partial class C2G_Auction_SellWarrior : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(WarriorId);
            nbs.Write(Price);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out WarriorId);
            nbs.Read(out Price);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(WarriorId);
            nbs.Write(Price);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out WarriorId);
            nbs.Read(out Price);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_SELLWARRIOR
    /// 返回 商会出售 武将
    /// <summary>
    public partial class G2C_Auction_SellWarrior : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            AuctionInfoWarrior.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            AuctionInfoWarrior.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            AuctionInfoWarrior.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            AuctionInfoWarrior.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_RETURNWARRIOR
    /// 请求 商会撤卖 武将
    /// <summary>
    public partial class C2G_Auction_ReturnWarrior : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_RETURNWARRIOR
    /// 返回 商会撤卖 武将
    /// <summary>
    public partial class G2C_Auction_ReturnWarrior : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            WarriorInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            WarriorInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            WarriorInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            WarriorInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_BUYWARRIOR
    /// 请求 商会买入 武将
    /// <summary>
    public partial class C2G_Auction_BuyWarrior : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_BUYWARRIOR
    /// 返回 商会买入 武将
    /// <summary>
    public partial class G2C_Auction_BuyWarrior : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            WarriorInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            WarriorInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            WarriorInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            WarriorInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_SEARCH
    /// 请求 商会搜索
    /// <summary>
    public partial class C2G_Auction_Search : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(SearchKey);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out SearchKey);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(SearchKey);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out SearchKey);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_SEARCH
    /// 返回 商会搜索
    /// <summary>
    public partial class G2C_Auction_Search : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictItem.Count);
            foreach (var kvp in DictItem)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1395 = nbs.ReadInt();
            for (int k = 0; k < var1395; k++)
            {
                long var1396 = nbs.ReadLong(); var var1397 = new CLS_AuctionInfoItem(); var1397.Unserialize(ref nbs); DictItem.Add(var1396, var1397); 
            }
            int var1398 = nbs.ReadInt();
            for (int k = 0; k < var1398; k++)
            {
                long var1399 = nbs.ReadLong(); var var1400 = new CLS_AuctionInfoEquip(); var1400.Unserialize(ref nbs); DictEquip.Add(var1399, var1400); 
            }
            int var1401 = nbs.ReadInt();
            for (int k = 0; k < var1401; k++)
            {
                long var1402 = nbs.ReadLong(); var var1403 = new CLS_AuctionInfoWarrior(); var1403.Unserialize(ref nbs); DictWarrior.Add(var1402, var1403); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictItem.Count);
            foreach (var kvp in DictItem)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(DictEquip.Count);
            foreach (var kvp in DictEquip)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1404 = nbs.ReadInt();
            for (int k = 0; k < var1404; k++)
            {
                long var1405 = nbs.ReadLong(); var var1406 = new CLS_AuctionInfoItem(); var1406.Unserialize(ref nbs); DictItem.Add(var1405, var1406); 
            }
            int var1407 = nbs.ReadInt();
            for (int k = 0; k < var1407; k++)
            {
                long var1408 = nbs.ReadLong(); var var1409 = new CLS_AuctionInfoEquip(); var1409.Unserialize(ref nbs); DictEquip.Add(var1408, var1409); 
            }
            int var1410 = nbs.ReadInt();
            for (int k = 0; k < var1410; k++)
            {
                long var1411 = nbs.ReadLong(); var var1412 = new CLS_AuctionInfoWarrior(); var1412.Unserialize(ref nbs); DictWarrior.Add(var1411, var1412); 
            }
        }
    };
    /// <summary>
    /// 商会交易记录
    /// <summary>
    public partial class CLS_AuctionLog
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(AuctionLogItemType);
            nbs.Write(ConfigId);
            nbs.Write(Count);
            nbs.Write(PlayerName);
            nbs.Write(Price);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out AuctionLogItemType);
            nbs.Read(out ConfigId);
            nbs.Read(out Count);
            nbs.Read(out PlayerName);
            nbs.Read(out Price);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AUCTION_GETLOG
    /// 请求 商会交易记录
    /// <summary>
    public partial class C2G_Auction_GetLog : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(AuctionLogType);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out AuctionLogType);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(AuctionLogType);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out AuctionLogType);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AUCTION_GETLOG
    /// 返回 商会交易记录
    /// <summary>
    public partial class G2C_Auction_GetLog : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(AuctionLogType);
            nbs.Write(ListAuctionLog.Count);
            foreach (var k in ListAuctionLog)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out AuctionLogType);
            int var1421 = nbs.ReadInt();
            for (int k = 0; k < var1421; k++)
            {
                var var1422 = new CLS_AuctionLog(); var1422.Unserialize(ref nbs);ListAuctionLog.Add(var1422);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(AuctionLogType);
            nbs.Write(ListAuctionLog.Count);
            foreach (var k in ListAuctionLog)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out AuctionLogType);
            int var1424 = nbs.ReadInt();
            for (int k = 0; k < var1424; k++)
            {
                var var1425 = new CLS_AuctionLog(); var1425.Unserialize(ref nbs);ListAuctionLog.Add(var1425);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_DRAW_GETINFO
    /// 请求 宴会厅数据
    /// <summary>
    public partial class C2G_Draw_GetInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_DRAW_GETINFO
    /// 返回 宴会厅数据
    /// <summary>
    public partial class G2C_Draw_GetInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DrawScore);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DrawScore);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DrawScore);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DrawScore);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_DRAW_LUCK
    /// 请求 宴会厅抽奖
    /// <summary>
    public partial class C2G_Draw_Luck : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DrawPoolId);
            nbs.Write(DrawType);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DrawPoolId);
            nbs.Read(out DrawType);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DrawPoolId);
            nbs.Write(DrawType);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DrawPoolId);
            nbs.Read(out DrawType);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_DRAW_LUCK
    /// 返回 宴会厅抽奖
    /// <summary>
    public partial class G2C_Draw_Luck : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1432 = nbs.ReadInt();
            for (int k = 0; k < var1432; k++)
            {
                var var1433 = new CLS_AwardItem(); var1433.Unserialize(ref nbs);ListAward.Add(var1433);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1434 = nbs.ReadInt();
            for (int k = 0; k < var1434; k++)
            {
                var var1435 = new CLS_AwardItem(); var1435.Unserialize(ref nbs);ListAward.Add(var1435);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_DRAW_GETAWARD
    /// 请求 宴会厅奖励
    /// <summary>
    public partial class C2G_Draw_GetAward : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_DRAW_GETAWARD
    /// 返回 宴会厅奖励
    /// <summary>
    public partial class G2C_Draw_GetAward : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1436 = nbs.ReadInt();
            for (int k = 0; k < var1436; k++)
            {
                var var1437 = new CLS_AwardItem(); var1437.Unserialize(ref nbs);ListAward.Add(var1437);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1438 = nbs.ReadInt();
            for (int k = 0; k < var1438; k++)
            {
                var var1439 = new CLS_AwardItem(); var1439.Unserialize(ref nbs);ListAward.Add(var1439);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_CDKEY_USE
    /// 请求 使用兑换码
    /// <summary>
    public partial class C2G_Cdkey_Use : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Cdkey);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Cdkey);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Cdkey);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Cdkey);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_CDKEY_USE
    /// 返回 使用兑换码
    /// <summary>
    public partial class G2C_Cdkey_Use : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Cdkey);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Cdkey);
            int var1443 = nbs.ReadInt();
            for (int k = 0; k < var1443; k++)
            {
                var var1444 = new CLS_AwardItem(); var1444.Unserialize(ref nbs);ListAward.Add(var1444);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Cdkey);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Cdkey);
            int var1446 = nbs.ReadInt();
            for (int k = 0; k < var1446; k++)
            {
                var var1447 = new CLS_AwardItem(); var1447.Unserialize(ref nbs);ListAward.Add(var1447);
            }
        }
    };
    /// <summary>
    /// 排行榜单条信息
    /// <summary>
    public partial class CLS_TopData
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Rank);
            nbs.Write(Puid);
            nbs.Write(Name);
            nbs.Write(Score);
            nbs.Write(Other);
            nbs.Write(ConfigId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Rank);
            nbs.Read(out Puid);
            nbs.Read(out Name);
            nbs.Read(out Score);
            nbs.Read(out Other);
            nbs.Read(out ConfigId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_TOP_TOPLIST
    /// 请求 排行榜
    /// <summary>
    public partial class C2G_Top_Toplist : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(type);
            nbs.Write(PageIndex);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out type);
            nbs.Read(out PageIndex);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(type);
            nbs.Write(PageIndex);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out type);
            nbs.Read(out PageIndex);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_TOP_TOPLIST
    /// 返回 排行榜
    /// <summary>
    public partial class G2C_Top_Toplist : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TopDataList.Count);
            foreach (var k in TopDataList)
            {
                k.Serialize(ref nbs);
            }
            playerTopData.Serialize(ref nbs);
            nbs.Write(type);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1458 = nbs.ReadInt();
            for (int k = 0; k < var1458; k++)
            {
                var var1459 = new CLS_TopData(); var1459.Unserialize(ref nbs);TopDataList.Add(var1459);
            }
            playerTopData.Unserialize(ref nbs);
            nbs.Read(out type);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TopDataList.Count);
            foreach (var k in TopDataList)
            {
                k.Serialize(ref nbs);
            }
            playerTopData.Serialize(ref nbs);
            nbs.Write(type);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1462 = nbs.ReadInt();
            for (int k = 0; k < var1462; k++)
            {
                var var1463 = new CLS_TopData(); var1463.Unserialize(ref nbs);TopDataList.Add(var1463);
            }
            playerTopData.Unserialize(ref nbs);
            nbs.Read(out type);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_TOP_INFO
    /// 请求 排行榜单条具体数据信息
    /// <summary>
    public partial class C2G_Top_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(type);
            nbs.Write(ID);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out type);
            nbs.Read(out ID);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(type);
            nbs.Write(ID);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out type);
            nbs.Read(out ID);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_TOP_INFO
    /// 返回 排行榜单条具体数据信息
    /// <summary>
    public partial class G2C_Top_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(type);
            EquipInfo.Serialize(ref nbs);
            WarriorInfo.Serialize(ref nbs);
            PlayerInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out type);
            EquipInfo.Unserialize(ref nbs);
            WarriorInfo.Unserialize(ref nbs);
            PlayerInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(type);
            EquipInfo.Serialize(ref nbs);
            WarriorInfo.Serialize(ref nbs);
            PlayerInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out type);
            EquipInfo.Unserialize(ref nbs);
            WarriorInfo.Unserialize(ref nbs);
            PlayerInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 任务信息
    /// <summary>
    public partial class CLS_TaskInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Tuid);
            nbs.Write(Id);
            nbs.Write(State);
            nbs.Write(Schedule);
            nbs.Write(ScheduleMax);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Tuid);
            nbs.Read(out Id);
            nbs.Read(out State);
            nbs.Read(out Schedule);
            nbs.Read(out ScheduleMax);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_TASK_LIST
    /// 请求 任务列表
    /// <summary>
    public partial class C2G_Task_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TaskType);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TaskType);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TaskType);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TaskType);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_TASK_LIST
    /// 返回 任务列表
    /// <summary>
    public partial class G2C_Task_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TaskType);
            nbs.Write(ListTask.Count);
            foreach (var k in ListTask)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TaskType);
            int var1486 = nbs.ReadInt();
            for (int k = 0; k < var1486; k++)
            {
                var var1487 = new CLS_TaskInfo(); var1487.Unserialize(ref nbs);ListTask.Add(var1487);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TaskType);
            nbs.Write(ListTask.Count);
            foreach (var k in ListTask)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TaskType);
            int var1489 = nbs.ReadInt();
            for (int k = 0; k < var1489; k++)
            {
                var var1490 = new CLS_TaskInfo(); var1490.Unserialize(ref nbs);ListTask.Add(var1490);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_TASK_GET
    /// 请求 任务领奖
    /// <summary>
    public partial class C2G_Task_Get : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TaskType);
            nbs.Write(Tuid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TaskType);
            nbs.Read(out Tuid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TaskType);
            nbs.Write(Tuid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TaskType);
            nbs.Read(out Tuid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_TASK_GET
    /// 返回 任务领奖
    /// <summary>
    public partial class G2C_Task_Get : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1495 = nbs.ReadInt();
            for (int k = 0; k < var1495; k++)
            {
                var var1496 = new CLS_AwardItem(); var1496.Unserialize(ref nbs);ListAward.Add(var1496);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1497 = nbs.ReadInt();
            for (int k = 0; k < var1497; k++)
            {
                var var1498 = new CLS_AwardItem(); var1498.Unserialize(ref nbs);ListAward.Add(var1498);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_TASK_GETALL
    /// 请求 任务领奖一键领取
    /// <summary>
    public partial class C2G_Task_GetAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TaskType);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TaskType);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TaskType);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TaskType);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_TASK_GETALL
    /// 返回 任务领奖一键领取
    /// <summary>
    public partial class G2C_Task_GetAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1501 = nbs.ReadInt();
            for (int k = 0; k < var1501; k++)
            {
                var var1502 = new CLS_AwardItem(); var1502.Unserialize(ref nbs);ListAward.Add(var1502);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1503 = nbs.ReadInt();
            for (int k = 0; k < var1503; k++)
            {
                var var1504 = new CLS_AwardItem(); var1504.Unserialize(ref nbs);ListAward.Add(var1504);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_TASK_EVERYDAY
    /// 请求 日常任务
    /// <summary>
    public partial class C2G_Task_Everyday : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_TASK_EVERYDAY
    /// 返回 日常任务
    /// <summary>
    public partial class G2C_Task_Everyday : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListTask.Count);
            foreach (var k in ListTask)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(Activity);
            nbs.Write(DictTaskActivity.Count);
            foreach (var kvp in DictTaskActivity)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1505 = nbs.ReadInt();
            for (int k = 0; k < var1505; k++)
            {
                var var1506 = new CLS_TaskInfo(); var1506.Unserialize(ref nbs);ListTask.Add(var1506);
            }
            nbs.Read(out Activity);
            int var1508 = nbs.ReadInt();
            for (int k = 0; k < var1508; k++)
            {
                int var1509 = nbs.ReadInt(); int var1510 = nbs.ReadInt(); DictTaskActivity.Add(var1509, var1510); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListTask.Count);
            foreach (var k in ListTask)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(Activity);
            nbs.Write(DictTaskActivity.Count);
            foreach (var kvp in DictTaskActivity)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1511 = nbs.ReadInt();
            for (int k = 0; k < var1511; k++)
            {
                var var1512 = new CLS_TaskInfo(); var1512.Unserialize(ref nbs);ListTask.Add(var1512);
            }
            nbs.Read(out Activity);
            int var1514 = nbs.ReadInt();
            for (int k = 0; k < var1514; k++)
            {
                int var1515 = nbs.ReadInt(); int var1516 = nbs.ReadInt(); DictTaskActivity.Add(var1515, var1516); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_TASK_EVERYDAYAWARD
    /// 请求 每日活跃奖励
    /// <summary>
    public partial class C2G_Task_EverydayAward : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ActivityID);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out ActivityID);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ActivityID);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out ActivityID);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_TASK_EVERYDAYAWARD
    /// 返回 每日活跃奖励
    /// <summary>
    public partial class G2C_Task_EverydayAward : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1519 = nbs.ReadInt();
            for (int k = 0; k < var1519; k++)
            {
                var var1520 = new CLS_AwardItem(); var1520.Unserialize(ref nbs);ListAward.Add(var1520);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1521 = nbs.ReadInt();
            for (int k = 0; k < var1521; k++)
            {
                var var1522 = new CLS_AwardItem(); var1522.Unserialize(ref nbs);ListAward.Add(var1522);
            }
        }
    };
    /// <summary>
    /// 签到信息
    /// <summary>
    public partial class CLS_SignInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(IsSigned);
            nbs.Write(SignDays);
            nbs.Write(ReSignDays);
            nbs.Write(SignIndex);
            nbs.Write(AliveTime);
            nbs.Write(TotalTime);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out IsSigned);
            nbs.Read(out SignDays);
            nbs.Read(out ReSignDays);
            nbs.Read(out SignIndex);
            nbs.Read(out AliveTime);
            nbs.Read(out TotalTime);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SIGN_INFO
    /// 请求 获取签到信息
    /// <summary>
    public partial class C2G_Sign_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SIGN_INFO
    /// 返回 获取签到信息
    /// <summary>
    public partial class G2C_Sign_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            SignInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            SignInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            SignInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            SignInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SIGN
    /// 请求 处理签到
    /// <summary>
    public partial class C2G_Sign : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SIGN
    /// 返回 处理签到
    /// <summary>
    public partial class G2C_Sign : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            SignInfo.Serialize(ref nbs);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            SignInfo.Unserialize(ref nbs);
            int var1532 = nbs.ReadInt();
            for (int k = 0; k < var1532; k++)
            {
                var var1533 = new CLS_AwardItem(); var1533.Unserialize(ref nbs);ListAward.Add(var1533);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            SignInfo.Serialize(ref nbs);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            SignInfo.Unserialize(ref nbs);
            int var1535 = nbs.ReadInt();
            for (int k = 0; k < var1535; k++)
            {
                var var1536 = new CLS_AwardItem(); var1536.Unserialize(ref nbs);ListAward.Add(var1536);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_RESIGN
    /// 请求 处理补签
    /// <summary>
    public partial class C2G_ReSign : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_RESIGN
    /// 返回 处理补签
    /// <summary>
    public partial class G2C_ReSign : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            SignInfo.Serialize(ref nbs);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            SignInfo.Unserialize(ref nbs);
            int var1538 = nbs.ReadInt();
            for (int k = 0; k < var1538; k++)
            {
                var var1539 = new CLS_AwardItem(); var1539.Unserialize(ref nbs);ListAward.Add(var1539);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            SignInfo.Serialize(ref nbs);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            SignInfo.Unserialize(ref nbs);
            int var1541 = nbs.ReadInt();
            for (int k = 0; k < var1541; k++)
            {
                var var1542 = new CLS_AwardItem(); var1542.Unserialize(ref nbs);ListAward.Add(var1542);
            }
        }
    };
    /// <summary>
    /// BUFF信息
    /// <summary>
    public partial class CLS_BuffInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(AliveTime);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out AliveTime);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BUFF_INFO
    /// 请求 获取BUFF信息
    /// <summary>
    public partial class C2G_Buff_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BUFF_INFO
    /// 返回 获取BUFF信息
    /// <summary>
    public partial class G2C_Buff_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Info.Count);
            foreach (var k in Info)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1545 = nbs.ReadInt();
            for (int k = 0; k < var1545; k++)
            {
                var var1546 = new CLS_BuffInfo(); var1546.Unserialize(ref nbs);Info.Add(var1546);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Info.Count);
            foreach (var k in Info)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1547 = nbs.ReadInt();
            for (int k = 0; k < var1547; k++)
            {
                var var1548 = new CLS_BuffInfo(); var1548.Unserialize(ref nbs);Info.Add(var1548);
            }
        }
    };
    /// <summary>
    /// 城池信息
    /// <summary>
    public partial class CLS_AcitvityInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(IsOpen);
            nbs.Write(TimeOpen);
            nbs.Write(TimeEnd);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out IsOpen);
            nbs.Read(out TimeOpen);
            nbs.Read(out TimeEnd);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ACITVITY_LIST
    /// 请求 获取活动列表
    /// <summary>
    public partial class C2G_Acitvity_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ACITVITY_LIST
    /// 返回 获取活动列表
    /// <summary>
    public partial class G2C_Acitvity_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListInfo.Count);
            foreach (var kvp in ListInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1553 = nbs.ReadInt();
            for (int k = 0; k < var1553; k++)
            {
                int var1554 = nbs.ReadInt(); var var1555 = new CLS_AcitvityInfo(); var1555.Unserialize(ref nbs); ListInfo.Add(var1554, var1555); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListInfo.Count);
            foreach (var kvp in ListInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1556 = nbs.ReadInt();
            for (int k = 0; k < var1556; k++)
            {
                int var1557 = nbs.ReadInt(); var var1558 = new CLS_AcitvityInfo(); var1558.Unserialize(ref nbs); ListInfo.Add(var1557, var1558); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ACITVITY_REBATEINFO
    /// 请求 返利信息
    /// <summary>
    public partial class C2G_Acitvity_RebateInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ACITVITY_REBATEINFO
    /// 返回 返利信息
    /// <summary>
    public partial class G2C_Acitvity_RebateInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Rebate);
            nbs.Write(RebateTotal);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Rebate);
            nbs.Read(out RebateTotal);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Rebate);
            nbs.Write(RebateTotal);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Rebate);
            nbs.Read(out RebateTotal);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ACITVITY_7DAY
    /// 请求 获取七日试炼
    /// <summary>
    public partial class C2G_Acitvity_7Day : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ACITVITY_7DAY
    /// 返回 获取七日试炼
    /// <summary>
    public partial class G2C_Acitvity_7Day : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListTask.Count);
            foreach (var k in ListTask)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1563 = nbs.ReadInt();
            for (int k = 0; k < var1563; k++)
            {
                var var1564 = new CLS_TaskInfo(); var1564.Unserialize(ref nbs);ListTask.Add(var1564);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListTask.Count);
            foreach (var k in ListTask)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1565 = nbs.ReadInt();
            for (int k = 0; k < var1565; k++)
            {
                var var1566 = new CLS_TaskInfo(); var1566.Unserialize(ref nbs);ListTask.Add(var1566);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ACITVITY_7DAYGET
    /// 请求 七日试炼领奖
    /// <summary>
    public partial class C2G_Acitvity_7DayGet : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(confID);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out confID);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(confID);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out confID);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ACITVITY_7DAYGET
    /// 返回 七日试炼领奖
    /// <summary>
    public partial class G2C_Acitvity_7DayGet : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1569 = nbs.ReadInt();
            for (int k = 0; k < var1569; k++)
            {
                var var1570 = new CLS_AwardItem(); var1570.Unserialize(ref nbs);ListAward.Add(var1570);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1571 = nbs.ReadInt();
            for (int k = 0; k < var1571; k++)
            {
                var var1572 = new CLS_AwardItem(); var1572.Unserialize(ref nbs);ListAward.Add(var1572);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ACITVITY_7DAYLOGININFO
    /// 请求 获取七日登录信息
    /// <summary>
    public partial class C2G_Acitvity_7DayLoginInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ACITVITY_7DAYLOGININFO
    /// 返回 获取七日登录信息
    /// <summary>
    public partial class G2C_Acitvity_7DayLoginInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictData.Count);
            foreach (var kvp in DictData)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1573 = nbs.ReadInt();
            for (int k = 0; k < var1573; k++)
            {
                int var1574 = nbs.ReadInt(); byte var1575 = nbs.ReadByte(); DictData.Add(var1574, var1575); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictData.Count);
            foreach (var kvp in DictData)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1576 = nbs.ReadInt();
            for (int k = 0; k < var1576; k++)
            {
                int var1577 = nbs.ReadInt(); byte var1578 = nbs.ReadByte(); DictData.Add(var1577, var1578); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ACITVITY_7DAYLOGINGET
    /// 请求 七日登录领奖
    /// <summary>
    public partial class C2G_Acitvity_7DayLoginGet : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Day);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Day);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Day);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Day);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ACITVITY_7DAYLOGINGET
    /// 返回 七日登录领奖
    /// <summary>
    public partial class G2C_Acitvity_7DayLoginGet : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1581 = nbs.ReadInt();
            for (int k = 0; k < var1581; k++)
            {
                var var1582 = new CLS_AwardItem(); var1582.Unserialize(ref nbs);ListAward.Add(var1582);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1583 = nbs.ReadInt();
            for (int k = 0; k < var1583; k++)
            {
                var var1584 = new CLS_AwardItem(); var1584.Unserialize(ref nbs);ListAward.Add(var1584);
            }
        }
    };
    /// <summary>
    /// 福利信息
    /// <summary>
    public partial class CLS_WelfareTaskInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write((short)State);
            nbs.Write(Schedule);
            nbs.Write(ScheduleMax);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            if (true) { var etemp = nbs.ReadShort(); State = (EWelfareState)etemp; }
            nbs.Read(out Schedule);
            nbs.Read(out ScheduleMax);
        }
    };
    /// <summary>
    /// 福利大类信息
    /// <summary>
    public partial class CLS_WelfareInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(IsOpen);
            nbs.Write(TimeOpen);
            nbs.Write(TimeEnd);
            nbs.Write(ListTask.Count);
            foreach (var kvp in ListTask)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out IsOpen);
            nbs.Read(out TimeOpen);
            nbs.Read(out TimeEnd);
            int var1593 = nbs.ReadInt();
            for (int k = 0; k < var1593; k++)
            {
                int var1594 = nbs.ReadInt(); var var1595 = new CLS_WelfareTaskInfo(); var1595.Unserialize(ref nbs); ListTask.Add(var1594, var1595); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WELFARE_INFO
    /// 请求 获取福利信息
    /// <summary>
    public partial class C2G_Welfare_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WELFARE_INFO
    /// 返回 获取福利信息
    /// <summary>
    public partial class G2C_Welfare_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListInfo.Count);
            foreach (var kvp in ListInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1596 = nbs.ReadInt();
            for (int k = 0; k < var1596; k++)
            {
                int var1597 = nbs.ReadInt(); var var1598 = new CLS_WelfareInfo(); var1598.Unserialize(ref nbs); ListInfo.Add(var1597, var1598); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListInfo.Count);
            foreach (var kvp in ListInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1599 = nbs.ReadInt();
            for (int k = 0; k < var1599; k++)
            {
                int var1600 = nbs.ReadInt(); var var1601 = new CLS_WelfareInfo(); var1601.Unserialize(ref nbs); ListInfo.Add(var1600, var1601); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WELFARE_AWARD
    /// 请求 领取福利
    /// <summary>
    public partial class C2G_Welfare_Award : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WELFARE_AWARD
    /// 返回 领取福利
    /// <summary>
    public partial class G2C_Welfare_Award : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var1605 = nbs.ReadInt();
            for (int k = 0; k < var1605; k++)
            {
                var var1606 = new CLS_AwardItem(); var1606.Unserialize(ref nbs);ListAward.Add(var1606);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var1608 = nbs.ReadInt();
            for (int k = 0; k < var1608; k++)
            {
                var var1609 = new CLS_AwardItem(); var1609.Unserialize(ref nbs);ListAward.Add(var1609);
            }
        }
    };
    /// <summary>
    /// 势力基本信息
    /// <summary>
    public partial class CLS_GuildInfoBase
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(Name);
            nbs.Write(LeaderName);
            nbs.Write(StateId);
            nbs.Write(Level);
            nbs.Write(JoinMode);
            CountMember.Serialize(ref nbs);
            nbs.Write(IsAlliance);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out Name);
            nbs.Read(out LeaderName);
            nbs.Read(out StateId);
            nbs.Read(out Level);
            nbs.Read(out JoinMode);
            CountMember.Unserialize(ref nbs);
            nbs.Read(out IsAlliance);
        }
    };
    /// <summary>
    /// 势力详细信息
    /// <summary>
    public partial class CLS_GuildInfoDetails
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(Name);
            nbs.Write(LeaderName);
            nbs.Write(StateId);
            nbs.Write(Level);
            nbs.Write(Exp);
            nbs.Write(Fund);
            nbs.Write(Revenue);
            nbs.Write(JoinMode);
            CountMember.Serialize(ref nbs);
            nbs.Write(CapitalCity);
            nbs.Write(CountCity);
            nbs.Write(Manifesto);
            nbs.Write(Notice);
            nbs.Write(GoddessName);
            nbs.Write(GoddessCity);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out Name);
            nbs.Read(out LeaderName);
            nbs.Read(out StateId);
            nbs.Read(out Level);
            nbs.Read(out Exp);
            nbs.Read(out Fund);
            nbs.Read(out Revenue);
            nbs.Read(out JoinMode);
            CountMember.Unserialize(ref nbs);
            nbs.Read(out CapitalCity);
            nbs.Read(out CountCity);
            nbs.Read(out Manifesto);
            nbs.Read(out Notice);
            nbs.Read(out GoddessName);
            nbs.Read(out GoddessCity);
        }
    };
    /// <summary>
    /// 势力详细我的
    /// <summary>
    public partial class CLS_GuildInfoMy
    {
        public void Serialize(ref NetBitStream nbs)
        {
            GuildInfoDetails.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            GuildInfoDetails.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_LIST
    /// 请求 势力列表
    /// <summary>
    public partial class C2G_Guild_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_LIST
    /// 返回 势力列表
    /// <summary>
    public partial class G2C_Guild_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListGuildInfoBase.Count);
            foreach (var k in ListGuildInfoBase)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(CdCanJoin);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1635 = nbs.ReadInt();
            for (int k = 0; k < var1635; k++)
            {
                var var1636 = new CLS_GuildInfoBase(); var1636.Unserialize(ref nbs);ListGuildInfoBase.Add(var1636);
            }
            nbs.Read(out CdCanJoin);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListGuildInfoBase.Count);
            foreach (var k in ListGuildInfoBase)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(CdCanJoin);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1638 = nbs.ReadInt();
            for (int k = 0; k < var1638; k++)
            {
                var var1639 = new CLS_GuildInfoBase(); var1639.Unserialize(ref nbs);ListGuildInfoBase.Add(var1639);
            }
            nbs.Read(out CdCanJoin);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_LISTDETAILS
    /// 请求 势力详情
    /// <summary>
    public partial class C2G_Guild_ListDetails : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_LISTDETAILS
    /// 返回 势力详情
    /// <summary>
    public partial class G2C_Guild_ListDetails : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            GuildInfoDetails.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            GuildInfoDetails.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            GuildInfoDetails.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            GuildInfoDetails.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_CREATE
    /// 请求 势力创建
    /// <summary>
    public partial class C2G_Guild_Create : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Name);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Name);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Name);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Name);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_CREATE
    /// 返回 势力创建
    /// <summary>
    public partial class G2C_Guild_Create : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_TRYLEAVE
    /// 请求 脱离
    /// <summary>
    public partial class C2G_Guild_TryLeave : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_TRYLEAVE
    /// 返回 脱离
    /// <summary>
    public partial class G2C_Guild_TryLeave : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_TRYKICK
    /// 请求 逐出
    /// <summary>
    public partial class C2G_Guild_TryKick : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TargetPuid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TargetPuid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TargetPuid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TargetPuid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_TRYKICK
    /// 返回 逐出
    /// <summary>
    public partial class G2C_Guild_TryKick : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_ABDICATE
    /// 请求 禅让
    /// <summary>
    public partial class C2G_Guild_Abdicate : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TargetPuid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TargetPuid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TargetPuid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TargetPuid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_ABDICATE
    /// 返回 禅让
    /// <summary>
    public partial class G2C_Guild_Abdicate : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_TRYJOIN
    /// 请求 申请加入
    /// <summary>
    public partial class C2G_Guild_TryJoin : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_TRYJOIN
    /// 返回 申请加入
    /// <summary>
    public partial class G2C_Guild_TryJoin : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_LISTAPPLY
    /// 请求 申请列表
    /// <summary>
    public partial class C2G_Guild_ListApply : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_LISTAPPLY
    /// 返回 申请列表
    /// <summary>
    public partial class G2C_Guild_ListApply : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListApply.Count);
            foreach (var k in ListApply)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1653 = nbs.ReadInt();
            for (int k = 0; k < var1653; k++)
            {
                var var1654 = new CLS_PubPlayerBase(); var1654.Unserialize(ref nbs);ListApply.Add(var1654);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListApply.Count);
            foreach (var k in ListApply)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1655 = nbs.ReadInt();
            for (int k = 0; k < var1655; k++)
            {
                var var1656 = new CLS_PubPlayerBase(); var1656.Unserialize(ref nbs);ListApply.Add(var1656);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_APPLYACTION
    /// 请求 申请处理
    /// <summary>
    public partial class C2G_Guild_ApplyAction : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TargetPuid);
            nbs.Write(HandleAction);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TargetPuid);
            nbs.Read(out HandleAction);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TargetPuid);
            nbs.Write(HandleAction);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TargetPuid);
            nbs.Read(out HandleAction);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_APPLYACTION
    /// 返回 申请处理
    /// <summary>
    public partial class G2C_Guild_ApplyAction : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TargetPuid);
            nbs.Write(HandleAction);
            CountMember.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TargetPuid);
            nbs.Read(out HandleAction);
            CountMember.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TargetPuid);
            nbs.Write(HandleAction);
            CountMember.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out TargetPuid);
            nbs.Read(out HandleAction);
            CountMember.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 势力成员信息
    /// <summary>
    public partial class CLS_GuildMbsInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            PubPlayerBase.Serialize(ref nbs);
            nbs.Write(Contribution);
            nbs.Write(ContributionTotal);
            nbs.Write(TimeJoin);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            PubPlayerBase.Unserialize(ref nbs);
            nbs.Read(out Contribution);
            nbs.Read(out ContributionTotal);
            nbs.Read(out TimeJoin);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_LISTMBS
    /// 请求 成员列表
    /// <summary>
    public partial class C2G_Guild_ListMbs : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_LISTMBS
    /// 返回 成员列表
    /// <summary>
    public partial class G2C_Guild_ListMbs : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListMember.Count);
            foreach (var k in ListMember)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1671 = nbs.ReadInt();
            for (int k = 0; k < var1671; k++)
            {
                var var1672 = new CLS_GuildMbsInfo(); var1672.Unserialize(ref nbs);ListMember.Add(var1672);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListMember.Count);
            foreach (var k in ListMember)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1673 = nbs.ReadInt();
            for (int k = 0; k < var1673; k++)
            {
                var var1674 = new CLS_GuildMbsInfo(); var1674.Unserialize(ref nbs);ListMember.Add(var1674);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_LISTLOGRECORD
    /// 请求 动态列表
    /// <summary>
    public partial class C2G_Guild_ListLogRecord : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_LISTLOGRECORD
    /// 返回 动态列表
    /// <summary>
    public partial class G2C_Guild_ListLogRecord : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListLog.Count);
            foreach (var k in ListLog)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1675 = nbs.ReadInt();
            for (int k = 0; k < var1675; k++)
            {
                var var1676 = new CLS_GameLog(); var1676.Unserialize(ref nbs);ListLog.Add(var1676);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListLog.Count);
            foreach (var k in ListLog)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1677 = nbs.ReadInt();
            for (int k = 0; k < var1677; k++)
            {
                var var1678 = new CLS_GameLog(); var1678.Unserialize(ref nbs);ListLog.Add(var1678);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_RENAME
    /// 请求 改名
    /// <summary>
    public partial class C2G_Guild_Rename : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Name);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Name);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Name);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Name);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_RENAME
    /// 返回 改名
    /// <summary>
    public partial class G2C_Guild_Rename : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_JOINMODE
    /// 请求 修改加入设置
    /// <summary>
    public partial class C2G_Guild_JoinMode : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(JoinMode);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out JoinMode);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(JoinMode);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out JoinMode);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_JOINMODE
    /// 返回 修改加入设置
    /// <summary>
    public partial class G2C_Guild_JoinMode : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_MANIFESTO
    /// 请求 修改宣言
    /// <summary>
    public partial class C2G_Guild_Manifesto : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Manifesto);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Manifesto);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Manifesto);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Manifesto);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_MANIFESTO
    /// 返回 修改宣言
    /// <summary>
    public partial class G2C_Guild_Manifesto : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_NOTICE
    /// 请求 修改公告
    /// <summary>
    public partial class C2G_Guild_Notice : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Notice);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Notice);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Notice);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Notice);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_NOTICE
    /// 返回 修改公告
    /// <summary>
    public partial class G2C_Guild_Notice : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_DONATEINFO
    /// 请求 捐献信息
    /// <summary>
    public partial class C2G_Guild_DonateInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_DONATEINFO
    /// 返回 捐献信息
    /// <summary>
    public partial class G2C_Guild_DonateInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListLog.Count);
            foreach (var k in ListLog)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(DictDonateCount.Count);
            foreach (var kvp in DictDonateCount)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(Contribution);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1687 = nbs.ReadInt();
            for (int k = 0; k < var1687; k++)
            {
                var var1688 = new CLS_GameLog(); var1688.Unserialize(ref nbs);ListLog.Add(var1688);
            }
            int var1689 = nbs.ReadInt();
            for (int k = 0; k < var1689; k++)
            {
                int var1690 = nbs.ReadInt(); int var1691 = nbs.ReadInt(); DictDonateCount.Add(var1690, var1691); 
            }
            nbs.Read(out Contribution);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListLog.Count);
            foreach (var k in ListLog)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(DictDonateCount.Count);
            foreach (var kvp in DictDonateCount)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(Contribution);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1693 = nbs.ReadInt();
            for (int k = 0; k < var1693; k++)
            {
                var var1694 = new CLS_GameLog(); var1694.Unserialize(ref nbs);ListLog.Add(var1694);
            }
            int var1695 = nbs.ReadInt();
            for (int k = 0; k < var1695; k++)
            {
                int var1696 = nbs.ReadInt(); int var1697 = nbs.ReadInt(); DictDonateCount.Add(var1696, var1697); 
            }
            nbs.Read(out Contribution);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_DONATE
    /// 请求 捐献
    /// <summary>
    public partial class C2G_Guild_Donate : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DonateId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DonateId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DonateId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DonateId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_DONATE
    /// 返回 捐献
    /// <summary>
    public partial class G2C_Guild_Donate : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DonateId);
            DonateLog.Serialize(ref nbs);
            GuildInfoDetails.Serialize(ref nbs);
            nbs.Write(Contribution);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DonateId);
            DonateLog.Unserialize(ref nbs);
            GuildInfoDetails.Unserialize(ref nbs);
            nbs.Read(out Contribution);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DonateId);
            DonateLog.Serialize(ref nbs);
            GuildInfoDetails.Serialize(ref nbs);
            nbs.Write(Contribution);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DonateId);
            DonateLog.Unserialize(ref nbs);
            GuildInfoDetails.Unserialize(ref nbs);
            nbs.Read(out Contribution);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_LISTDIPLOMACY
    /// 请求 势力关系列表
    /// <summary>
    public partial class C2G_Guild_ListDiplomacy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_LISTDIPLOMACY
    /// 返回 势力关系列表
    /// <summary>
    public partial class G2C_Guild_ListDiplomacy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListGuildInfoBase.Count);
            foreach (var k in ListGuildInfoBase)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1709 = nbs.ReadInt();
            for (int k = 0; k < var1709; k++)
            {
                var var1710 = new CLS_GuildInfoBase(); var1710.Unserialize(ref nbs);ListGuildInfoBase.Add(var1710);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListGuildInfoBase.Count);
            foreach (var k in ListGuildInfoBase)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1711 = nbs.ReadInt();
            for (int k = 0; k < var1711; k++)
            {
                var var1712 = new CLS_GuildInfoBase(); var1712.Unserialize(ref nbs);ListGuildInfoBase.Add(var1712);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_SEARCHNAME
    /// 请求 势力名搜索
    /// <summary>
    public partial class C2G_Guild_SearchName : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Key);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Key);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Key);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Key);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_SEARCHNAME
    /// 返回 势力名搜索
    /// <summary>
    public partial class G2C_Guild_SearchName : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListGuildInfoBase.Count);
            foreach (var k in ListGuildInfoBase)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1715 = nbs.ReadInt();
            for (int k = 0; k < var1715; k++)
            {
                var var1716 = new CLS_GuildInfoBase(); var1716.Unserialize(ref nbs);ListGuildInfoBase.Add(var1716);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListGuildInfoBase.Count);
            foreach (var k in ListGuildInfoBase)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1717 = nbs.ReadInt();
            for (int k = 0; k < var1717; k++)
            {
                var var1718 = new CLS_GuildInfoBase(); var1718.Unserialize(ref nbs);ListGuildInfoBase.Add(var1718);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_LISTALLIANCEAPPLY
    /// 请求 同盟申请列表
    /// <summary>
    public partial class C2G_Guild_ListAllianceApply : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_LISTALLIANCEAPPLY
    /// 返回 同盟申请列表
    /// <summary>
    public partial class G2C_Guild_ListAllianceApply : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListGuildInfoBase.Count);
            foreach (var k in ListGuildInfoBase)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1719 = nbs.ReadInt();
            for (int k = 0; k < var1719; k++)
            {
                var var1720 = new CLS_GuildInfoBase(); var1720.Unserialize(ref nbs);ListGuildInfoBase.Add(var1720);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListGuildInfoBase.Count);
            foreach (var k in ListGuildInfoBase)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1721 = nbs.ReadInt();
            for (int k = 0; k < var1721; k++)
            {
                var var1722 = new CLS_GuildInfoBase(); var1722.Unserialize(ref nbs);ListGuildInfoBase.Add(var1722);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_ALLIANCEAPPLY
    /// 请求 同盟申请
    /// <summary>
    public partial class C2G_Guild_AllianceApply : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_ALLIANCEAPPLY
    /// 返回 同盟申请
    /// <summary>
    public partial class G2C_Guild_AllianceApply : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_ALLIANCEREMOVE
    /// 请求 同盟解除
    /// <summary>
    public partial class C2G_Guild_AllianceRemove : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_ALLIANCEREMOVE
    /// 返回 同盟解除
    /// <summary>
    public partial class G2C_Guild_AllianceRemove : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_ALLIANCEAPPLYACTION
    /// 请求 同盟申请处理
    /// <summary>
    public partial class C2G_Guild_AllianceApplyAction : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(HandleAction);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out HandleAction);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(HandleAction);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out HandleAction);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_ALLIANCEAPPLYACTION
    /// 返回 同盟申请处理
    /// <summary>
    public partial class G2C_Guild_AllianceApplyAction : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_LISTCITY
    /// 请求 城池列表
    /// <summary>
    public partial class C2G_Guild_ListCity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_LISTCITY
    /// 返回 城池列表
    /// <summary>
    public partial class G2C_Guild_ListCity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CapitalCity);
            nbs.Write(ListCity.Count);
            foreach (var k in ListCity)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CapitalCity);
            int var1732 = nbs.ReadInt();
            for (int k = 0; k < var1732; k++)
            {
                var var1733 = new CLS_CityInfo4Guild(); var1733.Unserialize(ref nbs);ListCity.Add(var1733);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CapitalCity);
            nbs.Write(ListCity.Count);
            foreach (var k in ListCity)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CapitalCity);
            int var1735 = nbs.ReadInt();
            for (int k = 0; k < var1735; k++)
            {
                var var1736 = new CLS_CityInfo4Guild(); var1736.Unserialize(ref nbs);ListCity.Add(var1736);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_SETCAPITALCITY
    /// 请求 设置都城
    /// <summary>
    public partial class C2G_Guild_SetCapitalCity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_SETCAPITALCITY
    /// 返回 设置都城
    /// <summary>
    public partial class G2C_Guild_SetCapitalCity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_SETCITYLEADER
    /// 请求 任命太守
    /// <summary>
    public partial class C2G_Guild_SetCityLeader : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(LeaderPuid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out LeaderPuid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(LeaderPuid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out LeaderPuid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_SETCITYLEADER
    /// 返回 任命太守
    /// <summary>
    public partial class G2C_Guild_SetCityLeader : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_REMOVECITYLEADER
    /// 请求 撤销太守
    /// <summary>
    public partial class C2G_Guild_RemoveCityLeader : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_REMOVECITYLEADER
    /// 返回 撤销太守
    /// <summary>
    public partial class G2C_Guild_RemoveCityLeader : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_LISTLOGSITUATION
    /// 请求 军情
    /// <summary>
    public partial class C2G_Guild_ListLogSituation : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_LISTLOGSITUATION
    /// 返回 军情
    /// <summary>
    public partial class G2C_Guild_ListLogSituation : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListLog.Count);
            foreach (var k in ListLog)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1745 = nbs.ReadInt();
            for (int k = 0; k < var1745; k++)
            {
                var var1746 = new CLS_GameLog(); var1746.Unserialize(ref nbs);ListLog.Add(var1746);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListLog.Count);
            foreach (var k in ListLog)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1747 = nbs.ReadInt();
            for (int k = 0; k < var1747; k++)
            {
                var var1748 = new CLS_GameLog(); var1748.Unserialize(ref nbs);ListLog.Add(var1748);
            }
        }
    };
    /// <summary>
    /// 势力排行信息单条
    /// <summary>
    public partial class CLS_GuildTopInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(GuildUid);
            nbs.Write(Name);
            nbs.Write(CountryId);
            nbs.Write(CountCity);
            nbs.Write(TsLastSeize);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out GuildUid);
            nbs.Read(out Name);
            nbs.Read(out CountryId);
            nbs.Read(out CountCity);
            nbs.Read(out TsLastSeize);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_LISTTOP
    /// 请求 势力排行
    /// <summary>
    public partial class C2G_Guild_ListTop : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_LISTTOP
    /// 返回 势力排行
    /// <summary>
    public partial class G2C_Guild_ListTop : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListTop.Count);
            foreach (var k in ListTop)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1754 = nbs.ReadInt();
            for (int k = 0; k < var1754; k++)
            {
                var var1755 = new CLS_GuildTopInfo(); var1755.Unserialize(ref nbs);ListTop.Add(var1755);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListTop.Count);
            foreach (var k in ListTop)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1756 = nbs.ReadInt();
            for (int k = 0; k < var1756; k++)
            {
                var var1757 = new CLS_GuildTopInfo(); var1757.Unserialize(ref nbs);ListTop.Add(var1757);
            }
        }
    };
    /// <summary>
    /// 红包成员信息
    /// <summary>
    public partial class CLS_RedPacketMember
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(PlayerID);
            nbs.Write(HeadId);
            nbs.Write(Name);
            nbs.Write(Bonus);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out PlayerID);
            nbs.Read(out HeadId);
            nbs.Read(out Name);
            nbs.Read(out Bonus);
        }
    };
    /// <summary>
    /// //红包列表
    /// <summary>
    public partial class CLS_RedPacketsInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(RedPacketsID);
            Owner.Serialize(ref nbs);
            nbs.Write(State);
            nbs.Write(TimeEnd);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out RedPacketsID);
            Owner.Unserialize(ref nbs);
            nbs.Read(out State);
            nbs.Read(out TimeEnd);
        }
    };
    /// <summary>
    /// //红包信息
    /// <summary>
    public partial class CLS_RedPacket
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(RedPacketsID);
            nbs.Write(TotalSugar);
            nbs.Write(TotalNumber);
            nbs.Write(SurplusSugar);
            nbs.Write(SurplusNumber);
            Owner.Serialize(ref nbs);
            nbs.Write(TimeEnd);
            nbs.Write(ListMember.Count);
            foreach (var k in ListMember)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(Txt);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out RedPacketsID);
            nbs.Read(out TotalSugar);
            nbs.Read(out TotalNumber);
            nbs.Read(out SurplusSugar);
            nbs.Read(out SurplusNumber);
            Owner.Unserialize(ref nbs);
            nbs.Read(out TimeEnd);
            int var1773 = nbs.ReadInt();
            for (int k = 0; k < var1773; k++)
            {
                var var1774 = new CLS_RedPacketMember(); var1774.Unserialize(ref nbs);ListMember.Add(var1774);
            }
            nbs.Read(out Txt);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_RED_PACKET_LIST
    /// 请求 红包列表
    /// <summary>
    public partial class C2G_Red_Packet_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_RED_PACKET_LIST
    /// 返回 红包列表
    /// <summary>
    public partial class G2C_Red_Packet_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(GetMax);
            nbs.Write(Info.Count);
            foreach (var k in Info)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out GetMax);
            int var1777 = nbs.ReadInt();
            for (int k = 0; k < var1777; k++)
            {
                var var1778 = new CLS_RedPacketsInfo(); var1778.Unserialize(ref nbs);Info.Add(var1778);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(GetMax);
            nbs.Write(Info.Count);
            foreach (var k in Info)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out GetMax);
            int var1780 = nbs.ReadInt();
            for (int k = 0; k < var1780; k++)
            {
                var var1781 = new CLS_RedPacketsInfo(); var1781.Unserialize(ref nbs);Info.Add(var1781);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_RED_PACKET_INFO
    /// 请求 单个红包信息
    /// <summary>
    public partial class C2G_Red_Packet_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(RedPacketsID);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out RedPacketsID);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(RedPacketsID);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out RedPacketsID);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_RED_PACKET_INFO
    /// 返回 单个红包信息
    /// <summary>
    public partial class G2C_Red_Packet_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Error);
            Info.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Error);
            Info.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Error);
            Info.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Error);
            Info.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GIVE_RED_PACKET
    /// 请求 发红包
    /// <summary>
    public partial class C2G_Give_Red_Packet : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Sugar);
            nbs.Write(Number);
            nbs.Write(Txt);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Sugar);
            nbs.Read(out Number);
            nbs.Read(out Txt);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Sugar);
            nbs.Write(Number);
            nbs.Write(Txt);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Sugar);
            nbs.Read(out Number);
            nbs.Read(out Txt);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GIVE_RED_PACKET
    /// 返回 发红包
    /// <summary>
    public partial class G2C_Give_Red_Packet : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_RED_PACKET_RECEIVE
    /// 返回 发红包
    /// <summary>
    public partial class G2C_Red_Packet_Receive : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
            nbs.Write(InfoList.Count);
            foreach (var k in InfoList)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
            int var1795 = nbs.ReadInt();
            for (int k = 0; k < var1795; k++)
            {
                var var1796 = new CLS_RedPacketsInfo(); var1796.Unserialize(ref nbs);InfoList.Add(var1796);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
            nbs.Write(InfoList.Count);
            foreach (var k in InfoList)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
            int var1798 = nbs.ReadInt();
            for (int k = 0; k < var1798; k++)
            {
                var var1799 = new CLS_RedPacketsInfo(); var1799.Unserialize(ref nbs);InfoList.Add(var1799);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GET_RED_PACKET
    /// 请求 抢红包
    /// <summary>
    public partial class C2G_Get_Red_Packet : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(RedPacketsID);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out RedPacketsID);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(RedPacketsID);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out RedPacketsID);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GET_RED_PACKET
    /// 返回 抢红包
    /// <summary>
    public partial class G2C_Get_Red_Packet : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Error);
            nbs.Write(Bonus);
            nbs.Write(GetMax);
            Info.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Error);
            nbs.Read(out Bonus);
            nbs.Read(out GetMax);
            Info.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Error);
            nbs.Write(Bonus);
            nbs.Write(GetMax);
            Info.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Error);
            nbs.Read(out Bonus);
            nbs.Read(out GetMax);
            Info.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MANSIONBOSS_INFO
    /// 请求 获取府Boss信息
    /// <summary>
    public partial class C2G_MansionBoss_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MansionId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MansionId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MansionId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MansionId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MANSIONBOSS_INFO
    /// 返回 获取府Boss信息
    /// <summary>
    public partial class G2C_MansionBoss_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(IsOpen);
            nbs.Write(OpenCount);
            nbs.Write(ConfigID);
            nbs.Write(EndTs);
            nbs.Write(Count);
            nbs.Write(CountMax);
            nbs.Write(HpCur);
            nbs.Write(Rank);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out IsOpen);
            nbs.Read(out OpenCount);
            nbs.Read(out ConfigID);
            nbs.Read(out EndTs);
            nbs.Read(out Count);
            nbs.Read(out CountMax);
            nbs.Read(out HpCur);
            nbs.Read(out Rank);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(IsOpen);
            nbs.Write(OpenCount);
            nbs.Write(ConfigID);
            nbs.Write(EndTs);
            nbs.Write(Count);
            nbs.Write(CountMax);
            nbs.Write(HpCur);
            nbs.Write(Rank);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out IsOpen);
            nbs.Read(out OpenCount);
            nbs.Read(out ConfigID);
            nbs.Read(out EndTs);
            nbs.Read(out Count);
            nbs.Read(out CountMax);
            nbs.Read(out HpCur);
            nbs.Read(out Rank);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MANSIONBOSS_OPEN
    /// 请求 处理府Boss开启
    /// <summary>
    public partial class C2G_MansionBoss_Open : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MansionId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MansionId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MansionId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MansionId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MANSIONBOSS_OPEN
    /// 返回 处理府Boss开启
    /// <summary>
    public partial class G2C_MansionBoss_Open : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// Boss排行玩家信息
    /// <summary>
    public partial class CLS_MansionBoss_PlayerInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(Headindex);
            nbs.Write(Name);
            nbs.Write(Hurt);
            nbs.Write(HurtPer);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out Headindex);
            nbs.Read(out Name);
            nbs.Read(out Hurt);
            nbs.Read(out HurtPer);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MANSIONBOSS_TOP
    /// 请求 获取府Boss伤害排行
    /// <summary>
    public partial class C2G_MansionBoss_Top : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MansionId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MansionId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MansionId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MansionId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MANSIONBOSS_TOP
    /// 返回 获取府Boss伤害排行
    /// <summary>
    public partial class G2C_MansionBoss_Top : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TopPlayers.Count);
            foreach (var k in TopPlayers)
            {
                k.Serialize(ref nbs);
            }
            player.Serialize(ref nbs);
            nbs.Write(Rank);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1837 = nbs.ReadInt();
            for (int k = 0; k < var1837; k++)
            {
                var var1838 = new CLS_MansionBoss_PlayerInfo(); var1838.Unserialize(ref nbs);TopPlayers.Add(var1838);
            }
            player.Unserialize(ref nbs);
            nbs.Read(out Rank);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(TopPlayers.Count);
            foreach (var k in TopPlayers)
            {
                k.Serialize(ref nbs);
            }
            player.Serialize(ref nbs);
            nbs.Write(Rank);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1841 = nbs.ReadInt();
            for (int k = 0; k < var1841; k++)
            {
                var var1842 = new CLS_MansionBoss_PlayerInfo(); var1842.Unserialize(ref nbs);TopPlayers.Add(var1842);
            }
            player.Unserialize(ref nbs);
            nbs.Read(out Rank);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MANSIONBOSS_BATTLE
    /// 请求 处理府Boss进入战斗
    /// <summary>
    public partial class C2G_MansionBoss_Battle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MansionId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MansionId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MansionId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MansionId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MANSIONBOSS_BATTLE
    /// 返回 处理府Boss进入战斗
    /// <summary>
    public partial class G2C_MansionBoss_Battle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MANSIONBOSS_BALANCE
    /// 请求 处理府Boss战斗结算
    /// <summary>
    public partial class C2G_MansionBoss_Balance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MansionId);
            nbs.Write(HurtHp);
            nbs.Write(BattleKey);
            nbs.Write(PlayerExpendHp);
            nbs.Write(DictExpendHp.Count);
            foreach (var kvp in DictExpendHp)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(State);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MansionId);
            nbs.Read(out HurtHp);
            nbs.Read(out BattleKey);
            nbs.Read(out PlayerExpendHp);
            int var1851 = nbs.ReadInt();
            for (int k = 0; k < var1851; k++)
            {
                long var1852 = nbs.ReadLong(); int var1853 = nbs.ReadInt(); DictExpendHp.Add(var1852, var1853); 
            }
            nbs.Read(out State);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MansionId);
            nbs.Write(HurtHp);
            nbs.Write(BattleKey);
            nbs.Write(PlayerExpendHp);
            nbs.Write(DictExpendHp.Count);
            foreach (var kvp in DictExpendHp)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(State);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MansionId);
            nbs.Read(out HurtHp);
            nbs.Read(out BattleKey);
            nbs.Read(out PlayerExpendHp);
            int var1859 = nbs.ReadInt();
            for (int k = 0; k < var1859; k++)
            {
                long var1860 = nbs.ReadLong(); int var1861 = nbs.ReadInt(); DictExpendHp.Add(var1860, var1861); 
            }
            nbs.Read(out State);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MANSIONBOSS_BALANCE
    /// 返回 处理府Boss战斗结算
    /// <summary>
    public partial class G2C_MansionBoss_Balance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MANSIONBOSS_TAKEBALANCE
    /// 返回 处理府Boss主动战斗结算
    /// <summary>
    public partial class G2C_MansionBoss_TakeBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_MANSIONBOSS_BUFF
    /// 请求 处理府BossBuff信息和购买
    /// <summary>
    public partial class C2G_MansionBoss_Buff : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MansionId);
            nbs.Write(Config);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MansionId);
            nbs.Read(out Config);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MansionId);
            nbs.Write(Config);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MansionId);
            nbs.Read(out Config);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_MANSIONBOSS_BUFF
    /// 返回 处理府BossBuff信息和购买
    /// <summary>
    public partial class G2C_MansionBoss_Buff : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BuffIds.Count);
            foreach (var k in BuffIds)
            {
                nbs.Write(k);
            }
            nbs.Write(CurBuff.Count);
            foreach (var kvp in CurBuff)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(FuYu);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1867 = nbs.ReadInt();
            for (int k = 0; k < var1867; k++)
            {
                int var1868 = nbs.ReadInt();BuffIds.Add(var1868);
            }
            int var1869 = nbs.ReadInt();
            for (int k = 0; k < var1869; k++)
            {
                int var1870 = nbs.ReadInt(); long var1871 = nbs.ReadLong(); CurBuff.Add(var1870, var1871); 
            }
            nbs.Read(out FuYu);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BuffIds.Count);
            foreach (var k in BuffIds)
            {
                nbs.Write(k);
            }
            nbs.Write(CurBuff.Count);
            foreach (var kvp in CurBuff)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(FuYu);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1873 = nbs.ReadInt();
            for (int k = 0; k < var1873; k++)
            {
                int var1874 = nbs.ReadInt();BuffIds.Add(var1874);
            }
            int var1875 = nbs.ReadInt();
            for (int k = 0; k < var1875; k++)
            {
                int var1876 = nbs.ReadInt(); long var1877 = nbs.ReadLong(); CurBuff.Add(var1876, var1877); 
            }
            nbs.Read(out FuYu);
        }
    };
    /// <summary>
    /// 单条活跃状态
    /// <summary>
    public partial class CLS_Liveness_Info
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Num);
            nbs.Write(DictAwardState.Count);
            foreach (var kvp in DictAwardState)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Num);
            int var1880 = nbs.ReadInt();
            for (int k = 0; k < var1880; k++)
            {
                int var1881 = nbs.ReadInt(); bool var1882 = nbs.ReadBool(); DictAwardState.Add(var1881, var1882); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_GETACTIVE
    /// 请求 府活跃度
    /// <summary>
    public partial class C2G_Guild_GetActive : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(GuildId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out GuildId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(GuildId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out GuildId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_GETACTIVE
    /// 返回 府活跃度
    /// <summary>
    public partial class G2C_Guild_GetActive : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictLivenessInfo.Count);
            foreach (var kvp in DictLivenessInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1885 = nbs.ReadInt();
            for (int k = 0; k < var1885; k++)
            {
                int var1886 = nbs.ReadInt(); var var1887 = new CLS_Liveness_Info(); var1887.Unserialize(ref nbs); DictLivenessInfo.Add(var1886, var1887); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictLivenessInfo.Count);
            foreach (var kvp in DictLivenessInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1888 = nbs.ReadInt();
            for (int k = 0; k < var1888; k++)
            {
                int var1889 = nbs.ReadInt(); var var1890 = new CLS_Liveness_Info(); var1890.Unserialize(ref nbs); DictLivenessInfo.Add(var1889, var1890); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_ACTIVEAWARD
    /// 请求 府活跃度奖励领取
    /// <summary>
    public partial class C2G_Guild_ActiveAward : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(GuildId);
            nbs.Write(BoxID);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out GuildId);
            nbs.Read(out BoxID);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(GuildId);
            nbs.Write(BoxID);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out GuildId);
            nbs.Read(out BoxID);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_ACTIVEAWARD
    /// 返回 府活跃度奖励领取
    /// <summary>
    public partial class G2C_Guild_ActiveAward : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(DictLivenessInfo.Count);
            foreach (var kvp in DictLivenessInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1895 = nbs.ReadInt();
            for (int k = 0; k < var1895; k++)
            {
                var var1896 = new CLS_AwardItem(); var1896.Unserialize(ref nbs);ListAward.Add(var1896);
            }
            int var1897 = nbs.ReadInt();
            for (int k = 0; k < var1897; k++)
            {
                int var1898 = nbs.ReadInt(); var var1899 = new CLS_Liveness_Info(); var1899.Unserialize(ref nbs); DictLivenessInfo.Add(var1898, var1899); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(DictLivenessInfo.Count);
            foreach (var kvp in DictLivenessInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1900 = nbs.ReadInt();
            for (int k = 0; k < var1900; k++)
            {
                var var1901 = new CLS_AwardItem(); var1901.Unserialize(ref nbs);ListAward.Add(var1901);
            }
            int var1902 = nbs.ReadInt();
            for (int k = 0; k < var1902; k++)
            {
                int var1903 = nbs.ReadInt(); var var1904 = new CLS_Liveness_Info(); var1904.Unserialize(ref nbs); DictLivenessInfo.Add(var1903, var1904); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_ACTIVEAWARDALL
    /// 请求 府活跃度奖励全部领取
    /// <summary>
    public partial class C2G_Guild_ActiveAwardAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_ACTIVEAWARDALL
    /// 返回 府活跃度奖励全部领取
    /// <summary>
    public partial class G2C_Guild_ActiveAwardAll : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(DictLivenessInfo.Count);
            foreach (var kvp in DictLivenessInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1905 = nbs.ReadInt();
            for (int k = 0; k < var1905; k++)
            {
                var var1906 = new CLS_AwardItem(); var1906.Unserialize(ref nbs);ListAward.Add(var1906);
            }
            int var1907 = nbs.ReadInt();
            for (int k = 0; k < var1907; k++)
            {
                int var1908 = nbs.ReadInt(); var var1909 = new CLS_Liveness_Info(); var1909.Unserialize(ref nbs); DictLivenessInfo.Add(var1908, var1909); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(DictLivenessInfo.Count);
            foreach (var kvp in DictLivenessInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1910 = nbs.ReadInt();
            for (int k = 0; k < var1910; k++)
            {
                var var1911 = new CLS_AwardItem(); var1911.Unserialize(ref nbs);ListAward.Add(var1911);
            }
            int var1912 = nbs.ReadInt();
            for (int k = 0; k < var1912; k++)
            {
                int var1913 = nbs.ReadInt(); var var1914 = new CLS_Liveness_Info(); var1914.Unserialize(ref nbs); DictLivenessInfo.Add(var1913, var1914); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_SCIENCEINFO
    /// 请求 书院信息
    /// <summary>
    public partial class C2G_Guild_ScienceInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_SCIENCEINFO
    /// 返回 书院信息
    /// <summary>
    public partial class G2C_Guild_ScienceInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListTechnology.Count);
            foreach (var k in ListTechnology)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1915 = nbs.ReadInt();
            for (int k = 0; k < var1915; k++)
            {
                int var1916 = nbs.ReadInt();ListTechnology.Add(var1916);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListTechnology.Count);
            foreach (var k in ListTechnology)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1917 = nbs.ReadInt();
            for (int k = 0; k < var1917; k++)
            {
                int var1918 = nbs.ReadInt();ListTechnology.Add(var1918);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_SCIENCELEVELUP
    /// 请求 势力科技升级
    /// <summary>
    public partial class C2G_Guild_ScienceLevelUp : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ID);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out ID);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ID);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out ID);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_SCIENCELEVELUP
    /// 返回 势力科技升级
    /// <summary>
    public partial class G2C_Guild_ScienceLevelUp : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 势力商店信息
    /// <summary>
    public partial class CLS_GuildShopInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(GoodsInfo.Count);
            foreach (var k in GoodsInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(Contribution);
            nbs.Write(RefreshFreeTotal);
            nbs.Write(RefreshTotal);
            nbs.Write(RefreshItemCount);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            int var1921 = nbs.ReadInt();
            for (int k = 0; k < var1921; k++)
            {
                var var1922 = new CLS_ShopGoodsInfo(); var1922.Unserialize(ref nbs);GoodsInfo.Add(var1922);
            }
            nbs.Read(out Contribution);
            nbs.Read(out RefreshFreeTotal);
            nbs.Read(out RefreshTotal);
            nbs.Read(out RefreshItemCount);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_SHOPINFO
    /// 请求 处理势力商店信息
    /// <summary>
    public partial class C2G_Guild_ShopInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_SHOPINFO
    /// 返回 处理势力商店信息
    /// <summary>
    public partial class G2C_Guild_ShopInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ShopInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ShopInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ShopInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ShopInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_SHOPBUY
    /// 请求 处理势力商店购买
    /// <summary>
    public partial class C2G_Guild_ShopBuy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Config);
            nbs.Write(Amount);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Config);
            nbs.Read(out Amount);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Config);
            nbs.Write(Amount);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Config);
            nbs.Read(out Amount);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_SHOPBUY
    /// 返回 处理势力商店购买
    /// <summary>
    public partial class G2C_Guild_ShopBuy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ShopInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ShopInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ShopInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ShopInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILD_SHOPREFRESH
    /// 请求 处理势力商店刷新
    /// <summary>
    public partial class C2G_Guild_ShopRefresh : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILD_SHOPREFRESH
    /// 返回 处理势力商店刷新
    /// <summary>
    public partial class G2C_Guild_ShopRefresh : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ShopInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ShopInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            ShopInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            ShopInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 势力成员俸禄信息
    /// <summary>
    public partial class CLS_GuildSalaryMbsInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            PubPlayerBase.Serialize(ref nbs);
            nbs.Write(ContributionWeekLast);
            nbs.Write(ContributionWeekThis);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            PubPlayerBase.Unserialize(ref nbs);
            nbs.Read(out ContributionWeekLast);
            nbs.Read(out ContributionWeekThis);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILDSALARY_LISTMBS
    /// 请求 俸禄成员列表
    /// <summary>
    public partial class C2G_GuildSalary_ListMbs : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILDSALARY_LISTMBS
    /// 返回 俸禄成员列表
    /// <summary>
    public partial class G2C_GuildSalary_ListMbs : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DtAutoBalance);
            nbs.Write(ListMember.Count);
            foreach (var k in ListMember)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DtAutoBalance);
            int var1941 = nbs.ReadInt();
            for (int k = 0; k < var1941; k++)
            {
                var var1942 = new CLS_GuildSalaryMbsInfo(); var1942.Unserialize(ref nbs);ListMember.Add(var1942);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DtAutoBalance);
            nbs.Write(ListMember.Count);
            foreach (var k in ListMember)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DtAutoBalance);
            int var1944 = nbs.ReadInt();
            for (int k = 0; k < var1944; k++)
            {
                var var1945 = new CLS_GuildSalaryMbsInfo(); var1945.Unserialize(ref nbs);ListMember.Add(var1945);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILDSALARY_PAY
    /// 请求 俸禄发放
    /// <summary>
    public partial class C2G_GuildSalary_Pay : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictPay.Count);
            foreach (var kvp in DictPay)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1946 = nbs.ReadInt();
            for (int k = 0; k < var1946; k++)
            {
                long var1947 = nbs.ReadLong(); int var1948 = nbs.ReadInt(); DictPay.Add(var1947, var1948); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictPay.Count);
            foreach (var kvp in DictPay)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1949 = nbs.ReadInt();
            for (int k = 0; k < var1949; k++)
            {
                long var1950 = nbs.ReadLong(); int var1951 = nbs.ReadInt(); DictPay.Add(var1950, var1951); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILDSALARY_PAY
    /// 返回 俸禄发放
    /// <summary>
    public partial class G2C_GuildSalary_Pay : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictPay.Count);
            foreach (var kvp in DictPay)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1952 = nbs.ReadInt();
            for (int k = 0; k < var1952; k++)
            {
                long var1953 = nbs.ReadLong(); int var1954 = nbs.ReadInt(); DictPay.Add(var1953, var1954); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictPay.Count);
            foreach (var kvp in DictPay)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1955 = nbs.ReadInt();
            for (int k = 0; k < var1955; k++)
            {
                long var1956 = nbs.ReadLong(); int var1957 = nbs.ReadInt(); DictPay.Add(var1956, var1957); 
            }
        }
    };
    /// <summary>
    /// 势力城市俸禄信息
    /// <summary>
    public partial class CLS_GuildSalaryCityInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(LeaderPuid);
            nbs.Write(LeaderName);
            nbs.Write(Prosperity);
            nbs.Write(Revenue);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out LeaderPuid);
            nbs.Read(out LeaderName);
            nbs.Read(out Prosperity);
            nbs.Read(out Revenue);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GUILDSALARY_LISTCITY
    /// 请求 俸禄城市列表
    /// <summary>
    public partial class C2G_GuildSalary_ListCity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GUILDSALARY_LISTCITY
    /// 返回 俸禄城市列表
    /// <summary>
    public partial class G2C_GuildSalary_ListCity : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListCity.Count);
            foreach (var k in ListCity)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1963 = nbs.ReadInt();
            for (int k = 0; k < var1963; k++)
            {
                var var1964 = new CLS_GuildSalaryCityInfo(); var1964.Unserialize(ref nbs);ListCity.Add(var1964);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListCity.Count);
            foreach (var k in ListCity)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1965 = nbs.ReadInt();
            for (int k = 0; k < var1965; k++)
            {
                var var1966 = new CLS_GuildSalaryCityInfo(); var1966.Unserialize(ref nbs);ListCity.Add(var1966);
            }
        }
    };
    /// <summary>
    /// 圣女卫队阵亡信息
    /// <summary>
    public partial class CLS_GoddessArmy
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(index);
            nbs.Write(ReviveTime);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out index);
            nbs.Read(out ReviveTime);
        }
    };
    /// <summary>
    /// 圣女信息
    /// <summary>
    public partial class CLS_GoddessInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(PlayerId);
            nbs.Write(PlayerName);
            nbs.Write(Advance);
            nbs.Write(Level);
            nbs.Write(Exp);
            nbs.Write(CityId);
            nbs.Write(bCaptive);
            nbs.Write(OtherId);
            nbs.Write(OtherName);
            nbs.Write(FreeTime);
            nbs.Write(ArmyInfo.Count);
            foreach (var k in ArmyInfo)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out PlayerId);
            nbs.Read(out PlayerName);
            nbs.Read(out Advance);
            nbs.Read(out Level);
            nbs.Read(out Exp);
            nbs.Read(out CityId);
            nbs.Read(out bCaptive);
            nbs.Read(out OtherId);
            nbs.Read(out OtherName);
            nbs.Read(out FreeTime);
            int var1979 = nbs.ReadInt();
            for (int k = 0; k < var1979; k++)
            {
                var var1980 = new CLS_GoddessArmy(); var1980.Unserialize(ref nbs);ArmyInfo.Add(var1980);
            }
        }
    };
    /// <summary>
    /// 圣女捐献信息
    /// <summary>
    public partial class CLS_GoddessDonate
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(PlayerName);
            nbs.Write(Donate);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out PlayerName);
            nbs.Read(out Donate);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GODDESS_SENIORITY
    /// 请求 圣女资格
    /// <summary>
    public partial class C2G_Goddess_Seniority : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GODDESS_SENIORITY
    /// 返回 圣女资格
    /// <summary>
    public partial class G2C_Goddess_Seniority : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Info.Count);
            foreach (var k in Info)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1983 = nbs.ReadInt();
            for (int k = 0; k < var1983; k++)
            {
                var var1984 = new CLS_GuildMbsInfo(); var1984.Unserialize(ref nbs);Info.Add(var1984);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Info.Count);
            foreach (var k in Info)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var1985 = nbs.ReadInt();
            for (int k = 0; k < var1985; k++)
            {
                var var1986 = new CLS_GuildMbsInfo(); var1986.Unserialize(ref nbs);Info.Add(var1986);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GODDESS_GETINFO
    /// 请求 圣女信息
    /// <summary>
    public partial class C2G_Goddess_GetInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GODDESS_GETINFO
    /// 返回 圣女信息
    /// <summary>
    public partial class G2C_Goddess_GetInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
            nbs.Write(DonateInfo.Count);
            foreach (var k in DonateInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(DictDonate.Count);
            foreach (var kvp in DictDonate)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
            int var1988 = nbs.ReadInt();
            for (int k = 0; k < var1988; k++)
            {
                var var1989 = new CLS_GoddessDonate(); var1989.Unserialize(ref nbs);DonateInfo.Add(var1989);
            }
            int var1990 = nbs.ReadInt();
            for (int k = 0; k < var1990; k++)
            {
                int var1991 = nbs.ReadInt(); int var1992 = nbs.ReadInt(); DictDonate.Add(var1991, var1992); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
            nbs.Write(DonateInfo.Count);
            foreach (var k in DonateInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(DictDonate.Count);
            foreach (var kvp in DictDonate)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
            int var1994 = nbs.ReadInt();
            for (int k = 0; k < var1994; k++)
            {
                var var1995 = new CLS_GoddessDonate(); var1995.Unserialize(ref nbs);DonateInfo.Add(var1995);
            }
            int var1996 = nbs.ReadInt();
            for (int k = 0; k < var1996; k++)
            {
                int var1997 = nbs.ReadInt(); int var1998 = nbs.ReadInt(); DictDonate.Add(var1997, var1998); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GODDESS_CHOOSE
    /// 请求 圣女选择
    /// <summary>
    public partial class C2G_Goddess_Choose : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PlayerId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PlayerId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PlayerId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PlayerId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GODDESS_CHOOSE
    /// 返回 圣女选择
    /// <summary>
    public partial class G2C_Goddess_Choose : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GODDESS_DONATE
    /// 请求 圣女捐献
    /// <summary>
    public partial class C2G_Goddess_Donate : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DonateId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DonateId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DonateId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DonateId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GODDESS_DONATE
    /// 返回 圣女捐献
    /// <summary>
    public partial class G2C_Goddess_Donate : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Advance);
            nbs.Write(Level);
            nbs.Write(Exp);
            nbs.Write(DonateInfo.Count);
            foreach (var k in DonateInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(DictDonate.Count);
            foreach (var kvp in DictDonate)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Advance);
            nbs.Read(out Level);
            nbs.Read(out Exp);
            int var2008 = nbs.ReadInt();
            for (int k = 0; k < var2008; k++)
            {
                var var2009 = new CLS_GoddessDonate(); var2009.Unserialize(ref nbs);DonateInfo.Add(var2009);
            }
            int var2010 = nbs.ReadInt();
            for (int k = 0; k < var2010; k++)
            {
                int var2011 = nbs.ReadInt(); int var2012 = nbs.ReadInt(); DictDonate.Add(var2011, var2012); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Advance);
            nbs.Write(Level);
            nbs.Write(Exp);
            nbs.Write(DonateInfo.Count);
            foreach (var k in DonateInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(DictDonate.Count);
            foreach (var kvp in DictDonate)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Advance);
            nbs.Read(out Level);
            nbs.Read(out Exp);
            int var2016 = nbs.ReadInt();
            for (int k = 0; k < var2016; k++)
            {
                var var2017 = new CLS_GoddessDonate(); var2017.Unserialize(ref nbs);DonateInfo.Add(var2017);
            }
            int var2018 = nbs.ReadInt();
            for (int k = 0; k < var2018; k++)
            {
                int var2019 = nbs.ReadInt(); int var2020 = nbs.ReadInt(); DictDonate.Add(var2019, var2020); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GODDESS_SAVE
    /// 请求 圣女赎回
    /// <summary>
    public partial class C2G_Goddess_Save : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DonateId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DonateId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DonateId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DonateId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GODDESS_SAVE
    /// 返回 圣女赎回
    /// <summary>
    public partial class G2C_Goddess_Save : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
            nbs.Write(DonateInfo.Count);
            foreach (var k in DonateInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(DictDonate.Count);
            foreach (var kvp in DictDonate)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
            int var2024 = nbs.ReadInt();
            for (int k = 0; k < var2024; k++)
            {
                var var2025 = new CLS_GoddessDonate(); var2025.Unserialize(ref nbs);DonateInfo.Add(var2025);
            }
            int var2026 = nbs.ReadInt();
            for (int k = 0; k < var2026; k++)
            {
                int var2027 = nbs.ReadInt(); int var2028 = nbs.ReadInt(); DictDonate.Add(var2027, var2028); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            Info.Serialize(ref nbs);
            nbs.Write(DonateInfo.Count);
            foreach (var k in DonateInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(DictDonate.Count);
            foreach (var kvp in DictDonate)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            Info.Unserialize(ref nbs);
            int var2030 = nbs.ReadInt();
            for (int k = 0; k < var2030; k++)
            {
                var var2031 = new CLS_GoddessDonate(); var2031.Unserialize(ref nbs);DonateInfo.Add(var2031);
            }
            int var2032 = nbs.ReadInt();
            for (int k = 0; k < var2032; k++)
            {
                int var2033 = nbs.ReadInt(); int var2034 = nbs.ReadInt(); DictDonate.Add(var2033, var2034); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GODDESS_DEFEND
    /// 请求 圣女驻守
    /// <summary>
    public partial class C2G_Goddess_Defend : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GODDESS_DEFEND
    /// 返回 圣女驻守
    /// <summary>
    public partial class G2C_Goddess_Defend : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_WARRIOR_INBATTLE
    /// 请求 武将上阵PVE
    /// <summary>
    public partial class C2G_Warrior_InBattle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListInBattle.Count);
            foreach (var k in ListInBattle)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2039 = nbs.ReadInt();
            for (int k = 0; k < var2039; k++)
            {
                long var2040 = nbs.ReadLong();ListInBattle.Add(var2040);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListInBattle.Count);
            foreach (var k in ListInBattle)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2041 = nbs.ReadInt();
            for (int k = 0; k < var2041; k++)
            {
                long var2042 = nbs.ReadLong();ListInBattle.Add(var2042);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_WARRIOR_INBATTLE
    /// 返回 武将上阵PVE
    /// <summary>
    public partial class G2C_Warrior_InBattle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 单个队伍信息
    /// <summary>
    public partial class CLS_ArmyInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(ArmyId);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out ArmyId);
            int var2044 = nbs.ReadInt();
            for (int k = 0; k < var2044; k++)
            {
                int var2045 = nbs.ReadInt(); long var2046 = nbs.ReadLong(); DictWarrior.Add(var2045, var2046); 
            }
        }
    };
    /// <summary>
    /// PVE某种战斗类型队伍信息
    /// <summary>
    public partial class CLS_PveTypeArmyInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(PveType);
            nbs.Write(PveArmyId);
            nbs.Write(DictArmyInfo.Count);
            foreach (var kvp in DictArmyInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out PveType);
            nbs.Read(out PveArmyId);
            int var2049 = nbs.ReadInt();
            for (int k = 0; k < var2049; k++)
            {
                int var2050 = nbs.ReadInt(); var var2051 = new CLS_ArmyInfo(); var2051.Unserialize(ref nbs); DictArmyInfo.Add(var2050, var2051); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_PVE_ARMYINFO
    /// 请求 PVE阵容信息
    /// <summary>
    public partial class C2G_Pve_ArmyInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_PVE_ARMYINFO
    /// 返回 PVE阵容信息
    /// <summary>
    public partial class G2C_Pve_ArmyInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
            nbs.Write(PveArmyId);
            nbs.Write(DictArmyInfo.Count);
            foreach (var kvp in DictArmyInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
            nbs.Read(out PveArmyId);
            int var2056 = nbs.ReadInt();
            for (int k = 0; k < var2056; k++)
            {
                int var2057 = nbs.ReadInt(); var var2058 = new CLS_ArmyInfo(); var2058.Unserialize(ref nbs); DictArmyInfo.Add(var2057, var2058); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
            nbs.Write(PveArmyId);
            nbs.Write(DictArmyInfo.Count);
            foreach (var kvp in DictArmyInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
            nbs.Read(out PveArmyId);
            int var2061 = nbs.ReadInt();
            for (int k = 0; k < var2061; k++)
            {
                int var2062 = nbs.ReadInt(); var var2063 = new CLS_ArmyInfo(); var2063.Unserialize(ref nbs); DictArmyInfo.Add(var2062, var2063); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_PVE_ARMYCHANGE
    /// 请求 PVE阵容更改
    /// <summary>
    public partial class C2G_Pve_ArmyChange : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
            nbs.Write(PveArmyId);
            nbs.Write(DictArmyInfo.Count);
            foreach (var kvp in DictArmyInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
            nbs.Read(out PveArmyId);
            int var2066 = nbs.ReadInt();
            for (int k = 0; k < var2066; k++)
            {
                int var2067 = nbs.ReadInt(); var var2068 = new CLS_ArmyInfo(); var2068.Unserialize(ref nbs); DictArmyInfo.Add(var2067, var2068); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
            nbs.Write(PveArmyId);
            nbs.Write(DictArmyInfo.Count);
            foreach (var kvp in DictArmyInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
            nbs.Read(out PveArmyId);
            int var2071 = nbs.ReadInt();
            for (int k = 0; k < var2071; k++)
            {
                int var2072 = nbs.ReadInt(); var var2073 = new CLS_ArmyInfo(); var2073.Unserialize(ref nbs); DictArmyInfo.Add(var2072, var2073); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_PVE_ARMYCHANGE
    /// 返回 PVE阵容更改
    /// <summary>
    public partial class G2C_Pve_ArmyChange : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_PVE_GOBATTLE
    /// 请求 PVE出征
    /// <summary>
    public partial class C2G_Pve_GoBattle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
            nbs.Write(BattleId);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
            nbs.Read(out BattleId);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
            nbs.Write(BattleId);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
            nbs.Read(out BattleId);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_PVE_GOBATTLE
    /// 返回 PVE出征
    /// <summary>
    public partial class G2C_Pve_GoBattle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
            nbs.Write(BattleId);
            nbs.Write(BattleCode);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
            nbs.Read(out BattleId);
            nbs.Read(out BattleCode);
            int var2083 = nbs.ReadInt();
            for (int k = 0; k < var2083; k++)
            {
                int var2084 = nbs.ReadInt(); var var2085 = new CLS_WarriorInfo(); var2085.Unserialize(ref nbs); DictWarrior.Add(var2084, var2085); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
            nbs.Write(BattleId);
            nbs.Write(BattleCode);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
            nbs.Read(out BattleId);
            nbs.Read(out BattleCode);
            int var2089 = nbs.ReadInt();
            for (int k = 0; k < var2089; k++)
            {
                int var2090 = nbs.ReadInt(); var var2091 = new CLS_WarriorInfo(); var2091.Unserialize(ref nbs); DictWarrior.Add(var2090, var2091); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_PVE_BATTLEBALANCE
    /// 推送 战斗结束武将数据
    /// <summary>
    public partial class G2C_Pve_BattleBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
            int var2093 = nbs.ReadInt();
            for (int k = 0; k < var2093; k++)
            {
                int var2094 = nbs.ReadInt(); var var2095 = new CLS_WarriorInfo(); var2095.Unserialize(ref nbs); DictWarrior.Add(var2094, var2095); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PveType);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PveType);
            int var2097 = nbs.ReadInt();
            for (int k = 0; k < var2097; k++)
            {
                int var2098 = nbs.ReadInt(); var var2099 = new CLS_WarriorInfo(); var2099.Unserialize(ref nbs); DictWarrior.Add(var2098, var2099); 
            }
        }
    };
    /// <summary>
    /// 剧情关卡结果
    /// <summary>
    public partial class CLS_StoryState
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(ListState.Count);
            foreach (var k in ListState)
            {
                nbs.Write(k);
            }
            nbs.Write(Ticks);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            int var2100 = nbs.ReadInt();
            for (int k = 0; k < var2100; k++)
            {
                bool var2101 = nbs.ReadBool();ListState.Add(var2101);
            }
            nbs.Read(out Ticks);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GAMELEVELSTORY_INFO
    /// 请求 剧情关卡列表
    /// <summary>
    public partial class C2G_GameLevelStory_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(StoryID);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out StoryID);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(StoryID);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out StoryID);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GAMELEVELSTORY_INFO
    /// 返回 剧情关卡列表
    /// <summary>
    public partial class G2C_GameLevelStory_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DicStory.Count);
            foreach (var kvp in DicStory)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(Power);
            nbs.Write(RecoveryTime);
            nbs.Write(ListReward.Count);
            foreach (var k in ListReward)
            {
                nbs.Write(k);
            }
            nbs.Write(BuyCount);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2105 = nbs.ReadInt();
            for (int k = 0; k < var2105; k++)
            {
                int var2106 = nbs.ReadInt(); var var2107 = new CLS_StoryState(); var2107.Unserialize(ref nbs); DicStory.Add(var2106, var2107); 
            }
            nbs.Read(out Power);
            nbs.Read(out RecoveryTime);
            int var2110 = nbs.ReadInt();
            for (int k = 0; k < var2110; k++)
            {
                bool var2111 = nbs.ReadBool();ListReward.Add(var2111);
            }
            nbs.Read(out BuyCount);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DicStory.Count);
            foreach (var kvp in DicStory)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(Power);
            nbs.Write(RecoveryTime);
            nbs.Write(ListReward.Count);
            foreach (var k in ListReward)
            {
                nbs.Write(k);
            }
            nbs.Write(BuyCount);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2113 = nbs.ReadInt();
            for (int k = 0; k < var2113; k++)
            {
                int var2114 = nbs.ReadInt(); var var2115 = new CLS_StoryState(); var2115.Unserialize(ref nbs); DicStory.Add(var2114, var2115); 
            }
            nbs.Read(out Power);
            nbs.Read(out RecoveryTime);
            int var2118 = nbs.ReadInt();
            for (int k = 0; k < var2118; k++)
            {
                bool var2119 = nbs.ReadBool();ListReward.Add(var2119);
            }
            nbs.Read(out BuyCount);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GAMELEVELSTORY_BATTLE
    /// 请求 剧情副本战斗
    /// <summary>
    public partial class C2G_GameLevelStory_Battle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GAMELEVELSTORY_BATTLE
    /// 返回 剧情副本战斗
    /// <summary>
    public partial class G2C_GameLevelStory_Battle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GAMELEVELSTORY_BALANCE
    /// 请求 剧情副本结算
    /// <summary>
    public partial class C2G_GameLevelStory_Balance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleKey);
            nbs.Write(PlayerExpendHp);
            nbs.Write(DictExpendHp.Count);
            foreach (var kvp in DictExpendHp)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(ListState.Count);
            foreach (var k in ListState)
            {
                nbs.Write(k);
            }
            nbs.Write(State);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleKey);
            nbs.Read(out PlayerExpendHp);
            int var2127 = nbs.ReadInt();
            for (int k = 0; k < var2127; k++)
            {
                long var2128 = nbs.ReadLong(); int var2129 = nbs.ReadInt(); DictExpendHp.Add(var2128, var2129); 
            }
            int var2130 = nbs.ReadInt();
            for (int k = 0; k < var2130; k++)
            {
                bool var2131 = nbs.ReadBool();ListState.Add(var2131);
            }
            nbs.Read(out State);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleKey);
            nbs.Write(PlayerExpendHp);
            nbs.Write(DictExpendHp.Count);
            foreach (var kvp in DictExpendHp)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(ListState.Count);
            foreach (var k in ListState)
            {
                nbs.Write(k);
            }
            nbs.Write(State);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleKey);
            nbs.Read(out PlayerExpendHp);
            int var2135 = nbs.ReadInt();
            for (int k = 0; k < var2135; k++)
            {
                long var2136 = nbs.ReadLong(); int var2137 = nbs.ReadInt(); DictExpendHp.Add(var2136, var2137); 
            }
            int var2138 = nbs.ReadInt();
            for (int k = 0; k < var2138; k++)
            {
                bool var2139 = nbs.ReadBool();ListState.Add(var2139);
            }
            nbs.Read(out State);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GAMELEVELSTORY_BALANCE
    /// 返回 剧情副本结算
    /// <summary>
    public partial class G2C_GameLevelStory_Balance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2141 = nbs.ReadInt();
            for (int k = 0; k < var2141; k++)
            {
                var var2142 = new CLS_AwardItem(); var2142.Unserialize(ref nbs);ListAward.Add(var2142);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2143 = nbs.ReadInt();
            for (int k = 0; k < var2143; k++)
            {
                var var2144 = new CLS_AwardItem(); var2144.Unserialize(ref nbs);ListAward.Add(var2144);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GAMELEVELSTORY_REWARD
    /// 请求 剧情副本领取奖励
    /// <summary>
    public partial class C2G_GameLevelStory_Reward : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(StoryID);
            nbs.Write(Index);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out StoryID);
            nbs.Read(out Index);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(StoryID);
            nbs.Write(Index);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out StoryID);
            nbs.Read(out Index);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GAMELEVELSTORY_REWARD
    /// 返回 剧情副本领取奖励
    /// <summary>
    public partial class G2C_GameLevelStory_Reward : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2149 = nbs.ReadInt();
            for (int k = 0; k < var2149; k++)
            {
                var var2150 = new CLS_AwardItem(); var2150.Unserialize(ref nbs);ListAward.Add(var2150);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2151 = nbs.ReadInt();
            for (int k = 0; k < var2151; k++)
            {
                var var2152 = new CLS_AwardItem(); var2152.Unserialize(ref nbs);ListAward.Add(var2152);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GAMELEVELSTORYBUYPOWER
    /// 请求 剧情副本购买体力
    /// <summary>
    public partial class C2G_GameLevelStoryBuyPower : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GAMELEVELSTORYBUYPOWER
    /// 返回 剧情副本购买体力
    /// <summary>
    public partial class G2C_GameLevelStoryBuyPower : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Power);
            nbs.Write(RecoveryTime);
            nbs.Write(BuyCount);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Power);
            nbs.Read(out RecoveryTime);
            nbs.Read(out BuyCount);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Power);
            nbs.Write(RecoveryTime);
            nbs.Write(BuyCount);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Power);
            nbs.Read(out RecoveryTime);
            nbs.Read(out BuyCount);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GAMELEVELSTORY
    /// 请求 剧情章节列表
    /// <summary>
    public partial class C2G_GameLevelStory : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GAMELEVELSTORY
    /// 返回 剧情章节列表
    /// <summary>
    public partial class G2C_GameLevelStory : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(StoryID);
            nbs.Write(Power);
            nbs.Write(RecoveryTime);
            nbs.Write(BuyCount);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out StoryID);
            nbs.Read(out Power);
            nbs.Read(out RecoveryTime);
            nbs.Read(out BuyCount);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(StoryID);
            nbs.Write(Power);
            nbs.Write(RecoveryTime);
            nbs.Write(BuyCount);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out StoryID);
            nbs.Read(out Power);
            nbs.Read(out RecoveryTime);
            nbs.Read(out BuyCount);
        }
    };
    /// <summary>
    /// 单层信息
    /// <summary>
    public partial class CLS_TowerInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(TowerState);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out TowerState);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_TOWER_INFO
    /// 请求 古塔信息
    /// <summary>
    public partial class C2G_Tower_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_TOWER_INFO
    /// 返回 古塔信息
    /// <summary>
    public partial class G2C_Tower_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(LevelStart);
            nbs.Write(TowerToken);
            nbs.Write(TowerTokenMax);
            nbs.Write(TowerTokenOnceUse);
            nbs.Write(ListTowerInfo.Count);
            foreach (var k in ListTowerInfo)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out LevelStart);
            nbs.Read(out TowerToken);
            nbs.Read(out TowerTokenMax);
            nbs.Read(out TowerTokenOnceUse);
            int var2173 = nbs.ReadInt();
            for (int k = 0; k < var2173; k++)
            {
                var var2174 = new CLS_TowerInfo(); var2174.Unserialize(ref nbs);ListTowerInfo.Add(var2174);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(LevelStart);
            nbs.Write(TowerToken);
            nbs.Write(TowerTokenMax);
            nbs.Write(TowerTokenOnceUse);
            nbs.Write(ListTowerInfo.Count);
            foreach (var k in ListTowerInfo)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out LevelStart);
            nbs.Read(out TowerToken);
            nbs.Read(out TowerTokenMax);
            nbs.Read(out TowerTokenOnceUse);
            int var2179 = nbs.ReadInt();
            for (int k = 0; k < var2179; k++)
            {
                var var2180 = new CLS_TowerInfo(); var2180.Unserialize(ref nbs);ListTowerInfo.Add(var2180);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_TOWER_BATTLE
    /// 请求 古塔战斗
    /// <summary>
    public partial class C2G_Tower_Battle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_TOWER_BATTLE
    /// 返回 古塔战斗
    /// <summary>
    public partial class G2C_Tower_Battle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_TOWER_BATTLEEND
    /// 请求 古塔战斗结束
    /// <summary>
    public partial class C2G_Tower_BattleEnd : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(BattleKey);
            nbs.Write(PlayerExpendHp);
            nbs.Write(DictExpendHp.Count);
            foreach (var kvp in DictExpendHp)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(State);
            nbs.Write(BattleRecord);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out BattleKey);
            nbs.Read(out PlayerExpendHp);
            int var2188 = nbs.ReadInt();
            for (int k = 0; k < var2188; k++)
            {
                long var2189 = nbs.ReadLong(); int var2190 = nbs.ReadInt(); DictExpendHp.Add(var2189, var2190); 
            }
            nbs.Read(out State);
            nbs.Read(out BattleRecord);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(BattleKey);
            nbs.Write(PlayerExpendHp);
            nbs.Write(DictExpendHp.Count);
            foreach (var kvp in DictExpendHp)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(State);
            nbs.Write(BattleRecord);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out BattleKey);
            nbs.Read(out PlayerExpendHp);
            int var2196 = nbs.ReadInt();
            for (int k = 0; k < var2196; k++)
            {
                long var2197 = nbs.ReadLong(); int var2198 = nbs.ReadInt(); DictExpendHp.Add(var2197, var2198); 
            }
            nbs.Read(out State);
            nbs.Read(out BattleRecord);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_TOWER_BATTLEEND
    /// 返回 古塔战斗结束
    /// <summary>
    public partial class G2C_Tower_BattleEnd : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var2202 = nbs.ReadInt();
            for (int k = 0; k < var2202; k++)
            {
                var var2203 = new CLS_AwardItem(); var2203.Unserialize(ref nbs);ListAward.Add(var2203);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            int var2205 = nbs.ReadInt();
            for (int k = 0; k < var2205; k++)
            {
                var var2206 = new CLS_AwardItem(); var2206.Unserialize(ref nbs);ListAward.Add(var2206);
            }
        }
    };
    /// <summary>
    /// Arena排行榜信息
    /// <summary>
    public partial class CLS_ArenaTopData
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Rank);
            nbs.Write(Puid);
            nbs.Write(Name);
            nbs.Write(GuildName);
            nbs.Write(Score);
            nbs.Write(HeadIndex);
            nbs.Write(Level);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Rank);
            nbs.Read(out Puid);
            nbs.Read(out Name);
            nbs.Read(out GuildName);
            nbs.Read(out Score);
            nbs.Read(out HeadIndex);
            nbs.Read(out Level);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ARENA_INFO
    /// 请求 获取竞技场信息
    /// <summary>
    public partial class C2G_Arena_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ARENA_INFO
    /// 返回 获取竞技场信息
    /// <summary>
    public partial class G2C_Arena_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Rank);
            nbs.Write(HistoryRank);
            nbs.Write(WinRate);
            nbs.Write(MatchTicks);
            nbs.Write(MaxTicks);
            nbs.Write(BuyMatchTicks);
            nbs.Write(ArenaMatchPlayers.Count);
            foreach (var k in ArenaMatchPlayers)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(TsEnd);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Rank);
            nbs.Read(out HistoryRank);
            nbs.Read(out WinRate);
            nbs.Read(out MatchTicks);
            nbs.Read(out MaxTicks);
            nbs.Read(out BuyMatchTicks);
            int var2220 = nbs.ReadInt();
            for (int k = 0; k < var2220; k++)
            {
                var var2221 = new CLS_ArenaTopData(); var2221.Unserialize(ref nbs);ArenaMatchPlayers.Add(var2221);
            }
            nbs.Read(out TsEnd);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Rank);
            nbs.Write(HistoryRank);
            nbs.Write(WinRate);
            nbs.Write(MatchTicks);
            nbs.Write(MaxTicks);
            nbs.Write(BuyMatchTicks);
            nbs.Write(ArenaMatchPlayers.Count);
            foreach (var k in ArenaMatchPlayers)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(TsEnd);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Rank);
            nbs.Read(out HistoryRank);
            nbs.Read(out WinRate);
            nbs.Read(out MatchTicks);
            nbs.Read(out MaxTicks);
            nbs.Read(out BuyMatchTicks);
            int var2229 = nbs.ReadInt();
            for (int k = 0; k < var2229; k++)
            {
                var var2230 = new CLS_ArenaTopData(); var2230.Unserialize(ref nbs);ArenaMatchPlayers.Add(var2230);
            }
            nbs.Read(out TsEnd);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ARENA_TOP
    /// 请求 获取竞技场排行榜
    /// <summary>
    public partial class C2G_Arena_TOP : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ARENA_TOP
    /// 返回 Arena排行榜
    /// <summary>
    public partial class G2C_Arena_TOP : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListArenaTopData.Count);
            foreach (var k in ListArenaTopData)
            {
                k.Serialize(ref nbs);
            }
            PlayerData.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2232 = nbs.ReadInt();
            for (int k = 0; k < var2232; k++)
            {
                var var2233 = new CLS_ArenaTopData(); var2233.Unserialize(ref nbs);ListArenaTopData.Add(var2233);
            }
            PlayerData.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListArenaTopData.Count);
            foreach (var k in ListArenaTopData)
            {
                k.Serialize(ref nbs);
            }
            PlayerData.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2235 = nbs.ReadInt();
            for (int k = 0; k < var2235; k++)
            {
                var var2236 = new CLS_ArenaTopData(); var2236.Unserialize(ref nbs);ListArenaTopData.Add(var2236);
            }
            PlayerData.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ARENAMATCH_REFRESH
    /// 请求 Arena刷新
    /// <summary>
    public partial class C2G_ArenaMatch_Refresh : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ARENAMATCH_REFRESH
    /// 返回 Arena刷新
    /// <summary>
    public partial class G2C_ArenaMatch_Refresh : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ARENAMATCH_BATTLE
    /// 请求 Arena战斗
    /// <summary>
    public partial class C2G_ArenaMatch_Battle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(index);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out index);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(index);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out index);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ARENAMATCH_BATTLE
    /// 返回 Arena战斗
    /// <summary>
    public partial class G2C_ArenaMatch_Battle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(StageId);
            nbs.Write(ListWarriorOther.Count);
            foreach (var k in ListWarriorOther)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out StageId);
            int var2241 = nbs.ReadInt();
            for (int k = 0; k < var2241; k++)
            {
                var var2242 = new CLS_WarriorInfo(); var2242.Unserialize(ref nbs);ListWarriorOther.Add(var2242);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(StageId);
            nbs.Write(ListWarriorOther.Count);
            foreach (var k in ListWarriorOther)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out StageId);
            int var2244 = nbs.ReadInt();
            for (int k = 0; k < var2244; k++)
            {
                var var2245 = new CLS_WarriorInfo(); var2245.Unserialize(ref nbs);ListWarriorOther.Add(var2245);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ARENAMATCH_BALANCE
    /// 请求 Arena结算
    /// <summary>
    public partial class C2G_ArenaMatch_Balance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleKey);
            nbs.Write(State);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleKey);
            nbs.Read(out State);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleKey);
            nbs.Write(State);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleKey);
            nbs.Read(out State);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ARENAMATCH_BALANCE
    /// 返回 Arena结算
    /// <summary>
    public partial class G2C_ArenaMatch_Balance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PlayerRank);
            nbs.Write(PlayerNewRank);
            nbs.Write(AwardItem.Count);
            foreach (var k in AwardItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PlayerRank);
            nbs.Read(out PlayerNewRank);
            int var2252 = nbs.ReadInt();
            for (int k = 0; k < var2252; k++)
            {
                var var2253 = new CLS_AwardItem(); var2253.Unserialize(ref nbs);AwardItem.Add(var2253);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PlayerRank);
            nbs.Write(PlayerNewRank);
            nbs.Write(AwardItem.Count);
            foreach (var k in AwardItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PlayerRank);
            nbs.Read(out PlayerNewRank);
            int var2256 = nbs.ReadInt();
            for (int k = 0; k < var2256; k++)
            {
                var var2257 = new CLS_AwardItem(); var2257.Unserialize(ref nbs);AwardItem.Add(var2257);
            }
        }
    };
    /// <summary>
    /// Arena战报单条信息
    /// <summary>
    public partial class CLS_ArenaBattleReport
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Victory);
            nbs.Write(IsAttack);
            nbs.Write(MatchPlayerName);
            nbs.Write(MatchPlayerHeadIndex);
            nbs.Write(GuildName);
            nbs.Write(Rank);
            nbs.Write(CurRank);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Victory);
            nbs.Read(out IsAttack);
            nbs.Read(out MatchPlayerName);
            nbs.Read(out MatchPlayerHeadIndex);
            nbs.Read(out GuildName);
            nbs.Read(out Rank);
            nbs.Read(out CurRank);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ARENABATTLEREPORT
    /// 请求 Arena战报
    /// <summary>
    public partial class C2G_ArenaBattleReport : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ARENABATTLEREPORT
    /// 返回 Arena战报
    /// <summary>
    public partial class G2C_ArenaBattleReport : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ArenaBattleReportList.Count);
            foreach (var k in ArenaBattleReportList)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2265 = nbs.ReadInt();
            for (int k = 0; k < var2265; k++)
            {
                var var2266 = new CLS_ArenaBattleReport(); var2266.Unserialize(ref nbs);ArenaBattleReportList.Add(var2266);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ArenaBattleReportList.Count);
            foreach (var k in ArenaBattleReportList)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2267 = nbs.ReadInt();
            for (int k = 0; k < var2267; k++)
            {
                var var2268 = new CLS_ArenaBattleReport(); var2268.Unserialize(ref nbs);ArenaBattleReportList.Add(var2268);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ARENAMATCH_BUY
    /// 请求 竞技场次数购买
    /// <summary>
    public partial class C2G_ArenaMatch_Buy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ARENAMATCH_BUY
    /// 返回 竞技场次数购买
    /// <summary>
    public partial class G2C_ArenaMatch_Buy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MatchTicks);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MatchTicks);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(MatchTicks);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out MatchTicks);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ARENA_DEFENSE
    /// 请求 查看竞技场防守队伍
    /// <summary>
    public partial class C2G_Arena_Defense : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ARENA_DEFENSE
    /// 返回 查看竞技场防守队伍
    /// <summary>
    public partial class G2C_Arena_Defense : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictWarriorInfo.Count);
            foreach (var kvp in DictWarriorInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2271 = nbs.ReadInt();
            for (int k = 0; k < var2271; k++)
            {
                int var2272 = nbs.ReadInt(); var var2273 = new CLS_WarriorInfo(); var2273.Unserialize(ref nbs); DictWarriorInfo.Add(var2272, var2273); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictWarriorInfo.Count);
            foreach (var kvp in DictWarriorInfo)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2274 = nbs.ReadInt();
            for (int k = 0; k < var2274; k++)
            {
                int var2275 = nbs.ReadInt(); var var2276 = new CLS_WarriorInfo(); var2276.Unserialize(ref nbs); DictWarriorInfo.Add(var2275, var2276); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_ARENA_SETDEFENSE
    /// 请求 竞技场设置防守队伍
    /// <summary>
    public partial class C2G_Arena_SetDefense : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictDefenses.Count);
            foreach (var kvp in DictDefenses)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2277 = nbs.ReadInt();
            for (int k = 0; k < var2277; k++)
            {
                int var2278 = nbs.ReadInt(); long var2279 = nbs.ReadLong(); DictDefenses.Add(var2278, var2279); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictDefenses.Count);
            foreach (var kvp in DictDefenses)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2280 = nbs.ReadInt();
            for (int k = 0; k < var2280; k++)
            {
                int var2281 = nbs.ReadInt(); long var2282 = nbs.ReadLong(); DictDefenses.Add(var2281, var2282); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_ARENA_SETDEFENSE
    /// 返回 竞技场设置防守队伍
    /// <summary>
    public partial class G2C_Arena_SetDefense : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 长安夺宝信息
    /// <summary>
    public partial class CLS_BankInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(IsCanFight);
            nbs.Write(IsSignUp);
            nbs.Write(GoldCoin);
            nbs.Write(ActiveTick);
            nbs.Write(ActiveAllTick);
            bankConf.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out IsCanFight);
            nbs.Read(out IsSignUp);
            nbs.Read(out GoldCoin);
            nbs.Read(out ActiveTick);
            nbs.Read(out ActiveAllTick);
            bankConf.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANK_INFO
    /// 请求 长安夺宝面板
    /// <summary>
    public partial class C2G_Bank_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANK_INFO
    /// 返回 长安夺宝面板
    /// <summary>
    public partial class G2C_Bank_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BankInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BankInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BankInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BankInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANK_SIGNIN
    /// 请求 长安夺宝报名
    /// <summary>
    public partial class C2G_Bank_SignIn : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(WarZone);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out WarZone);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(WarZone);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out WarZone);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANK_SIGNIN
    /// 返回 长安夺宝报名
    /// <summary>
    public partial class G2C_Bank_SignIn : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BankInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BankInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BankInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BankInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 战区关卡信息
    /// <summary>
    public partial class CLS_WarZoneInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(ConfigID);
            nbs.Write((short)BankDefend);
            nbs.Write(Hp);
            nbs.Write(ArmyHp);
            nbs.Write(GoldHp);
            nbs.Write(ArmyGoldHp);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out ConfigID);
            if (true) { var etemp = nbs.ReadShort(); BankDefend = (EBankDefend)etemp; }
            nbs.Read(out Hp);
            nbs.Read(out ArmyHp);
            nbs.Read(out GoldHp);
            nbs.Read(out ArmyGoldHp);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANK_WARZONE
    /// 请求 长安夺宝战区信息
    /// <summary>
    public partial class C2G_Bank_WarZone : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANK_WARZONE
    /// 返回 长安夺宝战区信息
    /// <summary>
    public partial class G2C_Bank_WarZone : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListWarZone.Count);
            foreach (var k in ListWarZone)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListContribution.Count);
            foreach (var k in ListContribution)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(CountryId);
            nbs.Write(ListWelfareState.Count);
            foreach (var k in ListWelfareState)
            {
                nbs.Write(k);
            }
            nbs.Write(RecoveryTime);
            nbs.Write(Ticks);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2301 = nbs.ReadInt();
            for (int k = 0; k < var2301; k++)
            {
                var var2302 = new CLS_WarZoneInfo(); var2302.Unserialize(ref nbs);ListWarZone.Add(var2302);
            }
            int var2303 = nbs.ReadInt();
            for (int k = 0; k < var2303; k++)
            {
                var var2304 = new CLS_BankCountryTop(); var2304.Unserialize(ref nbs);ListContribution.Add(var2304);
            }
            nbs.Read(out CountryId);
            int var2306 = nbs.ReadInt();
            for (int k = 0; k < var2306; k++)
            {
                bool var2307 = nbs.ReadBool();ListWelfareState.Add(var2307);
            }
            nbs.Read(out RecoveryTime);
            nbs.Read(out Ticks);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListWarZone.Count);
            foreach (var k in ListWarZone)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListContribution.Count);
            foreach (var k in ListContribution)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(CountryId);
            nbs.Write(ListWelfareState.Count);
            foreach (var k in ListWelfareState)
            {
                nbs.Write(k);
            }
            nbs.Write(RecoveryTime);
            nbs.Write(Ticks);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2310 = nbs.ReadInt();
            for (int k = 0; k < var2310; k++)
            {
                var var2311 = new CLS_WarZoneInfo(); var2311.Unserialize(ref nbs);ListWarZone.Add(var2311);
            }
            int var2312 = nbs.ReadInt();
            for (int k = 0; k < var2312; k++)
            {
                var var2313 = new CLS_BankCountryTop(); var2313.Unserialize(ref nbs);ListContribution.Add(var2313);
            }
            nbs.Read(out CountryId);
            int var2315 = nbs.ReadInt();
            for (int k = 0; k < var2315; k++)
            {
                bool var2316 = nbs.ReadBool();ListWelfareState.Add(var2316);
            }
            nbs.Read(out RecoveryTime);
            nbs.Read(out Ticks);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANK_WARZONEAWARD
    /// 请求 长安夺宝战区领奖
    /// <summary>
    public partial class C2G_Bank_WarZoneAward : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ConfigID);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out ConfigID);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ConfigID);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out ConfigID);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANK_WARZONEAWARD
    /// 返回 长安夺宝战区领奖
    /// <summary>
    public partial class G2C_Bank_WarZoneAward : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListWelfareState.Count);
            foreach (var k in ListWelfareState)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2321 = nbs.ReadInt();
            for (int k = 0; k < var2321; k++)
            {
                var var2322 = new CLS_AwardItem(); var2322.Unserialize(ref nbs);ListAward.Add(var2322);
            }
            int var2323 = nbs.ReadInt();
            for (int k = 0; k < var2323; k++)
            {
                bool var2324 = nbs.ReadBool();ListWelfareState.Add(var2324);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListWelfareState.Count);
            foreach (var k in ListWelfareState)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2325 = nbs.ReadInt();
            for (int k = 0; k < var2325; k++)
            {
                var var2326 = new CLS_AwardItem(); var2326.Unserialize(ref nbs);ListAward.Add(var2326);
            }
            int var2327 = nbs.ReadInt();
            for (int k = 0; k < var2327; k++)
            {
                bool var2328 = nbs.ReadBool();ListWelfareState.Add(var2328);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANK_WARZONEFIGHT
    /// 请求 长安夺宝战区战斗
    /// <summary>
    public partial class C2G_Bank_WarZoneFight : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(StrongHold);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out StrongHold);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(StrongHold);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out StrongHold);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANK_WARZONEFIGHT
    /// 返回 长安夺宝战区战斗
    /// <summary>
    public partial class G2C_Bank_WarZoneFight : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANK_WARZONEBALANCE
    /// 请求 长安夺宝战区战斗结算
    /// <summary>
    public partial class C2G_Bank_WarZoneBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(HurtHp);
            nbs.Write(HurtArmyHp);
            nbs.Write(BattleKey);
            nbs.Write(State);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out HurtHp);
            nbs.Read(out HurtArmyHp);
            nbs.Read(out BattleKey);
            nbs.Read(out State);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(HurtHp);
            nbs.Write(HurtArmyHp);
            nbs.Write(BattleKey);
            nbs.Write(State);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out HurtHp);
            nbs.Read(out HurtArmyHp);
            nbs.Read(out BattleKey);
            nbs.Read(out State);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANK_WARZONEBALANCE
    /// 返回 长安夺宝战区战斗结算
    /// <summary>
    public partial class G2C_Bank_WarZoneBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2339 = nbs.ReadInt();
            for (int k = 0; k < var2339; k++)
            {
                var var2340 = new CLS_AwardItem(); var2340.Unserialize(ref nbs);ListAward.Add(var2340);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2341 = nbs.ReadInt();
            for (int k = 0; k < var2341; k++)
            {
                var var2342 = new CLS_AwardItem(); var2342.Unserialize(ref nbs);ListAward.Add(var2342);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANK_WARZONEHURTHP
    /// 请求 长安夺宝战区战斗伤害(每秒计算)
    /// <summary>
    public partial class C2G_Bank_WarZoneHurtHp : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(HurtHp);
            nbs.Write(BattleKey);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out HurtHp);
            nbs.Read(out BattleKey);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(HurtHp);
            nbs.Write(BattleKey);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out HurtHp);
            nbs.Read(out BattleKey);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANK_WARZONEHURTHP
    /// 返回 长安夺宝战区战斗伤害
    /// <summary>
    public partial class G2C_Bank_WarZoneHurtHp : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Hp);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Hp);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Hp);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Hp);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANK_ROBBERFIGHT
    /// 请求 长安夺宝清缴匪盗
    /// <summary>
    public partial class C2G_Bank_RobberFight : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANK_ROBBERFIGHT
    /// 返回 长安夺宝清缴匪盗
    /// <summary>
    public partial class G2C_Bank_RobberFight : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANK_ROBBERBALANCE
    /// 请求 长安夺宝清缴匪盗结算
    /// <summary>
    public partial class C2G_Bank_RobberBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleKey);
            nbs.Write(State);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleKey);
            nbs.Read(out State);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleKey);
            nbs.Write(State);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleKey);
            nbs.Read(out State);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANK_ROBBERBALANCE
    /// 返回 长安夺宝清缴匪盗结算
    /// <summary>
    public partial class G2C_Bank_RobberBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2353 = nbs.ReadInt();
            for (int k = 0; k < var2353; k++)
            {
                var var2354 = new CLS_AwardItem(); var2354.Unserialize(ref nbs);ListAward.Add(var2354);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2355 = nbs.ReadInt();
            for (int k = 0; k < var2355; k++)
            {
                var var2356 = new CLS_AwardItem(); var2356.Unserialize(ref nbs);ListAward.Add(var2356);
            }
        }
    };
    /// <summary>
    /// 长安夺宝排行
    /// <summary>
    public partial class CLS_BankTop
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(HurtHp);
            nbs.Write(Level);
            nbs.Write(PlayerName);
            nbs.Write(GuildName);
            nbs.Write(Country);
            nbs.Write(WarZone);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out HurtHp);
            nbs.Read(out Level);
            nbs.Read(out PlayerName);
            nbs.Read(out GuildName);
            nbs.Read(out Country);
            nbs.Read(out WarZone);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANK_TOP
    /// 请求 长安夺宝排行榜
    /// <summary>
    public partial class C2G_Bank_Top : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(WarZoneID);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out WarZoneID);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(WarZoneID);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out WarZoneID);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANK_TOP
    /// 返回 长安夺宝排行榜
    /// <summary>
    public partial class G2C_Bank_Top : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListGuildTop.Count);
            foreach (var k in ListGuildTop)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListPlayerTop.Count);
            foreach (var k in ListPlayerTop)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2366 = nbs.ReadInt();
            for (int k = 0; k < var2366; k++)
            {
                var var2367 = new CLS_BankTop(); var2367.Unserialize(ref nbs);ListGuildTop.Add(var2367);
            }
            int var2368 = nbs.ReadInt();
            for (int k = 0; k < var2368; k++)
            {
                var var2369 = new CLS_BankTop(); var2369.Unserialize(ref nbs);ListPlayerTop.Add(var2369);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListGuildTop.Count);
            foreach (var k in ListGuildTop)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListPlayerTop.Count);
            foreach (var k in ListPlayerTop)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2370 = nbs.ReadInt();
            for (int k = 0; k < var2370; k++)
            {
                var var2371 = new CLS_BankTop(); var2371.Unserialize(ref nbs);ListGuildTop.Add(var2371);
            }
            int var2372 = nbs.ReadInt();
            for (int k = 0; k < var2372; k++)
            {
                var var2373 = new CLS_BankTop(); var2373.Unserialize(ref nbs);ListPlayerTop.Add(var2373);
            }
        }
    };
    /// <summary>
    /// 长安夺宝国家排行
    /// <summary>
    public partial class CLS_BankCountryTop
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Countryid);
            nbs.Write(HurtHp);
            nbs.Write(TopThree.Count);
            foreach (var k in TopThree)
            {
                k.Serialize(ref nbs);
            }
            nbs.Write(ListPlayerTop.Count);
            foreach (var k in ListPlayerTop)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Countryid);
            nbs.Read(out HurtHp);
            int var2376 = nbs.ReadInt();
            for (int k = 0; k < var2376; k++)
            {
                var var2377 = new CLS_PlayerData(); var2377.Unserialize(ref nbs);TopThree.Add(var2377);
            }
            int var2378 = nbs.ReadInt();
            for (int k = 0; k < var2378; k++)
            {
                var var2379 = new CLS_BankTop(); var2379.Unserialize(ref nbs);ListPlayerTop.Add(var2379);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANK_TOPCOUNTRY
    /// 请求 长安夺宝国家排行榜
    /// <summary>
    public partial class C2G_Bank_TopCountry : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANK_TOPCOUNTRY
    /// 返回 长安夺宝国家排行榜
    /// <summary>
    public partial class G2C_Bank_TopCountry : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListTop.Count);
            foreach (var k in ListTop)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2380 = nbs.ReadInt();
            for (int k = 0; k < var2380; k++)
            {
                var var2381 = new CLS_BankCountryTop(); var2381.Unserialize(ref nbs);ListTop.Add(var2381);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListTop.Count);
            foreach (var k in ListTop)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2382 = nbs.ReadInt();
            for (int k = 0; k < var2382; k++)
            {
                var var2383 = new CLS_BankCountryTop(); var2383.Unserialize(ref nbs);ListTop.Add(var2383);
            }
        }
    };
    /// <summary>
    /// 长安夺宝配置
    /// <summary>
    public partial class CLS_BankConf
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(IsSeted);
            nbs.Write(IsSended);
            nbs.Write(GoldShow);
            nbs.Write(Gold);
            nbs.Write(ArmyGold);
            nbs.Write(PlayerRatio);
            nbs.Write(TimeSignIn);
            nbs.Write(TimeBegin);
            nbs.Write(TimeEnd);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out IsSeted);
            nbs.Read(out IsSended);
            nbs.Read(out GoldShow);
            nbs.Read(out Gold);
            nbs.Read(out ArmyGold);
            nbs.Read(out PlayerRatio);
            nbs.Read(out TimeSignIn);
            nbs.Read(out TimeBegin);
            nbs.Read(out TimeEnd);
        }
    };
    /// <summary>
    /// 军务信息
    /// <summary>
    public partial class CLS_Affairs
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(AffairsIndex);
            nbs.Write(configid);
            nbs.Write(State);
            nbs.Write(StartTime);
            nbs.Write(EndTime);
            nbs.Write(ListJob.Count);
            foreach (var k in ListJob)
            {
                nbs.Write(k);
            }
            nbs.Write(ListWarrior.Count);
            foreach (var k in ListWarrior)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out AffairsIndex);
            nbs.Read(out configid);
            nbs.Read(out State);
            nbs.Read(out StartTime);
            nbs.Read(out EndTime);
            int var2398 = nbs.ReadInt();
            for (int k = 0; k < var2398; k++)
            {
                int var2399 = nbs.ReadInt();ListJob.Add(var2399);
            }
            int var2400 = nbs.ReadInt();
            for (int k = 0; k < var2400; k++)
            {
                long var2401 = nbs.ReadLong();ListWarrior.Add(var2401);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AFFAIRS_LIST
    /// 请求 获取军务列表
    /// <summary>
    public partial class C2G_Affairs_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AFFAIRS_LIST
    /// 返回 获取军务列表
    /// <summary>
    public partial class G2C_Affairs_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAffairs.Count);
            foreach (var k in ListAffairs)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2402 = nbs.ReadInt();
            for (int k = 0; k < var2402; k++)
            {
                var var2403 = new CLS_Affairs(); var2403.Unserialize(ref nbs);ListAffairs.Add(var2403);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAffairs.Count);
            foreach (var k in ListAffairs)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2404 = nbs.ReadInt();
            for (int k = 0; k < var2404; k++)
            {
                var var2405 = new CLS_Affairs(); var2405.Unserialize(ref nbs);ListAffairs.Add(var2405);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AFFAIRS_BEGIN
    /// 请求 开始军务
    /// <summary>
    public partial class C2G_Affairs_Begin : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(AffairsIndex);
            nbs.Write(ListWarrior.Count);
            foreach (var k in ListWarrior)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out AffairsIndex);
            int var2407 = nbs.ReadInt();
            for (int k = 0; k < var2407; k++)
            {
                long var2408 = nbs.ReadLong();ListWarrior.Add(var2408);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(AffairsIndex);
            nbs.Write(ListWarrior.Count);
            foreach (var k in ListWarrior)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out AffairsIndex);
            int var2410 = nbs.ReadInt();
            for (int k = 0; k < var2410; k++)
            {
                long var2411 = nbs.ReadLong();ListWarrior.Add(var2411);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AFFAIRS_BEGIN
    /// 返回 开始军务
    /// <summary>
    public partial class G2C_Affairs_Begin : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            AffairsInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            AffairsInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            AffairsInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            AffairsInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_AFFAIRS_AWARD
    /// 请求 军务领奖
    /// <summary>
    public partial class C2G_Affairs_Award : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(AffairsIndex);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out AffairsIndex);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(AffairsIndex);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out AffairsIndex);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AFFAIRS_AWARD
    /// 返回 军务领奖
    /// <summary>
    public partial class G2C_Affairs_Award : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2416 = nbs.ReadInt();
            for (int k = 0; k < var2416; k++)
            {
                var var2417 = new CLS_AwardItem(); var2417.Unserialize(ref nbs);ListAward.Add(var2417);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2418 = nbs.ReadInt();
            for (int k = 0; k < var2418; k++)
            {
                var var2419 = new CLS_AwardItem(); var2419.Unserialize(ref nbs);ListAward.Add(var2419);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_AFFAIRS_NOTIFY
    /// 通知军务完成
    /// <summary>
    public partial class G2C_Affairs_Notify : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            AffairsInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            AffairsInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            AffairsInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            AffairsInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 矿点信息
    /// <summary>
    public partial class CLS_Grab_ArmyInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(PalyerId);
            nbs.Write(Name);
            nbs.Write(GuildName);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(BeginTime);
            nbs.Write(EndTime);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out PalyerId);
            nbs.Read(out Name);
            nbs.Read(out GuildName);
            int var2426 = nbs.ReadInt();
            for (int k = 0; k < var2426; k++)
            {
                int var2427 = nbs.ReadInt(); long var2428 = nbs.ReadLong(); DictWarrior.Add(var2427, var2428); 
            }
            nbs.Read(out BeginTime);
            nbs.Read(out EndTime);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GRAB_LIST
    /// 请求 资源点信息
    /// <summary>
    public partial class C2G_Grab_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(StateId);
            nbs.Write(Type);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out StateId);
            nbs.Read(out Type);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(StateId);
            nbs.Write(Type);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out StateId);
            nbs.Read(out Type);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GRAB_LIST
    /// 返回 资源点信息
    /// <summary>
    public partial class G2C_Grab_List : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Buy);
            nbs.Write(Total);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Buy);
            nbs.Read(out Total);
            int var2437 = nbs.ReadInt();
            for (int k = 0; k < var2437; k++)
            {
                var var2438 = new CLS_Grab_ArmyInfo(); var2438.Unserialize(ref nbs);ListItem.Add(var2438);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Buy);
            nbs.Write(Total);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Buy);
            nbs.Read(out Total);
            int var2441 = nbs.ReadInt();
            for (int k = 0; k < var2441; k++)
            {
                var var2442 = new CLS_Grab_ArmyInfo(); var2442.Unserialize(ref nbs);ListItem.Add(var2442);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GRAB_BATTLE
    /// 请求 矿点战斗
    /// <summary>
    public partial class C2G_Grab_Battle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GRAB_BATTLE
    /// 返回 矿点战斗
    /// <summary>
    public partial class G2C_Grab_Battle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListWarriorOther.Count);
            foreach (var k in ListWarriorOther)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2445 = nbs.ReadInt();
            for (int k = 0; k < var2445; k++)
            {
                var var2446 = new CLS_WarriorInfo(); var2446.Unserialize(ref nbs);ListWarriorOther.Add(var2446);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListWarriorOther.Count);
            foreach (var k in ListWarriorOther)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2447 = nbs.ReadInt();
            for (int k = 0; k < var2447; k++)
            {
                var var2448 = new CLS_WarriorInfo(); var2448.Unserialize(ref nbs);ListWarriorOther.Add(var2448);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GRAB_FIGHT
    /// 请求 占领矿点
    /// <summary>
    public partial class C2G_Grab_Fight : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleUid);
            nbs.Write(BattleResult);
            nbs.Write(DictExpendHpAtt.Count);
            foreach (var kvp in DictExpendHpAtt)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(DictExpendHpDef.Count);
            foreach (var kvp in DictExpendHpDef)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleUid);
            nbs.Read(out BattleResult);
            int var2451 = nbs.ReadInt();
            for (int k = 0; k < var2451; k++)
            {
                long var2452 = nbs.ReadLong(); int var2453 = nbs.ReadInt(); DictExpendHpAtt.Add(var2452, var2453); 
            }
            int var2454 = nbs.ReadInt();
            for (int k = 0; k < var2454; k++)
            {
                long var2455 = nbs.ReadLong(); int var2456 = nbs.ReadInt(); DictExpendHpDef.Add(var2455, var2456); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleUid);
            nbs.Write(BattleResult);
            nbs.Write(DictExpendHpAtt.Count);
            foreach (var kvp in DictExpendHpAtt)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(DictExpendHpDef.Count);
            foreach (var kvp in DictExpendHpDef)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleUid);
            nbs.Read(out BattleResult);
            int var2459 = nbs.ReadInt();
            for (int k = 0; k < var2459; k++)
            {
                long var2460 = nbs.ReadLong(); int var2461 = nbs.ReadInt(); DictExpendHpAtt.Add(var2460, var2461); 
            }
            int var2462 = nbs.ReadInt();
            for (int k = 0; k < var2462; k++)
            {
                long var2463 = nbs.ReadLong(); int var2464 = nbs.ReadInt(); DictExpendHpDef.Add(var2463, var2464); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GRAB_FIGHT
    /// 返回 占领矿点
    /// <summary>
    public partial class G2C_Grab_Fight : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(bSuccess);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out bSuccess);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(bSuccess);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out bSuccess);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GRAB_INFO
    /// 请求 查看矿点
    /// <summary>
    public partial class C2G_Grab_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GRAB_INFO
    /// 返回 查看矿点
    /// <summary>
    public partial class G2C_Grab_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(PalyerId);
            nbs.Write(Name);
            nbs.Write(GuildName);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(EndTime);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out PalyerId);
            nbs.Read(out Name);
            nbs.Read(out GuildName);
            int var2473 = nbs.ReadInt();
            for (int k = 0; k < var2473; k++)
            {
                int var2474 = nbs.ReadInt(); var var2475 = new CLS_WarriorInfo(); var2475.Unserialize(ref nbs); DictWarrior.Add(var2474, var2475); 
            }
            nbs.Read(out EndTime);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(PalyerId);
            nbs.Write(Name);
            nbs.Write(GuildName);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(EndTime);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out PalyerId);
            nbs.Read(out Name);
            nbs.Read(out GuildName);
            int var2481 = nbs.ReadInt();
            for (int k = 0; k < var2481; k++)
            {
                int var2482 = nbs.ReadInt(); var var2483 = new CLS_WarriorInfo(); var2483.Unserialize(ref nbs); DictWarrior.Add(var2482, var2483); 
            }
            nbs.Read(out EndTime);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GRAB_GIVEUP
    /// 请求 放弃矿点
    /// <summary>
    public partial class C2G_Grab_GiveUp : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GRAB_GIVEUP
    /// 返回 放弃矿点
    /// <summary>
    public partial class G2C_Grab_GiveUp : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GRAB_MINE
    /// 请求 自己的资源点信息
    /// <summary>
    public partial class C2G_Grab_Mine : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GRAB_MINE
    /// 返回 自己的资源点信息
    /// <summary>
    public partial class G2C_Grab_Mine : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2489 = nbs.ReadInt();
            for (int k = 0; k < var2489; k++)
            {
                var var2490 = new CLS_Grab_ArmyInfo(); var2490.Unserialize(ref nbs);ListItem.Add(var2490);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListItem.Count);
            foreach (var k in ListItem)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2491 = nbs.ReadInt();
            for (int k = 0; k < var2491; k++)
            {
                var var2492 = new CLS_Grab_ArmyInfo(); var2492.Unserialize(ref nbs);ListItem.Add(var2492);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_GRAB_BUY
    /// 请求 购买挑战次数
    /// <summary>
    public partial class C2G_Grab_Buy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_GRAB_BUY
    /// 返回 购买挑战次数
    /// <summary>
    public partial class G2C_Grab_Buy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Buy);
            nbs.Write(Total);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Buy);
            nbs.Read(out Total);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Buy);
            nbs.Write(Total);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Buy);
            nbs.Read(out Total);
        }
    };
    /// <summary>
    /// 匪寇信息单条
    /// <summary>
    public partial class CLS_BanditsArmyInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(ConfigId);
            nbs.Write(IsAlive);
            nbs.Write(TicksDeath);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out ConfigId);
            nbs.Read(out IsAlive);
            nbs.Read(out TicksDeath);
        }
    };
    /// <summary>
    /// 匪寇信息
    /// <summary>
    public partial class CLS_BanditsInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(BanditsBuyTimes);
            nbs.Write(BanditsCount);
            nbs.Write(DictBandits.Count);
            foreach (var kvp in DictBandits)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out BanditsBuyTimes);
            nbs.Read(out BanditsCount);
            int var2503 = nbs.ReadInt();
            for (int k = 0; k < var2503; k++)
            {
                int var2504 = nbs.ReadInt(); var var2505 = new CLS_BanditsArmyInfo(); var2505.Unserialize(ref nbs); DictBandits.Add(var2504, var2505); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANDITS_INFO
    /// 请求 征讨匪寇信息
    /// <summary>
    public partial class C2G_Bandits_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANDITS_INFO
    /// 返回 征讨匪寇信息
    /// <summary>
    public partial class G2C_Bandits_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BanditsInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BanditsInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BanditsInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BanditsInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANDITS_BATTLE
    /// 请求 征讨匪寇战斗
    /// <summary>
    public partial class C2G_Bandits_Battle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANDITS_BATTLE
    /// 返回 征讨匪寇战斗
    /// <summary>
    public partial class G2C_Bandits_Battle : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(BanditsCount);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out BanditsCount);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(BanditsCount);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out BanditsCount);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANDITS_BATTLEEND
    /// 请求 征讨匪寇战斗结束
    /// <summary>
    public partial class C2G_Bandits_BattleEnd : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(BattleKey);
            nbs.Write(State);
            nbs.Write(DictExpendHp.Count);
            foreach (var kvp in DictExpendHp)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out BattleKey);
            nbs.Read(out State);
            int var2517 = nbs.ReadInt();
            for (int k = 0; k < var2517; k++)
            {
                long var2518 = nbs.ReadLong(); int var2519 = nbs.ReadInt(); DictExpendHp.Add(var2518, var2519); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(BattleKey);
            nbs.Write(State);
            nbs.Write(DictExpendHp.Count);
            foreach (var kvp in DictExpendHp)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            nbs.Read(out BattleKey);
            nbs.Read(out State);
            int var2523 = nbs.ReadInt();
            for (int k = 0; k < var2523; k++)
            {
                long var2524 = nbs.ReadLong(); int var2525 = nbs.ReadInt(); DictExpendHp.Add(var2524, var2525); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANDITS_BATTLEEND
    /// 返回 征讨匪寇战斗结束
    /// <summary>
    public partial class G2C_Bandits_BattleEnd : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            BanditsInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            int var2527 = nbs.ReadInt();
            for (int k = 0; k < var2527; k++)
            {
                var var2528 = new CLS_AwardItem(); var2528.Unserialize(ref nbs);ListAward.Add(var2528);
            }
            BanditsInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.Write(ListAward.Count);
            foreach (var k in ListAward)
            {
                k.Serialize(ref nbs);
            }
            BanditsInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            int var2531 = nbs.ReadInt();
            for (int k = 0; k < var2531; k++)
            {
                var var2532 = new CLS_AwardItem(); var2532.Unserialize(ref nbs);ListAward.Add(var2532);
            }
            BanditsInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANDITS_BUY
    /// 请求 购买挑战次数
    /// <summary>
    public partial class C2G_Bandits_Buy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANDITS_BUY
    /// 返回 购买挑战次数
    /// <summary>
    public partial class G2C_Bandits_Buy : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BanditsBuyTimes);
            nbs.Write(BanditsCount);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BanditsBuyTimes);
            nbs.Read(out BanditsCount);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BanditsBuyTimes);
            nbs.Write(BanditsCount);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BanditsBuyTimes);
            nbs.Read(out BanditsCount);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BANDITS_RESET
    /// 请求 购买怪物重置
    /// <summary>
    public partial class C2G_Bandits_Reset : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BANDITS_RESET
    /// 返回 购买怪物重置
    /// <summary>
    public partial class G2C_Bandits_Reset : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BanditsInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BanditsInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BanditsInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BanditsInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SUPPLY_SUPPLY
    /// 请求 补兵
    /// <summary>
    public partial class C2G_Supply_Supply : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2540 = nbs.ReadInt();
            for (int k = 0; k < var2540; k++)
            {
                long var2541 = nbs.ReadLong(); int var2542 = nbs.ReadInt(); DictWarrior.Add(var2541, var2542); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2543 = nbs.ReadInt();
            for (int k = 0; k < var2543; k++)
            {
                long var2544 = nbs.ReadLong(); int var2545 = nbs.ReadInt(); DictWarrior.Add(var2544, var2545); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SUPPLY_SUPPLY
    /// 返回 补兵
    /// <summary>
    public partial class G2C_Supply_Supply : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2546 = nbs.ReadInt();
            for (int k = 0; k < var2546; k++)
            {
                long var2547 = nbs.ReadLong(); var var2548 = new CLS_WarriorInfo(); var2548.Unserialize(ref nbs); DictWarrior.Add(var2547, var2548); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2549 = nbs.ReadInt();
            for (int k = 0; k < var2549; k++)
            {
                long var2550 = nbs.ReadLong(); var var2551 = new CLS_WarriorInfo(); var2551.Unserialize(ref nbs); DictWarrior.Add(var2550, var2551); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_SUPPLY_SUPPLYAUTO
    /// 请求 一键补兵
    /// <summary>
    public partial class C2G_Supply_SupplyAuto : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListWarrior.Count);
            foreach (var k in ListWarrior)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2552 = nbs.ReadInt();
            for (int k = 0; k < var2552; k++)
            {
                long var2553 = nbs.ReadLong();ListWarrior.Add(var2553);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListWarrior.Count);
            foreach (var k in ListWarrior)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2554 = nbs.ReadInt();
            for (int k = 0; k < var2554; k++)
            {
                long var2555 = nbs.ReadLong();ListWarrior.Add(var2555);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_SUPPLY_SUPPLYAUTO
    /// 返回 一键补兵
    /// <summary>
    public partial class G2C_Supply_SupplyAuto : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2556 = nbs.ReadInt();
            for (int k = 0; k < var2556; k++)
            {
                long var2557 = nbs.ReadLong(); var var2558 = new CLS_WarriorInfo(); var2558.Unserialize(ref nbs); DictWarrior.Add(var2557, var2558); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2559 = nbs.ReadInt();
            for (int k = 0; k < var2559; k++)
            {
                long var2560 = nbs.ReadLong(); var var2561 = new CLS_WarriorInfo(); var2561.Unserialize(ref nbs); DictWarrior.Add(var2560, var2561); 
            }
        }
    };
    /// <summary>
    /// 城池战略信息基础
    /// <summary>
    public partial class CLS_StrategyCityInfoBase
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(GuildUid);
            nbs.Write(GuildName);
            nbs.Write(CountryId);
            nbs.Write(Ownership);
            nbs.Write(TsCooldownProtected);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out GuildUid);
            nbs.Read(out GuildName);
            nbs.Read(out CountryId);
            nbs.Read(out Ownership);
            nbs.Read(out TsCooldownProtected);
        }
    };
    /// <summary>
    /// 战略城池信息
    /// <summary>
    public partial class CLS_StrategyCityInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            nbs.Write(LeaderPuid);
            nbs.Write(LeaderName);
            nbs.Write(Prosperity);
            CityInfoBase.Serialize(ref nbs);
            CityInfoMetro.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            nbs.Read(out LeaderPuid);
            nbs.Read(out LeaderName);
            nbs.Read(out Prosperity);
            CityInfoBase.Unserialize(ref nbs);
            CityInfoMetro.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_STRATEGY_MAP
    /// 请求 战略地图
    /// <summary>
    public partial class C2G_Strategy_Map : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_MAP
    /// 返回 战略地图
    /// <summary>
    public partial class G2C_Strategy_Map : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictCity.Count);
            foreach (var kvp in DictCity)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            MetroPvpInfo.Serialize(ref nbs);
            nbs.Write(ListAlliance.Count);
            foreach (var k in ListAlliance)
            {
                nbs.Write(k);
            }
            nbs.Write(ListGuildCityMy.Count);
            foreach (var k in ListGuildCityMy)
            {
                nbs.Write(k);
            }
            nbs.Write(ListGuildCityAlliance.Count);
            foreach (var k in ListGuildCityAlliance)
            {
                nbs.Write(k);
            }
            BanditsInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2573 = nbs.ReadInt();
            for (int k = 0; k < var2573; k++)
            {
                int var2574 = nbs.ReadInt(); var var2575 = new CLS_StrategyCityInfo(); var2575.Unserialize(ref nbs); DictCity.Add(var2574, var2575); 
            }
            MetroPvpInfo.Unserialize(ref nbs);
            int var2577 = nbs.ReadInt();
            for (int k = 0; k < var2577; k++)
            {
                long var2578 = nbs.ReadLong();ListAlliance.Add(var2578);
            }
            int var2579 = nbs.ReadInt();
            for (int k = 0; k < var2579; k++)
            {
                int var2580 = nbs.ReadInt();ListGuildCityMy.Add(var2580);
            }
            int var2581 = nbs.ReadInt();
            for (int k = 0; k < var2581; k++)
            {
                int var2582 = nbs.ReadInt();ListGuildCityAlliance.Add(var2582);
            }
            BanditsInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictCity.Count);
            foreach (var kvp in DictCity)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            MetroPvpInfo.Serialize(ref nbs);
            nbs.Write(ListAlliance.Count);
            foreach (var k in ListAlliance)
            {
                nbs.Write(k);
            }
            nbs.Write(ListGuildCityMy.Count);
            foreach (var k in ListGuildCityMy)
            {
                nbs.Write(k);
            }
            nbs.Write(ListGuildCityAlliance.Count);
            foreach (var k in ListGuildCityAlliance)
            {
                nbs.Write(k);
            }
            BanditsInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2584 = nbs.ReadInt();
            for (int k = 0; k < var2584; k++)
            {
                int var2585 = nbs.ReadInt(); var var2586 = new CLS_StrategyCityInfo(); var2586.Unserialize(ref nbs); DictCity.Add(var2585, var2586); 
            }
            MetroPvpInfo.Unserialize(ref nbs);
            int var2588 = nbs.ReadInt();
            for (int k = 0; k < var2588; k++)
            {
                long var2589 = nbs.ReadLong();ListAlliance.Add(var2589);
            }
            int var2590 = nbs.ReadInt();
            for (int k = 0; k < var2590; k++)
            {
                int var2591 = nbs.ReadInt();ListGuildCityMy.Add(var2591);
            }
            int var2592 = nbs.ReadInt();
            for (int k = 0; k < var2592; k++)
            {
                int var2593 = nbs.ReadInt();ListGuildCityAlliance.Add(var2593);
            }
            BanditsInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_STRATEGY_CITYINFO
    /// 请求 城池信息
    /// <summary>
    public partial class C2G_Strategy_CityInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_CITYINFO
    /// 返回 城池信息
    /// <summary>
    public partial class G2C_Strategy_CityInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            CityInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            CityInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            CityInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            CityInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 城池战斗守备营信息
    /// <summary>
    public partial class CLS_StrategyFightCampInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            WallHp.Serialize(ref nbs);
            nbs.Write(ListLastAttacker.Count);
            foreach (var k in ListLastAttacker)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            WallHp.Unserialize(ref nbs);
            int var2601 = nbs.ReadInt();
            for (int k = 0; k < var2601; k++)
            {
                string var2602 = nbs.ReadString();ListLastAttacker.Add(var2602);
            }
        }
    };
    /// <summary>
    /// 城池战斗信息
    /// <summary>
    public partial class CLS_StrategyFightInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Uid);
            CityInfoBase.Serialize(ref nbs);
            nbs.Write(DictCamp.Count);
            foreach (var kvp in DictCamp)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Uid);
            CityInfoBase.Unserialize(ref nbs);
            int var2605 = nbs.ReadInt();
            for (int k = 0; k < var2605; k++)
            {
                int var2606 = nbs.ReadInt(); var var2607 = new CLS_StrategyFightCampInfo(); var2607.Unserialize(ref nbs); DictCamp.Add(var2606, var2607); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_STRATEGY_FIGHTINFO
    /// 请求 城池战斗信息
    /// <summary>
    public partial class C2G_Strategy_FightInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_FIGHTINFO
    /// 返回 城池战斗信息
    /// <summary>
    public partial class G2C_Strategy_FightInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            CityInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            CityInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            CityInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            CityInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_NOTIFYREFRESHWALLHP
    /// 通知 城墙血量刷新
    /// <summary>
    public partial class G2C_Strategy_NotifyRefreshWallHp : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            WallHp.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            WallHp.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            WallHp.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            WallHp.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_NOTIFYREFRESHCITYINFO
    /// 通知 城池信息刷新
    /// <summary>
    public partial class G2C_Strategy_NotifyRefreshCityInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            CityInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            CityInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            CityInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            CityInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_NOTIFYREFRESHCITYS
    /// 通知 城池信息刷新多个
    /// <summary>
    public partial class G2C_Strategy_NotifyRefreshCitys : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictCity.Count);
            foreach (var kvp in DictCity)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2620 = nbs.ReadInt();
            for (int k = 0; k < var2620; k++)
            {
                int var2621 = nbs.ReadInt(); var var2622 = new CLS_StrategyCityInfo(); var2622.Unserialize(ref nbs); DictCity.Add(var2621, var2622); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DictCity.Count);
            foreach (var kvp in DictCity)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2623 = nbs.ReadInt();
            for (int k = 0; k < var2623; k++)
            {
                int var2624 = nbs.ReadInt(); var var2625 = new CLS_StrategyCityInfo(); var2625.Unserialize(ref nbs); DictCity.Add(var2624, var2625); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_STRATEGY_MATCHINGCANCEL
    /// 请求 城池战斗匹配取消
    /// <summary>
    public partial class C2G_Strategy_MatchingCancel : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_MATCHINGCANCEL
    /// 返回 城池战斗匹配取消
    /// <summary>
    public partial class G2C_Strategy_MatchingCancel : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_STRATEGY_DEFENSE
    /// 请求 城池战斗防守
    /// <summary>
    public partial class C2G_Strategy_Defense : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_DEFENSE
    /// 返回 城池战斗防守
    /// <summary>
    public partial class G2C_Strategy_Defense : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DtMatchingStart);
            nbs.Write(DtMatchingEnd);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DtMatchingStart);
            nbs.Read(out DtMatchingEnd);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DtMatchingStart);
            nbs.Write(DtMatchingEnd);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DtMatchingStart);
            nbs.Read(out DtMatchingEnd);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_STRATEGY_ATTACK
    /// 请求 城池战斗进攻
    /// <summary>
    public partial class C2G_Strategy_Attack : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_ATTACK
    /// 返回 城池战斗进攻
    /// <summary>
    public partial class G2C_Strategy_Attack : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DtMatchingStart);
            nbs.Write(DtMatchingEnd);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DtMatchingStart);
            nbs.Read(out DtMatchingEnd);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DtMatchingStart);
            nbs.Write(DtMatchingEnd);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DtMatchingStart);
            nbs.Read(out DtMatchingEnd);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_NOTIFYMATCHINGENDDEFENSE
    /// 通知 城池战斗匹配结束防守
    /// <summary>
    public partial class G2C_Strategy_NotifyMatchingEndDefense : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.Write(WallHp);
            nbs.Write(WallHpAdded);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            nbs.Read(out WallHp);
            nbs.Read(out WallHpAdded);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.Write(WallHp);
            nbs.Write(WallHpAdded);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            nbs.Read(out WallHp);
            nbs.Read(out WallHpAdded);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_NOTIFYMATCHINGATTACKNPC
    /// 通知 城池战斗匹配攻击NPC
    /// <summary>
    public partial class G2C_Strategy_NotifyMatchingAttackNpc : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            CampNpc.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            CampNpc.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            CampNpc.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            CampNpc.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_NOTIFYMATCHINGATTACKWALL
    /// 通知 城池战斗匹配攻击城墙
    /// <summary>
    public partial class G2C_Strategy_NotifyMatchingAttackWall : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.Write(WallLevel);
            WallHp.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            nbs.Read(out WallLevel);
            WallHp.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.Write(WallLevel);
            WallHp.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            nbs.Read(out WallLevel);
            WallHp.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 守军NPC兵力
    /// <summary>
    public partial class CLS_CampNpcMonster
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(MonsterUid);
            nbs.Write(MonsterId);
            nbs.Write(Hp);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out MonsterUid);
            nbs.Read(out MonsterId);
            nbs.Read(out Hp);
        }
    };
    /// <summary>
    /// 守军NPC
    /// <summary>
    public partial class CLS_CampNpc
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(NpcUid);
            nbs.Write(StageId);
            nbs.Write(DictMonster.Count);
            foreach (var kvp in DictMonster)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out NpcUid);
            nbs.Read(out StageId);
            int var2669 = nbs.ReadInt();
            for (int k = 0; k < var2669; k++)
            {
                int var2670 = nbs.ReadInt(); var var2671 = new CLS_CampNpcMonster(); var2671.Unserialize(ref nbs); DictMonster.Add(var2670, var2671); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_STRATEGY_ATTACKNPCBALANCE
    /// 请求 城池战斗匹配攻击NPC结算
    /// <summary>
    public partial class C2G_Strategy_AttackNpcBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleCode);
            nbs.Write(BattleResult);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.Write(NpcUid);
            nbs.Write(DictMonster.Count);
            foreach (var kvp in DictMonster)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(DictExpendHp.Count);
            foreach (var kvp in DictExpendHp)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleCode);
            nbs.Read(out BattleResult);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            nbs.Read(out NpcUid);
            int var2677 = nbs.ReadInt();
            for (int k = 0; k < var2677; k++)
            {
                int var2678 = nbs.ReadInt(); var var2679 = new CLS_CampNpcMonster(); var2679.Unserialize(ref nbs); DictMonster.Add(var2678, var2679); 
            }
            int var2680 = nbs.ReadInt();
            for (int k = 0; k < var2680; k++)
            {
                long var2681 = nbs.ReadLong(); int var2682 = nbs.ReadInt(); DictExpendHp.Add(var2681, var2682); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleCode);
            nbs.Write(BattleResult);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.Write(NpcUid);
            nbs.Write(DictMonster.Count);
            foreach (var kvp in DictMonster)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
            nbs.Write(DictExpendHp.Count);
            foreach (var kvp in DictExpendHp)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleCode);
            nbs.Read(out BattleResult);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            nbs.Read(out NpcUid);
            int var2688 = nbs.ReadInt();
            for (int k = 0; k < var2688; k++)
            {
                int var2689 = nbs.ReadInt(); var var2690 = new CLS_CampNpcMonster(); var2690.Unserialize(ref nbs); DictMonster.Add(var2689, var2690); 
            }
            int var2691 = nbs.ReadInt();
            for (int k = 0; k < var2691; k++)
            {
                long var2692 = nbs.ReadLong(); int var2693 = nbs.ReadInt(); DictExpendHp.Add(var2692, var2693); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_ATTACKNPCBALANCE
    /// 返回 城池战斗匹配攻击NPC结算
    /// <summary>
    public partial class G2C_Strategy_AttackNpcBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_STRATEGY_ATTACKWALLBALANCE
    /// 请求 城池战斗匹配攻击城墙结算
    /// <summary>
    public partial class C2G_Strategy_AttackWallBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleCode);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.Write(WallHpDamage);
            nbs.Write(DictExpendHp.Count);
            foreach (var kvp in DictExpendHp)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleCode);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            nbs.Read(out WallHpDamage);
            int var2698 = nbs.ReadInt();
            for (int k = 0; k < var2698; k++)
            {
                long var2699 = nbs.ReadLong(); int var2700 = nbs.ReadInt(); DictExpendHp.Add(var2699, var2700); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleCode);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            nbs.Write(WallHpDamage);
            nbs.Write(DictExpendHp.Count);
            foreach (var kvp in DictExpendHp)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleCode);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            nbs.Read(out WallHpDamage);
            int var2705 = nbs.ReadInt();
            for (int k = 0; k < var2705; k++)
            {
                long var2706 = nbs.ReadLong(); int var2707 = nbs.ReadInt(); DictExpendHp.Add(var2706, var2707); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_ATTACKWALLBALANCE
    /// 返回 城池战斗匹配攻击城墙结算
    /// <summary>
    public partial class G2C_Strategy_AttackWallBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAwardFirst.Count);
            foreach (var k in ListAwardFirst)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2708 = nbs.ReadInt();
            for (int k = 0; k < var2708; k++)
            {
                var var2709 = new CLS_AwardItem(); var2709.Unserialize(ref nbs);ListAwardFirst.Add(var2709);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListAwardFirst.Count);
            foreach (var k in ListAwardFirst)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2710 = nbs.ReadInt();
            for (int k = 0; k < var2710; k++)
            {
                var var2711 = new CLS_AwardItem(); var2711.Unserialize(ref nbs);ListAwardFirst.Add(var2711);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_NOTIFYMATCHINGATTACKPLAYER
    /// 通知 城池战斗匹配攻击玩家
    /// <summary>
    public partial class G2C_Strategy_NotifyMatchingAttackPlayer : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BattleInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BattleInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BattleInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BattleInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_STRATEGY_ATTACKPLAYERBALANCE
    /// 请求 城池战斗匹配攻击玩家结算
    /// <summary>
    public partial class C2G_Strategy_AttackPlayerBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleUid);
            nbs.Write(BattleResult);
            nbs.Write(DictExpendHpAtt.Count);
            foreach (var kvp in DictExpendHpAtt)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(DictExpendHpDef.Count);
            foreach (var kvp in DictExpendHpDef)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleUid);
            nbs.Read(out BattleResult);
            int var2716 = nbs.ReadInt();
            for (int k = 0; k < var2716; k++)
            {
                long var2717 = nbs.ReadLong(); int var2718 = nbs.ReadInt(); DictExpendHpAtt.Add(var2717, var2718); 
            }
            int var2719 = nbs.ReadInt();
            for (int k = 0; k < var2719; k++)
            {
                long var2720 = nbs.ReadLong(); int var2721 = nbs.ReadInt(); DictExpendHpDef.Add(var2720, var2721); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleUid);
            nbs.Write(BattleResult);
            nbs.Write(DictExpendHpAtt.Count);
            foreach (var kvp in DictExpendHpAtt)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(DictExpendHpDef.Count);
            foreach (var kvp in DictExpendHpDef)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleUid);
            nbs.Read(out BattleResult);
            int var2724 = nbs.ReadInt();
            for (int k = 0; k < var2724; k++)
            {
                long var2725 = nbs.ReadLong(); int var2726 = nbs.ReadInt(); DictExpendHpAtt.Add(var2725, var2726); 
            }
            int var2727 = nbs.ReadInt();
            for (int k = 0; k < var2727; k++)
            {
                long var2728 = nbs.ReadLong(); int var2729 = nbs.ReadInt(); DictExpendHpDef.Add(var2728, var2729); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_STRATEGY_ATTACKPLAYERBALANCE
    /// 返回 城池战斗匹配攻击玩家结算
    /// <summary>
    public partial class G2C_Strategy_AttackPlayerBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleUid);
            nbs.Write(DictBattleResult.Count);
            foreach (var kvp in DictBattleResult)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleUid);
            int var2731 = nbs.ReadInt();
            for (int k = 0; k < var2731; k++)
            {
                long var2732 = nbs.ReadLong(); bool var2733 = nbs.ReadBool(); DictBattleResult.Add(var2732, var2733); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleUid);
            nbs.Write(DictBattleResult.Count);
            foreach (var kvp in DictBattleResult)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleUid);
            int var2735 = nbs.ReadInt();
            for (int k = 0; k < var2735; k++)
            {
                long var2736 = nbs.ReadLong(); bool var2737 = nbs.ReadBool(); DictBattleResult.Add(var2736, var2737); 
            }
        }
    };
    /// <summary>
    /// 大城池PVP综合信息
    /// <summary>
    public partial class CLS_MetroPvpInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write((short)MetroPvpState);
            nbs.Write(DtMetroPvpStart);
            nbs.Write(DtMetroPvpEnd);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            if (true) { var etemp = nbs.ReadShort(); MetroPvpState = (EMetroPvpState)etemp; }
            nbs.Read(out DtMetroPvpStart);
            nbs.Read(out DtMetroPvpEnd);
        }
    };
    /// <summary>
    /// 城池战略信息大城池
    /// <summary>
    public partial class CLS_StrategyCityInfoMetro
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write((short)MetroCityStatus);
            nbs.Write(TsCooldownSeize);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            if (true) { var etemp = nbs.ReadShort(); MetroCityStatus = (EMetroCityStatus)etemp; }
            nbs.Read(out TsCooldownSeize);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_METRO_NOTIFYREFRESHINFO
    /// 通知 大城池PVP综合信息
    /// <summary>
    public partial class G2C_Metro_NotifyRefreshInfo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            MetroPvpInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            MetroPvpInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            MetroPvpInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            MetroPvpInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 积分榜单条
    /// <summary>
    public partial class CLS_MetroTopScoreNode
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Rank);
            nbs.Write(GuildUid);
            nbs.Write(GuildName);
            nbs.Write(Score);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Rank);
            nbs.Read(out GuildUid);
            nbs.Read(out GuildName);
            nbs.Read(out Score);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_METRO_TOPSCORE
    /// 请求 郡城势力积分榜
    /// <summary>
    public partial class C2G_Metro_TopScore : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_METRO_TOPSCORE
    /// 返回 郡城势力积分榜
    /// <summary>
    public partial class G2C_Metro_TopScore : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            ScoreMy.Serialize(ref nbs);
            nbs.Write(ListScore.Count);
            foreach (var k in ListScore)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            ScoreMy.Unserialize(ref nbs);
            int var2753 = nbs.ReadInt();
            for (int k = 0; k < var2753; k++)
            {
                var var2754 = new CLS_MetroTopScoreNode(); var2754.Unserialize(ref nbs);ListScore.Add(var2754);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Uid);
            ScoreMy.Serialize(ref nbs);
            nbs.Write(ListScore.Count);
            foreach (var k in ListScore)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Uid);
            ScoreMy.Unserialize(ref nbs);
            int var2757 = nbs.ReadInt();
            for (int k = 0; k < var2757; k++)
            {
                var var2758 = new CLS_MetroTopScoreNode(); var2758.Unserialize(ref nbs);ListScore.Add(var2758);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_METRO_MATCHING
    /// 请求 郡城匹配
    /// <summary>
    public partial class C2G_Metro_Matching : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_METRO_MATCHING
    /// 返回 郡城匹配
    /// <summary>
    public partial class G2C_Metro_Matching : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DtMatchingStart);
            nbs.Write(DtMatchingEnd);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DtMatchingStart);
            nbs.Read(out DtMatchingEnd);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(DtMatchingStart);
            nbs.Write(DtMatchingEnd);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out DtMatchingStart);
            nbs.Read(out DtMatchingEnd);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_METRO_MATCHINGCANCEL
    /// 请求 郡城匹配取消
    /// <summary>
    public partial class C2G_Metro_MatchingCancel : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_METRO_MATCHINGCANCEL
    /// 返回 郡城匹配取消
    /// <summary>
    public partial class G2C_Metro_MatchingCancel : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_METRO_NOTIFYMATCHINGEND
    /// 通知 郡城匹配结束
    /// <summary>
    public partial class G2C_Metro_NotifyMatchingEnd : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(CityUid);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out CityUid);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_METRO_NOTIFYMATCHINGMETRO
    /// 通知 郡城匹配成功
    /// <summary>
    public partial class G2C_Metro_NotifyMatchingMetro : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BattleInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BattleInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BattleInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BattleInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_METRO_ATTACKPLAYERBALANCE
    /// 请求 郡城战斗结算
    /// <summary>
    public partial class C2G_Metro_AttackPlayerBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleUid);
            nbs.Write(BattleResult);
            nbs.Write(DictExpendHpAtt.Count);
            foreach (var kvp in DictExpendHpAtt)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(DictExpendHpDef.Count);
            foreach (var kvp in DictExpendHpDef)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleUid);
            nbs.Read(out BattleResult);
            int var2771 = nbs.ReadInt();
            for (int k = 0; k < var2771; k++)
            {
                long var2772 = nbs.ReadLong(); int var2773 = nbs.ReadInt(); DictExpendHpAtt.Add(var2772, var2773); 
            }
            int var2774 = nbs.ReadInt();
            for (int k = 0; k < var2774; k++)
            {
                long var2775 = nbs.ReadLong(); int var2776 = nbs.ReadInt(); DictExpendHpDef.Add(var2775, var2776); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleUid);
            nbs.Write(BattleResult);
            nbs.Write(DictExpendHpAtt.Count);
            foreach (var kvp in DictExpendHpAtt)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(DictExpendHpDef.Count);
            foreach (var kvp in DictExpendHpDef)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleUid);
            nbs.Read(out BattleResult);
            int var2779 = nbs.ReadInt();
            for (int k = 0; k < var2779; k++)
            {
                long var2780 = nbs.ReadLong(); int var2781 = nbs.ReadInt(); DictExpendHpAtt.Add(var2780, var2781); 
            }
            int var2782 = nbs.ReadInt();
            for (int k = 0; k < var2782; k++)
            {
                long var2783 = nbs.ReadLong(); int var2784 = nbs.ReadInt(); DictExpendHpDef.Add(var2783, var2784); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_METRO_ATTACKPLAYERBALANCE
    /// 返回 郡城战斗结算
    /// <summary>
    public partial class G2C_Metro_AttackPlayerBalance : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleUid);
            nbs.Write(DictBattleResult.Count);
            foreach (var kvp in DictBattleResult)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleUid);
            int var2786 = nbs.ReadInt();
            for (int k = 0; k < var2786; k++)
            {
                long var2787 = nbs.ReadLong(); bool var2788 = nbs.ReadBool(); DictBattleResult.Add(var2787, var2788); 
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(BattleUid);
            nbs.Write(DictBattleResult.Count);
            foreach (var kvp in DictBattleResult)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out BattleUid);
            int var2790 = nbs.ReadInt();
            for (int k = 0; k < var2790; k++)
            {
                long var2791 = nbs.ReadLong(); bool var2792 = nbs.ReadBool(); DictBattleResult.Add(var2791, var2792); 
            }
        }
    };
    /// <summary>
    /// 即时对战玩家信息
    /// <summary>
    public partial class CLS_BattlePlayer
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Puid);
            nbs.Write(Name);
            nbs.Write(IsReady);
            nbs.Write(DictWarrior.Count);
            foreach (var kvp in DictWarrior)
            {
                nbs.Write(kvp.Key);kvp.Value.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Puid);
            nbs.Read(out Name);
            nbs.Read(out IsReady);
            int var2796 = nbs.ReadInt();
            for (int k = 0; k < var2796; k++)
            {
                int var2797 = nbs.ReadInt(); var var2798 = new CLS_WarriorInfo(); var2798.Unserialize(ref nbs); DictWarrior.Add(var2797, var2798); 
            }
        }
    };
    /// <summary>
    /// 战场信息
    /// <summary>
    public partial class CLS_BattleInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(BattleUid);
            nbs.Write((short)BattleType);
            nbs.Write(IsReadyAll);
            nbs.Write(CityUid);
            nbs.Write(CampUid);
            BattlePlayerAtt.Serialize(ref nbs);
            BattlePlayerDef.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out BattleUid);
            if (true) { var etemp = nbs.ReadShort(); BattleType = (EBattleType)etemp; }
            nbs.Read(out IsReadyAll);
            nbs.Read(out CityUid);
            nbs.Read(out CampUid);
            BattlePlayerAtt.Unserialize(ref nbs);
            BattlePlayerDef.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BATTLE_DEMO
    /// 请求 测试
    /// <summary>
    public partial class C2G_Battle_Demo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BATTLE_DEMO
    /// 返回 测试
    /// <summary>
    public partial class G2C_Battle_Demo : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BATTLE_READY
    /// 请求 准备
    /// <summary>
    public partial class C2G_Battle_Ready : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BATTLE_READY
    /// 返回 准备
    /// <summary>
    public partial class G2C_Battle_Ready : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BATTLE_NOTIFYREADY
    /// 通知 准备状态
    /// <summary>
    public partial class G2C_Battle_NotifyReady : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(IsReadyAll);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out IsReadyAll);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(IsReadyAll);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out IsReadyAll);
        }
    };
    /// <summary>
    /// 转发数据
    /// <summary>
    public partial class CLS_ForwardData
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Status);
            nbs.Write(DictStatusData.Count);
            foreach (var kvp in DictStatusData)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
            nbs.Write(Action);
            nbs.Write(DictActionData.Count);
            foreach (var kvp in DictActionData)
            {
                nbs.Write(kvp.Key);nbs.Write(kvp.Value);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Status);
            int var2809 = nbs.ReadInt();
            for (int k = 0; k < var2809; k++)
            {
                string var2810 = nbs.ReadString(); string var2811 = nbs.ReadString(); DictStatusData.Add(var2810, var2811); 
            }
            nbs.Read(out Action);
            int var2813 = nbs.ReadInt();
            for (int k = 0; k < var2813; k++)
            {
                string var2814 = nbs.ReadString(); string var2815 = nbs.ReadString(); DictActionData.Add(var2814, var2815); 
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> C2G_BATTLE_FORWARDDATA
    /// 请求 转发数据
    /// <summary>
    public partial class C2G_Battle_ForwardData : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(WarriorUid);
            ForwardData.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out WarriorUid);
            ForwardData.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(WarriorUid);
            ForwardData.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out WarriorUid);
            ForwardData.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2C_BATTLE_FORWARDDATA
    /// 返回 转发数据
    /// <summary>
    public partial class G2C_Battle_ForwardData : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PlayerId);
            nbs.Write(WarriorUid);
            ForwardData.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PlayerId);
            nbs.Read(out WarriorUid);
            ForwardData.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(PlayerId);
            nbs.Write(WarriorUid);
            ForwardData.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out PlayerId);
            nbs.Read(out WarriorUid);
            ForwardData.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2A_LOAD_SETLOAD
    /// 集群服务器发送负载给中心服务器
    /// <summary>
    public partial class G2A_Load_SetLoad : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Ip);
            nbs.Write(LinkType);
            nbs.Write(Name);
            nbs.Write(Load);
            nbs.Write(ProcessID);
            nbs.Write(Cpu);
            nbs.Write(Memory);
            nbs.Write(Threads);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Ip);
            nbs.Read(out LinkType);
            nbs.Read(out Name);
            nbs.Read(out Load);
            nbs.Read(out ProcessID);
            nbs.Read(out Cpu);
            nbs.Read(out Memory);
            nbs.Read(out Threads);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Id);
            nbs.Write(Ip);
            nbs.Write(LinkType);
            nbs.Write(Name);
            nbs.Write(Load);
            nbs.Write(ProcessID);
            nbs.Write(Cpu);
            nbs.Write(Memory);
            nbs.Write(Threads);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Id);
            nbs.Read(out Ip);
            nbs.Read(out LinkType);
            nbs.Read(out Name);
            nbs.Read(out Load);
            nbs.Read(out ProcessID);
            nbs.Read(out Cpu);
            nbs.Read(out Memory);
            nbs.Read(out Threads);
        }
    };
    /// <summary>
    /// 对应协议枚举-> B2T_GM_START
    /// 集群服务器发送负载给中心服务器
    /// <summary>
    public partial class B2T_GM_Start : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> B2T_GM_LOGIN
    /// 请求 GM登陆
    /// <summary>
    public partial class B2T_GM_Login : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Account);
            nbs.Write(Password);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Account);
            nbs.Read(out Password);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Account);
            nbs.Write(Password);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Account);
            nbs.Read(out Password);
        }
    };
    /// <summary>
    /// 对应协议枚举-> T2B_GM_LOGIN
    /// 返回 GM登陆
    /// <summary>
    public partial class T2B_GM_Login : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> B2G_GM_CMD
    /// 请求 GM特殊功能
    /// <summary>
    public partial class B2G_GM_Cmd : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Cmd);
            nbs.Write(Args.Count);
            foreach (var k in Args)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Cmd);
            int var2849 = nbs.ReadInt();
            for (int k = 0; k < var2849; k++)
            {
                string var2850 = nbs.ReadString();Args.Add(var2850);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Cmd);
            nbs.Write(Args.Count);
            foreach (var k in Args)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Cmd);
            int var2852 = nbs.ReadInt();
            for (int k = 0; k < var2852; k++)
            {
                string var2853 = nbs.ReadString();Args.Add(var2853);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> G2B_GM_CMD
    /// 请求 GM特殊功能
    /// <summary>
    public partial class G2B_GM_Cmd : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Cmd);
            nbs.Write(Args.Count);
            foreach (var k in Args)
            {
                nbs.Write(k);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Cmd);
            int var2855 = nbs.ReadInt();
            for (int k = 0; k < var2855; k++)
            {
                string var2856 = nbs.ReadString();Args.Add(var2856);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Cmd);
            nbs.Write(Args.Count);
            foreach (var k in Args)
            {
                nbs.Write(k);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Cmd);
            int var2858 = nbs.ReadInt();
            for (int k = 0; k < var2858; k++)
            {
                string var2859 = nbs.ReadString();Args.Add(var2859);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> T2B_MAIL_GLOBALLIST
    /// 请求 邮件列表
    /// <summary>
    public partial class T2B_Mail_GlobalList : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> B2T_MAIL_GLOBALLIST
    /// 返回 邮件列表
    /// <summary>
    public partial class B2T_Mail_GlobalList : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListMail.Count);
            foreach (var k in ListMail)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2860 = nbs.ReadInt();
            for (int k = 0; k < var2860; k++)
            {
                var var2861 = new CLS_MailInfoDetails(); var2861.Unserialize(ref nbs);ListMail.Add(var2861);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(ListMail.Count);
            foreach (var k in ListMail)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2862 = nbs.ReadInt();
            for (int k = 0; k < var2862; k++)
            {
                var var2863 = new CLS_MailInfoDetails(); var2863.Unserialize(ref nbs);ListMail.Add(var2863);
            }
        }
    };
    /// <summary>
    /// GM给玩家发送邮件信息
    /// <summary>
    public partial class CLS_GmMailInfo
    {
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(Id);
            nbs.Write(TargetType);
            nbs.Write(ListTarget.Count);
            foreach (var k in ListTarget)
            {
                nbs.Write(k);
            }
            nbs.Write(Title);
            nbs.Write(Body);
            nbs.Write(SenderName);
            nbs.Write(ListAttachments.Count);
            foreach (var k in ListAttachments)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out Id);
            nbs.Read(out TargetType);
            int var2866 = nbs.ReadInt();
            for (int k = 0; k < var2866; k++)
            {
                string var2867 = nbs.ReadString();ListTarget.Add(var2867);
            }
            nbs.Read(out Title);
            nbs.Read(out Body);
            nbs.Read(out SenderName);
            int var2871 = nbs.ReadInt();
            for (int k = 0; k < var2871; k++)
            {
                var var2872 = new CLS_AwardItem(); var2872.Unserialize(ref nbs);ListAttachments.Add(var2872);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> B2T_GMMAIL_SEND
    /// 请求 GM给玩家发送邮件
    /// <summary>
    public partial class B2T_GmMail_Send : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            MailInfo.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            MailInfo.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            MailInfo.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            MailInfo.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> T2B_GMMAIL_SEND
    /// 返回 GM给玩家发送邮件
    /// <summary>
    public partial class T2B_GmMail_Send : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Msg);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Msg);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Msg);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Msg);
        }
    };
    /// <summary>
    /// 对应协议枚举-> B2T_EDIT_PLAYER
    /// 发送 修改玩家数据
    /// <summary>
    public partial class B2T_Edit_Player : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(IdType);
            nbs.Write(Id);
            nbs.Write(Mode);
            nbs.Write(Arg);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out IdType);
            nbs.Read(out Id);
            nbs.Read(out Mode);
            nbs.Read(out Arg);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(IdType);
            nbs.Write(Id);
            nbs.Write(Mode);
            nbs.Write(Arg);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out IdType);
            nbs.Read(out Id);
            nbs.Read(out Mode);
            nbs.Read(out Arg);
        }
    };
    /// <summary>
    /// 对应协议枚举-> T2B_EDIT_PLAYER
    /// 返回 修改玩家数据
    /// <summary>
    public partial class T2B_Edit_Player : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Msg);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Msg);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Msg);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            nbs.Read(out Msg);
        }
    };
    /// <summary>
    /// 对应协议枚举-> B2T_BANK_CONF
    /// 请求 长安夺宝配置
    /// <summary>
    public partial class B2T_Bank_Conf : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BankConf.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BankConf.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BankConf.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BankConf.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> T2B_BANK_CONF
    /// 返回 长安夺宝配置
    /// <summary>
    public partial class T2B_Bank_Conf : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BankConf.Serialize(ref nbs);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BankConf.Unserialize(ref nbs);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            BankConf.Serialize(ref nbs);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            BankConf.Unserialize(ref nbs);
        }
    };
    /// <summary>
    /// 对应协议枚举-> B2T_BANK_INFO
    /// 请求 长安夺宝详情
    /// <summary>
    public partial class B2T_Bank_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };
    /// <summary>
    /// 对应协议枚举-> T2B_BANK_INFO
    /// 返回 长安夺宝详情
    /// <summary>
    public partial class T2B_Bank_Info : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Infos.Count);
            foreach (var k in Infos)
            {
                k.Serialize(ref nbs);
            }
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2891 = nbs.ReadInt();
            for (int k = 0; k < var2891; k++)
            {
                var var2892 = new CLS_WarZoneInfo(); var2892.Unserialize(ref nbs);Infos.Add(var2892);
            }
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.Write(Infos.Count);
            foreach (var k in Infos)
            {
                k.Serialize(ref nbs);
            }
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
            int var2893 = nbs.ReadInt();
            for (int k = 0; k < var2893; k++)
            {
                var var2894 = new CLS_WarZoneInfo(); var2894.Unserialize(ref nbs);Infos.Add(var2894);
            }
        }
    };
    /// <summary>
    /// 对应协议枚举-> B2T_GM_END
    /// 返回 长安夺宝详情
    /// <summary>
    public partial class B2T_GM_End : ProtocolMsgBase, INbsSerializer
    {
        public NetBitStream Serialize()
        {
            NetBitStream nbs = new NetBitStream();
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
            nbs.WriteEnd();
            return nbs;
        }
        public void Unserialize(byte[] buffer)
        {
            NetBitStream nbs = new NetBitStream();
            nbs.BeginRead(buffer);
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
        public void Serialize(ref NetBitStream nbs)
        {
            nbs.Write(_protocol);
            nbs.Write(_result);
            nbs.Write(Pin);
            nbs.Write(Puid);
            nbs.Write(Shuttle);
        }
        public void Unserialize(ref NetBitStream nbs)
        {
            nbs.Read(out _protocol);
            nbs.Read(out _result);
            nbs.Read(out Pin);
            nbs.Read(out Puid);
            nbs.Read(out Shuttle);
        }
    };

}

